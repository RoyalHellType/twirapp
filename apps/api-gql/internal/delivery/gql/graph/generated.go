// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/google/uuid"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	AdminAuditLog() AdminAuditLogResolver
	AdminNotification() AdminNotificationResolver
	AuditLog() AuditLogResolver
	AuthenticatedUser() AuthenticatedUserResolver
	CommandResponse() CommandResponseResolver
	CommunityUser() CommunityUserResolver
	Dashboard() DashboardResolver
	EmoteStatisticTopUser() EmoteStatisticTopUserResolver
	EmoteStatisticUserUsage() EmoteStatisticUserUsageResolver
	Greeting() GreetingResolver
	Mutation() MutationResolver
	Query() QueryResolver
	Role() RoleResolver
	Subscription() SubscriptionResolver
	TwirAdminUser() TwirAdminUserResolver
	TwitchRedemption() TwitchRedemptionResolver
}

type DirectiveRoot struct {
	HasAccessToSelectedDashboard       func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	HasChannelRolesDashboardPermission func(ctx context.Context, obj interface{}, next graphql.Resolver, permission *gqlmodel.ChannelRolePermissionEnum) (res interface{}, err error)
	IsAdmin                            func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	IsAuthenticated                    func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Validate                           func(ctx context.Context, obj interface{}, next graphql.Resolver, constraint string) (res interface{}, err error)
}

type ComplexityRoot struct {
	AdminAuditLog struct {
		Channel       func(childComplexity int) int
		ChannelID     func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		NewValue      func(childComplexity int) int
		ObjectID      func(childComplexity int) int
		OldValue      func(childComplexity int) int
		OperationType func(childComplexity int) int
		System        func(childComplexity int) int
		User          func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	AdminAuditLogResponse struct {
		Logs  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	AdminNotification struct {
		CreatedAt     func(childComplexity int) int
		EditorJsJSON  func(childComplexity int) int
		ID            func(childComplexity int) int
		Text          func(childComplexity int) int
		TwitchProfile func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	AdminNotificationsResponse struct {
		Notifications func(childComplexity int) int
		Total         func(childComplexity int) int
	}

	AuditLog struct {
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		NewValue      func(childComplexity int) int
		ObjectID      func(childComplexity int) int
		OldValue      func(childComplexity int) int
		OperationType func(childComplexity int) int
		System        func(childComplexity int) int
		User          func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	AuthenticatedUser struct {
		APIKey                      func(childComplexity int) int
		AvailableDashboards         func(childComplexity int) int
		BotID                       func(childComplexity int) int
		HideOnLandingPage           func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsBanned                    func(childComplexity int) int
		IsBotAdmin                  func(childComplexity int) int
		IsBotModerator              func(childComplexity int) int
		IsEnabled                   func(childComplexity int) int
		SelectedDashboardID         func(childComplexity int) int
		SelectedDashboardTwitchUser func(childComplexity int) int
		TwitchProfile               func(childComplexity int) int
	}

	Badge struct {
		CreatedAt func(childComplexity int) int
		Enabled   func(childComplexity int) int
		FfzSlot   func(childComplexity int) int
		FileURL   func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Users     func(childComplexity int) int
	}

	BuiltInVariable struct {
		CanBeUsedInRegistry func(childComplexity int) int
		Description         func(childComplexity int) int
		Example             func(childComplexity int) int
		Name                func(childComplexity int) int
		Visible             func(childComplexity int) int
	}

	ChannelAlert struct {
		AudioID      func(childComplexity int) int
		AudioVolume  func(childComplexity int) int
		CommandIds   func(childComplexity int) int
		GreetingsIds func(childComplexity int) int
		ID           func(childComplexity int) int
		KeywordsIds  func(childComplexity int) int
		Name         func(childComplexity int) int
		RewardIds    func(childComplexity int) int
	}

	ChatAlerts struct {
		Ban                 func(childComplexity int) int
		ChatCleared         func(childComplexity int) int
		Cheers              func(childComplexity int) int
		Donations           func(childComplexity int) int
		FirstUserMessage    func(childComplexity int) int
		Followers           func(childComplexity int) int
		MessageDelete       func(childComplexity int) int
		Raids               func(childComplexity int) int
		Redemptions         func(childComplexity int) int
		StreamOffline       func(childComplexity int) int
		StreamOnline        func(childComplexity int) int
		Subscribers         func(childComplexity int) int
		UnbanRequestCreate  func(childComplexity int) int
		UnbanRequestResolve func(childComplexity int) int
	}

	ChatAlertsBan struct {
		Cooldown          func(childComplexity int) int
		Enabled           func(childComplexity int) int
		IgnoreTimeoutFrom func(childComplexity int) int
		Messages          func(childComplexity int) int
	}

	ChatAlertsChatCleared struct {
		Cooldown func(childComplexity int) int
		Enabled  func(childComplexity int) int
		Messages func(childComplexity int) int
	}

	ChatAlertsCheers struct {
		Cooldown func(childComplexity int) int
		Enabled  func(childComplexity int) int
		Messages func(childComplexity int) int
	}

	ChatAlertsCountedMessage struct {
		Count func(childComplexity int) int
		Text  func(childComplexity int) int
	}

	ChatAlertsDonations struct {
		Cooldown func(childComplexity int) int
		Enabled  func(childComplexity int) int
		Messages func(childComplexity int) int
	}

	ChatAlertsFirstUserMessage struct {
		Cooldown func(childComplexity int) int
		Enabled  func(childComplexity int) int
		Messages func(childComplexity int) int
	}

	ChatAlertsFollowersSettings struct {
		Cooldown func(childComplexity int) int
		Enabled  func(childComplexity int) int
		Messages func(childComplexity int) int
	}

	ChatAlertsMessage struct {
		Text func(childComplexity int) int
	}

	ChatAlertsMessageDelete struct {
		Cooldown func(childComplexity int) int
		Enabled  func(childComplexity int) int
		Messages func(childComplexity int) int
	}

	ChatAlertsRaids struct {
		Cooldown func(childComplexity int) int
		Enabled  func(childComplexity int) int
		Messages func(childComplexity int) int
	}

	ChatAlertsRedemptions struct {
		Cooldown          func(childComplexity int) int
		Enabled           func(childComplexity int) int
		IgnoredRewardsIds func(childComplexity int) int
		Messages          func(childComplexity int) int
	}

	ChatAlertsStreamOffline struct {
		Cooldown func(childComplexity int) int
		Enabled  func(childComplexity int) int
		Messages func(childComplexity int) int
	}

	ChatAlertsStreamOnline struct {
		Cooldown func(childComplexity int) int
		Enabled  func(childComplexity int) int
		Messages func(childComplexity int) int
	}

	ChatAlertsSubscribers struct {
		Cooldown func(childComplexity int) int
		Enabled  func(childComplexity int) int
		Messages func(childComplexity int) int
	}

	ChatAlertsUnbanRequestCreate struct {
		Cooldown func(childComplexity int) int
		Enabled  func(childComplexity int) int
		Messages func(childComplexity int) int
	}

	ChatAlertsUnbanRequestResolve struct {
		Cooldown func(childComplexity int) int
		Enabled  func(childComplexity int) int
		Messages func(childComplexity int) int
	}

	ChatOverlay struct {
		Animation           func(childComplexity int) int
		ChatBackgroundColor func(childComplexity int) int
		Direction           func(childComplexity int) int
		FontFamily          func(childComplexity int) int
		FontSize            func(childComplexity int) int
		FontStyle           func(childComplexity int) int
		FontWeight          func(childComplexity int) int
		HideBots            func(childComplexity int) int
		HideCommands        func(childComplexity int) int
		ID                  func(childComplexity int) int
		MessageHideTimeout  func(childComplexity int) int
		MessageShowDelay    func(childComplexity int) int
		PaddingContainer    func(childComplexity int) int
		Preset              func(childComplexity int) int
		ShowAnnounceBadge   func(childComplexity int) int
		ShowBadges          func(childComplexity int) int
		TextShadowColor     func(childComplexity int) int
		TextShadowSize      func(childComplexity int) int
	}

	Command struct {
		Aliases                   func(childComplexity int) int
		AllowedUsersIds           func(childComplexity int) int
		Cooldown                  func(childComplexity int) int
		CooldownRolesIds          func(childComplexity int) int
		CooldownType              func(childComplexity int) int
		Default                   func(childComplexity int) int
		DefaultName               func(childComplexity int) int
		DeniedUsersIds            func(childComplexity int) int
		Description               func(childComplexity int) int
		Enabled                   func(childComplexity int) int
		EnabledCategories         func(childComplexity int) int
		ExpiresAt                 func(childComplexity int) int
		ExpiresType               func(childComplexity int) int
		Group                     func(childComplexity int) int
		GroupID                   func(childComplexity int) int
		ID                        func(childComplexity int) int
		IsReply                   func(childComplexity int) int
		KeepResponsesOrder        func(childComplexity int) int
		Module                    func(childComplexity int) int
		Name                      func(childComplexity int) int
		OnlineOnly                func(childComplexity int) int
		RequiredMessages          func(childComplexity int) int
		RequiredUsedChannelPoints func(childComplexity int) int
		RequiredWatchTime         func(childComplexity int) int
		Responses                 func(childComplexity int) int
		RolesIds                  func(childComplexity int) int
		Visible                   func(childComplexity int) int
	}

	CommandCreatePayload struct {
		ID func(childComplexity int) int
	}

	CommandGroup struct {
		Color func(childComplexity int) int
		ID    func(childComplexity int) int
		Name  func(childComplexity int) int
	}

	CommandResponse struct {
		CommandID           func(childComplexity int) int
		ID                  func(childComplexity int) int
		Text                func(childComplexity int) int
		TwitchCategories    func(childComplexity int) int
		TwitchCategoriesIds func(childComplexity int) int
	}

	CommunityUser struct {
		ID                func(childComplexity int) int
		Messages          func(childComplexity int) int
		TwitchProfile     func(childComplexity int) int
		UsedChannelPoints func(childComplexity int) int
		UsedEmotes        func(childComplexity int) int
		WatchedMs         func(childComplexity int) int
	}

	CommunityUsersResponse struct {
		Total func(childComplexity int) int
		Users func(childComplexity int) int
	}

	Dashboard struct {
		Flags         func(childComplexity int) int
		ID            func(childComplexity int) int
		TwitchProfile func(childComplexity int) int
	}

	DashboardEventData struct {
		BanEndsInMinutes                func(childComplexity int) int
		BanReason                       func(childComplexity int) int
		BannedUserLogin                 func(childComplexity int) int
		BannedUserName                  func(childComplexity int) int
		DonationAmount                  func(childComplexity int) int
		DonationCurrency                func(childComplexity int) int
		DonationMessage                 func(childComplexity int) int
		DonationUserName                func(childComplexity int) int
		FirstUserMessageMessage         func(childComplexity int) int
		FirstUserMessageUserDisplayName func(childComplexity int) int
		FirstUserMessageUserName        func(childComplexity int) int
		FollowUserDisplayName           func(childComplexity int) int
		FollowUserName                  func(childComplexity int) int
		Message                         func(childComplexity int) int
		ModeratorDisplayName            func(childComplexity int) int
		ModeratorName                   func(childComplexity int) int
		RaidedFromDisplayName           func(childComplexity int) int
		RaidedFromUserName              func(childComplexity int) int
		RaidedViewersCount              func(childComplexity int) int
		ReSubLevel                      func(childComplexity int) int
		ReSubMonths                     func(childComplexity int) int
		ReSubStreak                     func(childComplexity int) int
		ReSubUserDisplayName            func(childComplexity int) int
		ReSubUserName                   func(childComplexity int) int
		RedemptionCost                  func(childComplexity int) int
		RedemptionInput                 func(childComplexity int) int
		RedemptionTitle                 func(childComplexity int) int
		RedemptionUserDisplayName       func(childComplexity int) int
		RedemptionUserName              func(childComplexity int) int
		SubGiftLevel                    func(childComplexity int) int
		SubGiftTargetUserDisplayName    func(childComplexity int) int
		SubGiftTargetUserName           func(childComplexity int) int
		SubGiftUserDisplayName          func(childComplexity int) int
		SubGiftUserName                 func(childComplexity int) int
		SubLevel                        func(childComplexity int) int
		SubUserDisplayName              func(childComplexity int) int
		SubUserName                     func(childComplexity int) int
		UserLogin                       func(childComplexity int) int
		UserName                        func(childComplexity int) int
	}

	DashboardEventListPayload struct {
		Events func(childComplexity int) int
	}

	DashboardEventPayload struct {
		CreatedAt func(childComplexity int) int
		Data      func(childComplexity int) int
		Type      func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	DashboardStats struct {
		CategoryID     func(childComplexity int) int
		CategoryName   func(childComplexity int) int
		ChatMessages   func(childComplexity int) int
		Followers      func(childComplexity int) int
		RequestedSongs func(childComplexity int) int
		StartedAt      func(childComplexity int) int
		Subs           func(childComplexity int) int
		Title          func(childComplexity int) int
		UsedEmotes     func(childComplexity int) int
		Viewers        func(childComplexity int) int
	}

	DuelGame struct {
		BothDieMessage  func(childComplexity int) int
		BothDiePercent  func(childComplexity int) int
		Enabled         func(childComplexity int) int
		GlobalCooldown  func(childComplexity int) int
		PointsPerLose   func(childComplexity int) int
		PointsPerWin    func(childComplexity int) int
		ResultMessage   func(childComplexity int) int
		SecondsToAccept func(childComplexity int) int
		StartMessage    func(childComplexity int) int
		TimeoutSeconds  func(childComplexity int) int
		UserCooldown    func(childComplexity int) int
	}

	EightBallGame struct {
		Answers func(childComplexity int) int
		Enabled func(childComplexity int) int
	}

	EmoteStatisticTopUser struct {
		Count         func(childComplexity int) int
		TwitchProfile func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	EmoteStatisticUsage struct {
		Count     func(childComplexity int) int
		Timestamp func(childComplexity int) int
	}

	EmoteStatisticUserUsage struct {
		Date          func(childComplexity int) int
		TwitchProfile func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	EmotesStatistic struct {
		EmoteName         func(childComplexity int) int
		GraphicUsages     func(childComplexity int) int
		LastUsedTimestamp func(childComplexity int) int
		TotalUsages       func(childComplexity int) int
	}

	EmotesStatisticEmoteDetailedResponse struct {
		EmoteName          func(childComplexity int) int
		GraphicUsages      func(childComplexity int) int
		LastUsedTimestamp  func(childComplexity int) int
		TopUsers           func(childComplexity int) int
		TopUsersTotal      func(childComplexity int) int
		TotalUsages        func(childComplexity int) int
		UsagesByUsersTotal func(childComplexity int) int
		UsagesHistory      func(childComplexity int) int
	}

	EmotesStatisticResponse struct {
		Emotes func(childComplexity int) int
		Total  func(childComplexity int) int
	}

	Greeting struct {
		Enabled       func(childComplexity int) int
		ID            func(childComplexity int) int
		IsReply       func(childComplexity int) int
		Text          func(childComplexity int) int
		TwitchProfile func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	Keyword struct {
		Cooldown            func(childComplexity int) int
		Enabled             func(childComplexity int) int
		ID                  func(childComplexity int) int
		IsRegularExpression func(childComplexity int) int
		IsReply             func(childComplexity int) int
		Response            func(childComplexity int) int
		Text                func(childComplexity int) int
		UsageCount          func(childComplexity int) int
	}

	Mutation struct {
		AuthenticatedUserRegenerateAPIKey func(childComplexity int) int
		AuthenticatedUserSelectDashboard  func(childComplexity int, dashboardID string) int
		AuthenticatedUserUpdatePublicPage func(childComplexity int, opts gqlmodel.UserUpdatePublicSettingsInput) int
		AuthenticatedUserUpdateSettings   func(childComplexity int, opts gqlmodel.UserUpdateSettingsInput) int
		BadgesAddUser                     func(childComplexity int, id string, userID string) int
		BadgesCreate                      func(childComplexity int, opts gqlmodel.TwirBadgeCreateOpts) int
		BadgesDelete                      func(childComplexity int, id string) int
		BadgesRemoveUser                  func(childComplexity int, id string, userID string) int
		BadgesUpdate                      func(childComplexity int, id string, opts gqlmodel.TwirBadgeUpdateOpts) int
		ChannelAlertsCreate               func(childComplexity int, input gqlmodel.ChannelAlertCreateInput) int
		ChannelAlertsDelete               func(childComplexity int, id string) int
		ChannelAlertsUpdate               func(childComplexity int, id string, input gqlmodel.ChannelAlertUpdateInput) int
		ChatOverlayCreate                 func(childComplexity int, opts gqlmodel.ChatOverlayMutateOpts) int
		ChatOverlayDelete                 func(childComplexity int, id string) int
		ChatOverlayUpdate                 func(childComplexity int, id string, opts gqlmodel.ChatOverlayMutateOpts) int
		CommandsCreate                    func(childComplexity int, opts gqlmodel.CommandsCreateOpts) int
		CommandsGroupsCreate              func(childComplexity int, opts gqlmodel.CommandsGroupsCreateOpts) int
		CommandsGroupsRemove              func(childComplexity int, id string) int
		CommandsGroupsUpdate              func(childComplexity int, id string, opts gqlmodel.CommandsGroupsUpdateOpts) int
		CommandsRemove                    func(childComplexity int, id string) int
		CommandsUpdate                    func(childComplexity int, id string, opts gqlmodel.CommandsUpdateOpts) int
		CommunityResetStats               func(childComplexity int, typeArg gqlmodel.CommunityUsersResetType) int
		DropAllAuthSessions               func(childComplexity int) int
		EventsubSubscribe                 func(childComplexity int, opts gqlmodel.EventsubSubscribeInput) int
		ExecuteScript                     func(childComplexity int, script string, testAsUserName *string) int
		GamesDuelUpdate                   func(childComplexity int, opts gqlmodel.DuelGameOpts) int
		GamesEightBallUpdate              func(childComplexity int, opts gqlmodel.EightBallGameOpts) int
		GamesRussianRouletteUpdate        func(childComplexity int, opts gqlmodel.RussianRouletteGameOpts) int
		GamesSeppukuUpdate                func(childComplexity int, opts gqlmodel.SeppukuGameOpts) int
		GamesVotebanUpdate                func(childComplexity int, opts gqlmodel.VotebanGameOpts) int
		GreetingsCreate                   func(childComplexity int, opts gqlmodel.GreetingsCreateInput) int
		GreetingsRemove                   func(childComplexity int, id string) int
		GreetingsUpdate                   func(childComplexity int, id string, opts gqlmodel.GreetingsUpdateInput) int
		KeywordCreate                     func(childComplexity int, opts gqlmodel.KeywordCreateInput) int
		KeywordRemove                     func(childComplexity int, id string) int
		KeywordUpdate                     func(childComplexity int, id string, opts gqlmodel.KeywordUpdateInput) int
		Logout                            func(childComplexity int) int
		NotificationsCreate               func(childComplexity int, text *string, editorJsJSON *string, userID *string) int
		NotificationsDelete               func(childComplexity int, id string) int
		NotificationsUpdate               func(childComplexity int, id string, opts gqlmodel.NotificationUpdateOpts) int
		NowPlayingOverlayCreate           func(childComplexity int, opts gqlmodel.NowPlayingOverlayMutateOpts) int
		NowPlayingOverlayDelete           func(childComplexity int, id string) int
		NowPlayingOverlayUpdate           func(childComplexity int, id string, opts gqlmodel.NowPlayingOverlayMutateOpts) int
		RolesCreate                       func(childComplexity int, opts gqlmodel.RolesCreateOrUpdateOpts) int
		RolesRemove                       func(childComplexity int, id string) int
		RolesUpdate                       func(childComplexity int, id string, opts gqlmodel.RolesCreateOrUpdateOpts) int
		SongRequestsUpdate                func(childComplexity int, opts gqlmodel.SongRequestsSettingsOpts) int
		SwitchUserAdmin                   func(childComplexity int, userID string) int
		SwitchUserBan                     func(childComplexity int, userID string) int
		TimersCreate                      func(childComplexity int, opts gqlmodel.TimerCreateInput) int
		TimersRemove                      func(childComplexity int, id string) int
		TimersUpdate                      func(childComplexity int, id string, opts gqlmodel.TimerUpdateInput) int
		UpdateChatAlerts                  func(childComplexity int, input gqlmodel.ChatAlertsInput) int
		VariablesCreate                   func(childComplexity int, opts gqlmodel.VariableCreateInput) int
		VariablesDelete                   func(childComplexity int, id string) int
		VariablesUpdate                   func(childComplexity int, id string, opts gqlmodel.VariableUpdateInput) int
	}

	NowPlayingOverlay struct {
		BackgroundColor func(childComplexity int) int
		ChannelID       func(childComplexity int) int
		FontFamily      func(childComplexity int) int
		FontWeight      func(childComplexity int) int
		HideTimeout     func(childComplexity int) int
		ID              func(childComplexity int) int
		Preset          func(childComplexity int) int
		ShowImage       func(childComplexity int) int
	}

	NowPlayingOverlayTrack struct {
		Artist   func(childComplexity int) int
		ImageURL func(childComplexity int) int
		Title    func(childComplexity int) int
	}

	PublicCommand struct {
		Aliases      func(childComplexity int) int
		Cooldown     func(childComplexity int) int
		CooldownType func(childComplexity int) int
		Description  func(childComplexity int) int
		Module       func(childComplexity int) int
		Name         func(childComplexity int) int
		Permissions  func(childComplexity int) int
		Responses    func(childComplexity int) int
	}

	PublicCommandPermission struct {
		Name func(childComplexity int) int
		Type func(childComplexity int) int
	}

	PublicSettings struct {
		Description func(childComplexity int) int
		SocialLinks func(childComplexity int) int
	}

	Query struct {
		AdminAuditLogs                          func(childComplexity int, input gqlmodel.AdminAuditLogsInput) int
		AuditLog                                func(childComplexity int) int
		AuthLink                                func(childComplexity int, redirectTo string) int
		AuthenticatedUser                       func(childComplexity int) int
		ChannelAlerts                           func(childComplexity int) int
		ChatAlerts                              func(childComplexity int) int
		ChatOverlays                            func(childComplexity int) int
		ChatOverlaysByID                        func(childComplexity int, id string) int
		Commands                                func(childComplexity int) int
		CommandsGroups                          func(childComplexity int) int
		CommandsPublic                          func(childComplexity int, channelID string) int
		CommunityUsers                          func(childComplexity int, opts gqlmodel.CommunityUsersOpts) int
		EmotesStatisticEmoteDetailedInformation func(childComplexity int, opts gqlmodel.EmotesStatisticEmoteDetailedOpts) int
		EmotesStatistics                        func(childComplexity int, opts gqlmodel.EmotesStatisticsOpts) int
		GamesDuel                               func(childComplexity int) int
		GamesEightBall                          func(childComplexity int) int
		GamesRussianRoulette                    func(childComplexity int) int
		GamesSeppuku                            func(childComplexity int) int
		GamesVoteban                            func(childComplexity int) int
		Greetings                               func(childComplexity int) int
		Keywords                                func(childComplexity int) int
		NotificationsByAdmin                    func(childComplexity int, opts gqlmodel.AdminNotificationsParams) int
		NotificationsByUser                     func(childComplexity int) int
		NowPlayingOverlays                      func(childComplexity int) int
		NowPlayingOverlaysByID                  func(childComplexity int, id string) int
		RewardsRedemptionsHistory               func(childComplexity int, opts gqlmodel.TwitchRedemptionsOpts) int
		Roles                                   func(childComplexity int) int
		SongRequests                            func(childComplexity int) int
		SongRequestsSearchChannelOrVideo        func(childComplexity int, opts gqlmodel.SongRequestsSearchChannelOrVideoOpts) int
		Timers                                  func(childComplexity int) int
		TwirBadges                              func(childComplexity int) int
		TwirStats                               func(childComplexity int) int
		TwirUsers                               func(childComplexity int, opts gqlmodel.TwirUsersSearchParams) int
		TwitchGetChannelBadges                  func(childComplexity int, channelID *string) int
		TwitchGetChannelRewards                 func(childComplexity int, channelID *string) int
		TwitchGetGlobalBadges                   func(childComplexity int) int
		TwitchGetUserByID                       func(childComplexity int, id string) int
		TwitchGetUserByName                     func(childComplexity int, name string) int
		TwitchRewards                           func(childComplexity int, channelID *string) int
		UserPublicSettings                      func(childComplexity int, userID *string) int
		Variables                               func(childComplexity int) int
		VariablesBuiltIn                        func(childComplexity int) int
	}

	Role struct {
		ChannelID   func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Permissions func(childComplexity int) int
		Settings    func(childComplexity int) int
		Type        func(childComplexity int) int
		Users       func(childComplexity int) int
	}

	RoleSettings struct {
		RequiredMessages          func(childComplexity int) int
		RequiredUserChannelPoints func(childComplexity int) int
		RequiredWatchTime         func(childComplexity int) int
	}

	RussianRouletteGame struct {
		CanBeUsedByModerator func(childComplexity int) int
		ChargedBullets       func(childComplexity int) int
		DeathMessage         func(childComplexity int) int
		DecisionSeconds      func(childComplexity int) int
		Enabled              func(childComplexity int) int
		InitMessage          func(childComplexity int) int
		SurviveMessage       func(childComplexity int) int
		TimeoutSeconds       func(childComplexity int) int
		TumberSize           func(childComplexity int) int
	}

	SeppukuGame struct {
		Enabled           func(childComplexity int) int
		Message           func(childComplexity int) int
		MessageModerators func(childComplexity int) int
		TimeoutModerators func(childComplexity int) int
		TimeoutSeconds    func(childComplexity int) int
	}

	SocialLink struct {
		Href  func(childComplexity int) int
		Title func(childComplexity int) int
	}

	SongRequestsChannelTranslations struct {
		Denied func(childComplexity int) int
	}

	SongRequestsDenyList struct {
		ArtistsNames func(childComplexity int) int
		Channels     func(childComplexity int) int
		Songs        func(childComplexity int) int
		Users        func(childComplexity int) int
		Words        func(childComplexity int) int
	}

	SongRequestsSearchChannelOrVideoItem struct {
		ID        func(childComplexity int) int
		Thumbnail func(childComplexity int) int
		Title     func(childComplexity int) int
	}

	SongRequestsSearchChannelOrVideoResponse struct {
		Items func(childComplexity int) int
	}

	SongRequestsSettings struct {
		AcceptOnlyWhenOnline         func(childComplexity int) int
		AnnouncePlay                 func(childComplexity int) int
		ChannelPointsRewardID        func(childComplexity int) int
		DenyList                     func(childComplexity int) int
		Enabled                      func(childComplexity int) int
		MaxRequests                  func(childComplexity int) int
		NeededVotesForSkip           func(childComplexity int) int
		PlayerNoCookieMode           func(childComplexity int) int
		Song                         func(childComplexity int) int
		TakeSongFromDonationMessages func(childComplexity int) int
		Translations                 func(childComplexity int) int
		User                         func(childComplexity int) int
	}

	SongRequestsSongSettings struct {
		AcceptedCategories func(childComplexity int) int
		MaxLength          func(childComplexity int) int
		MinLength          func(childComplexity int) int
		MinViews           func(childComplexity int) int
	}

	SongRequestsSongTranslations struct {
		AgeRestrictions      func(childComplexity int) int
		AlreadyInQueue       func(childComplexity int) int
		CannotGetInformation func(childComplexity int) int
		Denied               func(childComplexity int) int
		Live                 func(childComplexity int) int
		MaxLength            func(childComplexity int) int
		MaximumOrdered       func(childComplexity int) int
		MinLength            func(childComplexity int) int
		MinViews             func(childComplexity int) int
		NotFound             func(childComplexity int) int
		RequestedMessage     func(childComplexity int) int
	}

	SongRequestsTranslations struct {
		AcceptOnlyWhenOnline func(childComplexity int) int
		Channel              func(childComplexity int) int
		NoText               func(childComplexity int) int
		NotEnabled           func(childComplexity int) int
		NowPlaying           func(childComplexity int) int
		Song                 func(childComplexity int) int
		User                 func(childComplexity int) int
	}

	SongRequestsUserSettings struct {
		MaxRequests   func(childComplexity int) int
		MinFollowTime func(childComplexity int) int
		MinMessages   func(childComplexity int) int
		MinWatchTime  func(childComplexity int) int
	}

	SongRequestsUserTranslations struct {
		Denied      func(childComplexity int) int
		MaxRequests func(childComplexity int) int
		MinFollow   func(childComplexity int) int
		MinMessages func(childComplexity int) int
		MinWatched  func(childComplexity int) int
	}

	Subscription struct {
		AuditLog                  func(childComplexity int) int
		ChatOverlaySettings       func(childComplexity int, id string, apiKey string) int
		DashboardStats            func(childComplexity int) int
		DashboardWidgetsEvents    func(childComplexity int) int
		NewNotification           func(childComplexity int) int
		NowPlayingCurrentTrack    func(childComplexity int, apiKey string) int
		NowPlayingOverlaySettings func(childComplexity int, id string, apiKey string) int
	}

	Timer struct {
		Enabled         func(childComplexity int) int
		ID              func(childComplexity int) int
		MessageInterval func(childComplexity int) int
		Name            func(childComplexity int) int
		Responses       func(childComplexity int) int
		TimeInterval    func(childComplexity int) int
	}

	TimerResponse struct {
		ID         func(childComplexity int) int
		IsAnnounce func(childComplexity int) int
		Text       func(childComplexity int) int
	}

	TwirAdminUser struct {
		APIKey         func(childComplexity int) int
		ID             func(childComplexity int) int
		IsBanned       func(childComplexity int) int
		IsBotAdmin     func(childComplexity int) int
		IsBotEnabled   func(childComplexity int) int
		IsBotModerator func(childComplexity int) int
		TwitchProfile  func(childComplexity int) int
	}

	TwirStats struct {
		Channels        func(childComplexity int) int
		CreatedCommands func(childComplexity int) int
		Messages        func(childComplexity int) int
		Streamers       func(childComplexity int) int
		UsedCommands    func(childComplexity int) int
		UsedEmotes      func(childComplexity int) int
		Viewers         func(childComplexity int) int
	}

	TwirStatsStreamer struct {
		FollowersCount func(childComplexity int) int
		ID             func(childComplexity int) int
		IsLive         func(childComplexity int) int
		IsPartner      func(childComplexity int) int
		TwitchProfile  func(childComplexity int) int
	}

	TwirTwitchChannelBadgeResponse struct {
		Badges func(childComplexity int) int
	}

	TwirTwitchChannelReward struct {
		BackgroundColor                   func(childComplexity int) int
		BroadcasterID                     func(childComplexity int) int
		BroadcasterLogin                  func(childComplexity int) int
		BroadcasterName                   func(childComplexity int) int
		CooldownExpiresAt                 func(childComplexity int) int
		Cost                              func(childComplexity int) int
		GlobalCooldownSetting             func(childComplexity int) int
		ID                                func(childComplexity int) int
		Image                             func(childComplexity int) int
		IsEnabled                         func(childComplexity int) int
		IsInStock                         func(childComplexity int) int
		IsPaused                          func(childComplexity int) int
		IsUserInputRequired               func(childComplexity int) int
		MaxPerStreamSetting               func(childComplexity int) int
		MaxPerUserPerStreamSetting        func(childComplexity int) int
		Prompt                            func(childComplexity int) int
		RedemptionsRedeemedCurrentStream  func(childComplexity int) int
		ShouldRedemptionsSkipRequestQueue func(childComplexity int) int
		Title                             func(childComplexity int) int
	}

	TwirTwitchChannelRewardGlobalCooldownSetting struct {
		GlobalCooldownSeconds func(childComplexity int) int
		IsEnabled             func(childComplexity int) int
	}

	TwirTwitchChannelRewardImage struct {
		URL1x func(childComplexity int) int
		URL2x func(childComplexity int) int
		URL4x func(childComplexity int) int
	}

	TwirTwitchChannelRewardMaxPerStreamSetting struct {
		IsEnabled    func(childComplexity int) int
		MaxPerStream func(childComplexity int) int
	}

	TwirTwitchChannelRewardMaxPerUserPerStreamSetting struct {
		IsEnabled           func(childComplexity int) int
		MaxPerUserPerStream func(childComplexity int) int
	}

	TwirTwitchChannelRewardResponse struct {
		PartnerOrAffiliate func(childComplexity int) int
		Rewards            func(childComplexity int) int
	}

	TwirTwitchGlobalBadgeResponse struct {
		Badges func(childComplexity int) int
	}

	TwirUserTwitchInfo struct {
		Description     func(childComplexity int) int
		DisplayName     func(childComplexity int) int
		ID              func(childComplexity int) int
		Login           func(childComplexity int) int
		NotFound        func(childComplexity int) int
		ProfileImageURL func(childComplexity int) int
	}

	TwirUsersResponse struct {
		Total func(childComplexity int) int
		Users func(childComplexity int) int
	}

	TwitchBadge struct {
		SetID    func(childComplexity int) int
		Versions func(childComplexity int) int
	}

	TwitchBadgeVersion struct {
		ID         func(childComplexity int) int
		ImageURL1x func(childComplexity int) int
		ImageURL2x func(childComplexity int) int
		ImageURL4x func(childComplexity int) int
	}

	TwitchCategory struct {
		BoxArtURL func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	TwitchRedemption struct {
		ChannelID  func(childComplexity int) int
		ID         func(childComplexity int) int
		Prompt     func(childComplexity int) int
		RedeemedAt func(childComplexity int) int
		Reward     func(childComplexity int) int
		User       func(childComplexity int) int
	}

	TwitchRedemptionResponse struct {
		Redemptions func(childComplexity int) int
		Total       func(childComplexity int) int
	}

	TwitchReward struct {
		BackgroundColor func(childComplexity int) int
		Cost            func(childComplexity int) int
		Enabled         func(childComplexity int) int
		ID              func(childComplexity int) int
		ImageUrls       func(childComplexity int) int
		Title           func(childComplexity int) int
		UsedTimes       func(childComplexity int) int
	}

	UserNotification struct {
		CreatedAt    func(childComplexity int) int
		EditorJsJSON func(childComplexity int) int
		ID           func(childComplexity int) int
		Text         func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	Variable struct {
		Description func(childComplexity int) int
		EvalValue   func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Response    func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	VotebanGame struct {
		BanMessage               func(childComplexity int) int
		BanMessageModerators     func(childComplexity int) int
		ChatVotesWordsNegative   func(childComplexity int) int
		ChatVotesWordsPositive   func(childComplexity int) int
		Enabled                  func(childComplexity int) int
		InitMessage              func(childComplexity int) int
		NeededVotes              func(childComplexity int) int
		SurviveMessage           func(childComplexity int) int
		SurviveMessageModerators func(childComplexity int) int
		TimeoutModerators        func(childComplexity int) int
		TimeoutSeconds           func(childComplexity int) int
		VoteDuration             func(childComplexity int) int
		VotingMode               func(childComplexity int) int
	}
}

type AdminAuditLogResolver interface {
	User(ctx context.Context, obj *gqlmodel.AdminAuditLog) (*gqlmodel.TwirUserTwitchInfo, error)
	Channel(ctx context.Context, obj *gqlmodel.AdminAuditLog) (*gqlmodel.TwirUserTwitchInfo, error)
}
type AdminNotificationResolver interface {
	TwitchProfile(ctx context.Context, obj *gqlmodel.AdminNotification) (*gqlmodel.TwirUserTwitchInfo, error)
}
type AuditLogResolver interface {
	User(ctx context.Context, obj *gqlmodel.AuditLog) (*gqlmodel.TwirUserTwitchInfo, error)
}
type AuthenticatedUserResolver interface {
	TwitchProfile(ctx context.Context, obj *gqlmodel.AuthenticatedUser) (*gqlmodel.TwirUserTwitchInfo, error)

	SelectedDashboardTwitchUser(ctx context.Context, obj *gqlmodel.AuthenticatedUser) (*gqlmodel.TwirUserTwitchInfo, error)
	AvailableDashboards(ctx context.Context, obj *gqlmodel.AuthenticatedUser) ([]gqlmodel.Dashboard, error)
}
type CommandResponseResolver interface {
	TwitchCategories(ctx context.Context, obj *gqlmodel.CommandResponse) ([]gqlmodel.TwitchCategory, error)
}
type CommunityUserResolver interface {
	TwitchProfile(ctx context.Context, obj *gqlmodel.CommunityUser) (*gqlmodel.TwirUserTwitchInfo, error)
}
type DashboardResolver interface {
	TwitchProfile(ctx context.Context, obj *gqlmodel.Dashboard) (*gqlmodel.TwirUserTwitchInfo, error)
}
type EmoteStatisticTopUserResolver interface {
	TwitchProfile(ctx context.Context, obj *gqlmodel.EmoteStatisticTopUser) (*gqlmodel.TwirUserTwitchInfo, error)
}
type EmoteStatisticUserUsageResolver interface {
	TwitchProfile(ctx context.Context, obj *gqlmodel.EmoteStatisticUserUsage) (*gqlmodel.TwirUserTwitchInfo, error)
}
type GreetingResolver interface {
	TwitchProfile(ctx context.Context, obj *gqlmodel.Greeting) (*gqlmodel.TwirUserTwitchInfo, error)
}
type MutationResolver interface {
	DropAllAuthSessions(ctx context.Context) (bool, error)
	EventsubSubscribe(ctx context.Context, opts gqlmodel.EventsubSubscribeInput) (bool, error)
	BadgesDelete(ctx context.Context, id string) (bool, error)
	BadgesUpdate(ctx context.Context, id string, opts gqlmodel.TwirBadgeUpdateOpts) (*gqlmodel.Badge, error)
	BadgesCreate(ctx context.Context, opts gqlmodel.TwirBadgeCreateOpts) (*gqlmodel.Badge, error)
	BadgesAddUser(ctx context.Context, id string, userID string) (bool, error)
	BadgesRemoveUser(ctx context.Context, id string, userID string) (bool, error)
	SwitchUserBan(ctx context.Context, userID string) (bool, error)
	SwitchUserAdmin(ctx context.Context, userID string) (bool, error)
	ChannelAlertsCreate(ctx context.Context, input gqlmodel.ChannelAlertCreateInput) (*gqlmodel.ChannelAlert, error)
	ChannelAlertsUpdate(ctx context.Context, id string, input gqlmodel.ChannelAlertUpdateInput) (*gqlmodel.ChannelAlert, error)
	ChannelAlertsDelete(ctx context.Context, id string) (bool, error)
	UpdateChatAlerts(ctx context.Context, input gqlmodel.ChatAlertsInput) (*gqlmodel.ChatAlerts, error)
	CommandsGroupsCreate(ctx context.Context, opts gqlmodel.CommandsGroupsCreateOpts) (bool, error)
	CommandsGroupsUpdate(ctx context.Context, id string, opts gqlmodel.CommandsGroupsUpdateOpts) (bool, error)
	CommandsGroupsRemove(ctx context.Context, id string) (bool, error)
	CommandsCreate(ctx context.Context, opts gqlmodel.CommandsCreateOpts) (*gqlmodel.CommandCreatePayload, error)
	CommandsUpdate(ctx context.Context, id string, opts gqlmodel.CommandsUpdateOpts) (bool, error)
	CommandsRemove(ctx context.Context, id string) (bool, error)
	CommunityResetStats(ctx context.Context, typeArg gqlmodel.CommunityUsersResetType) (bool, error)
	GamesEightBallUpdate(ctx context.Context, opts gqlmodel.EightBallGameOpts) (*gqlmodel.EightBallGame, error)
	GamesDuelUpdate(ctx context.Context, opts gqlmodel.DuelGameOpts) (*gqlmodel.DuelGame, error)
	GamesRussianRouletteUpdate(ctx context.Context, opts gqlmodel.RussianRouletteGameOpts) (*gqlmodel.RussianRouletteGame, error)
	GamesSeppukuUpdate(ctx context.Context, opts gqlmodel.SeppukuGameOpts) (*gqlmodel.SeppukuGame, error)
	GamesVotebanUpdate(ctx context.Context, opts gqlmodel.VotebanGameOpts) (*gqlmodel.VotebanGame, error)
	GreetingsCreate(ctx context.Context, opts gqlmodel.GreetingsCreateInput) (*gqlmodel.Greeting, error)
	GreetingsUpdate(ctx context.Context, id string, opts gqlmodel.GreetingsUpdateInput) (*gqlmodel.Greeting, error)
	GreetingsRemove(ctx context.Context, id string) (bool, error)
	KeywordCreate(ctx context.Context, opts gqlmodel.KeywordCreateInput) (*gqlmodel.Keyword, error)
	KeywordUpdate(ctx context.Context, id string, opts gqlmodel.KeywordUpdateInput) (*gqlmodel.Keyword, error)
	KeywordRemove(ctx context.Context, id string) (bool, error)
	NotificationsCreate(ctx context.Context, text *string, editorJsJSON *string, userID *string) (*gqlmodel.AdminNotification, error)
	NotificationsUpdate(ctx context.Context, id string, opts gqlmodel.NotificationUpdateOpts) (*gqlmodel.AdminNotification, error)
	NotificationsDelete(ctx context.Context, id string) (bool, error)
	ChatOverlayUpdate(ctx context.Context, id string, opts gqlmodel.ChatOverlayMutateOpts) (bool, error)
	ChatOverlayCreate(ctx context.Context, opts gqlmodel.ChatOverlayMutateOpts) (bool, error)
	ChatOverlayDelete(ctx context.Context, id string) (bool, error)
	NowPlayingOverlayUpdate(ctx context.Context, id string, opts gqlmodel.NowPlayingOverlayMutateOpts) (bool, error)
	NowPlayingOverlayCreate(ctx context.Context, opts gqlmodel.NowPlayingOverlayMutateOpts) (bool, error)
	NowPlayingOverlayDelete(ctx context.Context, id string) (bool, error)
	RolesCreate(ctx context.Context, opts gqlmodel.RolesCreateOrUpdateOpts) (bool, error)
	RolesUpdate(ctx context.Context, id string, opts gqlmodel.RolesCreateOrUpdateOpts) (bool, error)
	RolesRemove(ctx context.Context, id string) (bool, error)
	SongRequestsUpdate(ctx context.Context, opts gqlmodel.SongRequestsSettingsOpts) (bool, error)
	TimersCreate(ctx context.Context, opts gqlmodel.TimerCreateInput) (*gqlmodel.Timer, error)
	TimersUpdate(ctx context.Context, id string, opts gqlmodel.TimerUpdateInput) (*gqlmodel.Timer, error)
	TimersRemove(ctx context.Context, id string) (bool, error)
	AuthenticatedUserSelectDashboard(ctx context.Context, dashboardID string) (bool, error)
	AuthenticatedUserUpdateSettings(ctx context.Context, opts gqlmodel.UserUpdateSettingsInput) (bool, error)
	AuthenticatedUserRegenerateAPIKey(ctx context.Context) (string, error)
	AuthenticatedUserUpdatePublicPage(ctx context.Context, opts gqlmodel.UserUpdatePublicSettingsInput) (bool, error)
	Logout(ctx context.Context) (bool, error)
	VariablesCreate(ctx context.Context, opts gqlmodel.VariableCreateInput) (*gqlmodel.Variable, error)
	VariablesUpdate(ctx context.Context, id string, opts gqlmodel.VariableUpdateInput) (*gqlmodel.Variable, error)
	VariablesDelete(ctx context.Context, id string) (bool, error)
	ExecuteScript(ctx context.Context, script string, testAsUserName *string) (string, error)
}
type QueryResolver interface {
	AdminAuditLogs(ctx context.Context, input gqlmodel.AdminAuditLogsInput) (*gqlmodel.AdminAuditLogResponse, error)
	TwirBadges(ctx context.Context) ([]gqlmodel.Badge, error)
	TwirUsers(ctx context.Context, opts gqlmodel.TwirUsersSearchParams) (*gqlmodel.TwirUsersResponse, error)
	ChannelAlerts(ctx context.Context) ([]gqlmodel.ChannelAlert, error)
	ChatAlerts(ctx context.Context) (*gqlmodel.ChatAlerts, error)
	CommandsGroups(ctx context.Context) ([]gqlmodel.CommandGroup, error)
	Commands(ctx context.Context) ([]gqlmodel.Command, error)
	CommandsPublic(ctx context.Context, channelID string) ([]gqlmodel.PublicCommand, error)
	RewardsRedemptionsHistory(ctx context.Context, opts gqlmodel.TwitchRedemptionsOpts) (*gqlmodel.TwitchRedemptionResponse, error)
	CommunityUsers(ctx context.Context, opts gqlmodel.CommunityUsersOpts) (*gqlmodel.CommunityUsersResponse, error)
	EmotesStatistics(ctx context.Context, opts gqlmodel.EmotesStatisticsOpts) (*gqlmodel.EmotesStatisticResponse, error)
	EmotesStatisticEmoteDetailedInformation(ctx context.Context, opts gqlmodel.EmotesStatisticEmoteDetailedOpts) (*gqlmodel.EmotesStatisticEmoteDetailedResponse, error)
	GamesEightBall(ctx context.Context) (*gqlmodel.EightBallGame, error)
	GamesDuel(ctx context.Context) (*gqlmodel.DuelGame, error)
	GamesRussianRoulette(ctx context.Context) (*gqlmodel.RussianRouletteGame, error)
	GamesSeppuku(ctx context.Context) (*gqlmodel.SeppukuGame, error)
	GamesVoteban(ctx context.Context) (*gqlmodel.VotebanGame, error)
	Greetings(ctx context.Context) ([]gqlmodel.Greeting, error)
	Keywords(ctx context.Context) ([]gqlmodel.Keyword, error)
	NotificationsByUser(ctx context.Context) ([]gqlmodel.UserNotification, error)
	NotificationsByAdmin(ctx context.Context, opts gqlmodel.AdminNotificationsParams) (*gqlmodel.AdminNotificationsResponse, error)
	ChatOverlays(ctx context.Context) ([]gqlmodel.ChatOverlay, error)
	ChatOverlaysByID(ctx context.Context, id string) (*gqlmodel.ChatOverlay, error)
	NowPlayingOverlays(ctx context.Context) ([]gqlmodel.NowPlayingOverlay, error)
	NowPlayingOverlaysByID(ctx context.Context, id string) (*gqlmodel.NowPlayingOverlay, error)
	TwitchRewards(ctx context.Context, channelID *string) ([]gqlmodel.TwitchReward, error)
	Roles(ctx context.Context) ([]gqlmodel.Role, error)
	SongRequests(ctx context.Context) (*gqlmodel.SongRequestsSettings, error)
	SongRequestsSearchChannelOrVideo(ctx context.Context, opts gqlmodel.SongRequestsSearchChannelOrVideoOpts) (*gqlmodel.SongRequestsSearchChannelOrVideoResponse, error)
	TwirStats(ctx context.Context) (*gqlmodel.TwirStats, error)
	Timers(ctx context.Context) ([]gqlmodel.Timer, error)
	TwitchGetUserByID(ctx context.Context, id string) (*gqlmodel.TwirUserTwitchInfo, error)
	TwitchGetUserByName(ctx context.Context, name string) (*gqlmodel.TwirUserTwitchInfo, error)
	TwitchGetChannelRewards(ctx context.Context, channelID *string) (*gqlmodel.TwirTwitchChannelRewardResponse, error)
	TwitchGetChannelBadges(ctx context.Context, channelID *string) (*gqlmodel.TwirTwitchChannelBadgeResponse, error)
	TwitchGetGlobalBadges(ctx context.Context) (*gqlmodel.TwirTwitchGlobalBadgeResponse, error)
	AuditLog(ctx context.Context) ([]gqlmodel.AuditLog, error)
	AuthenticatedUser(ctx context.Context) (*gqlmodel.AuthenticatedUser, error)
	UserPublicSettings(ctx context.Context, userID *string) (*gqlmodel.PublicSettings, error)
	AuthLink(ctx context.Context, redirectTo string) (string, error)
	Variables(ctx context.Context) ([]gqlmodel.Variable, error)
	VariablesBuiltIn(ctx context.Context) ([]gqlmodel.BuiltInVariable, error)
}
type RoleResolver interface {
	Users(ctx context.Context, obj *gqlmodel.Role) ([]gqlmodel.TwirUserTwitchInfo, error)
}
type SubscriptionResolver interface {
	DashboardWidgetsEvents(ctx context.Context) (<-chan *gqlmodel.DashboardEventListPayload, error)
	DashboardStats(ctx context.Context) (<-chan *gqlmodel.DashboardStats, error)
	NewNotification(ctx context.Context) (<-chan *gqlmodel.UserNotification, error)
	ChatOverlaySettings(ctx context.Context, id string, apiKey string) (<-chan *gqlmodel.ChatOverlay, error)
	NowPlayingOverlaySettings(ctx context.Context, id string, apiKey string) (<-chan *gqlmodel.NowPlayingOverlay, error)
	NowPlayingCurrentTrack(ctx context.Context, apiKey string) (<-chan *gqlmodel.NowPlayingOverlayTrack, error)
	AuditLog(ctx context.Context) (<-chan *gqlmodel.AuditLog, error)
}
type TwirAdminUserResolver interface {
	TwitchProfile(ctx context.Context, obj *gqlmodel.TwirAdminUser) (*gqlmodel.TwirUserTwitchInfo, error)
}
type TwitchRedemptionResolver interface {
	User(ctx context.Context, obj *gqlmodel.TwitchRedemption) (*gqlmodel.TwirUserTwitchInfo, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AdminAuditLog.channel":
		if e.complexity.AdminAuditLog.Channel == nil {
			break
		}

		return e.complexity.AdminAuditLog.Channel(childComplexity), true

	case "AdminAuditLog.channelId":
		if e.complexity.AdminAuditLog.ChannelID == nil {
			break
		}

		return e.complexity.AdminAuditLog.ChannelID(childComplexity), true

	case "AdminAuditLog.createdAt":
		if e.complexity.AdminAuditLog.CreatedAt == nil {
			break
		}

		return e.complexity.AdminAuditLog.CreatedAt(childComplexity), true

	case "AdminAuditLog.id":
		if e.complexity.AdminAuditLog.ID == nil {
			break
		}

		return e.complexity.AdminAuditLog.ID(childComplexity), true

	case "AdminAuditLog.newValue":
		if e.complexity.AdminAuditLog.NewValue == nil {
			break
		}

		return e.complexity.AdminAuditLog.NewValue(childComplexity), true

	case "AdminAuditLog.objectId":
		if e.complexity.AdminAuditLog.ObjectID == nil {
			break
		}

		return e.complexity.AdminAuditLog.ObjectID(childComplexity), true

	case "AdminAuditLog.oldValue":
		if e.complexity.AdminAuditLog.OldValue == nil {
			break
		}

		return e.complexity.AdminAuditLog.OldValue(childComplexity), true

	case "AdminAuditLog.operationType":
		if e.complexity.AdminAuditLog.OperationType == nil {
			break
		}

		return e.complexity.AdminAuditLog.OperationType(childComplexity), true

	case "AdminAuditLog.system":
		if e.complexity.AdminAuditLog.System == nil {
			break
		}

		return e.complexity.AdminAuditLog.System(childComplexity), true

	case "AdminAuditLog.user":
		if e.complexity.AdminAuditLog.User == nil {
			break
		}

		return e.complexity.AdminAuditLog.User(childComplexity), true

	case "AdminAuditLog.userId":
		if e.complexity.AdminAuditLog.UserID == nil {
			break
		}

		return e.complexity.AdminAuditLog.UserID(childComplexity), true

	case "AdminAuditLogResponse.logs":
		if e.complexity.AdminAuditLogResponse.Logs == nil {
			break
		}

		return e.complexity.AdminAuditLogResponse.Logs(childComplexity), true

	case "AdminAuditLogResponse.total":
		if e.complexity.AdminAuditLogResponse.Total == nil {
			break
		}

		return e.complexity.AdminAuditLogResponse.Total(childComplexity), true

	case "AdminNotification.createdAt":
		if e.complexity.AdminNotification.CreatedAt == nil {
			break
		}

		return e.complexity.AdminNotification.CreatedAt(childComplexity), true

	case "AdminNotification.editorJsJson":
		if e.complexity.AdminNotification.EditorJsJSON == nil {
			break
		}

		return e.complexity.AdminNotification.EditorJsJSON(childComplexity), true

	case "AdminNotification.id":
		if e.complexity.AdminNotification.ID == nil {
			break
		}

		return e.complexity.AdminNotification.ID(childComplexity), true

	case "AdminNotification.text":
		if e.complexity.AdminNotification.Text == nil {
			break
		}

		return e.complexity.AdminNotification.Text(childComplexity), true

	case "AdminNotification.twitchProfile":
		if e.complexity.AdminNotification.TwitchProfile == nil {
			break
		}

		return e.complexity.AdminNotification.TwitchProfile(childComplexity), true

	case "AdminNotification.userId":
		if e.complexity.AdminNotification.UserID == nil {
			break
		}

		return e.complexity.AdminNotification.UserID(childComplexity), true

	case "AdminNotificationsResponse.notifications":
		if e.complexity.AdminNotificationsResponse.Notifications == nil {
			break
		}

		return e.complexity.AdminNotificationsResponse.Notifications(childComplexity), true

	case "AdminNotificationsResponse.total":
		if e.complexity.AdminNotificationsResponse.Total == nil {
			break
		}

		return e.complexity.AdminNotificationsResponse.Total(childComplexity), true

	case "AuditLog.createdAt":
		if e.complexity.AuditLog.CreatedAt == nil {
			break
		}

		return e.complexity.AuditLog.CreatedAt(childComplexity), true

	case "AuditLog.id":
		if e.complexity.AuditLog.ID == nil {
			break
		}

		return e.complexity.AuditLog.ID(childComplexity), true

	case "AuditLog.newValue":
		if e.complexity.AuditLog.NewValue == nil {
			break
		}

		return e.complexity.AuditLog.NewValue(childComplexity), true

	case "AuditLog.objectId":
		if e.complexity.AuditLog.ObjectID == nil {
			break
		}

		return e.complexity.AuditLog.ObjectID(childComplexity), true

	case "AuditLog.oldValue":
		if e.complexity.AuditLog.OldValue == nil {
			break
		}

		return e.complexity.AuditLog.OldValue(childComplexity), true

	case "AuditLog.operationType":
		if e.complexity.AuditLog.OperationType == nil {
			break
		}

		return e.complexity.AuditLog.OperationType(childComplexity), true

	case "AuditLog.system":
		if e.complexity.AuditLog.System == nil {
			break
		}

		return e.complexity.AuditLog.System(childComplexity), true

	case "AuditLog.user":
		if e.complexity.AuditLog.User == nil {
			break
		}

		return e.complexity.AuditLog.User(childComplexity), true

	case "AuditLog.userId":
		if e.complexity.AuditLog.UserID == nil {
			break
		}

		return e.complexity.AuditLog.UserID(childComplexity), true

	case "AuthenticatedUser.apiKey":
		if e.complexity.AuthenticatedUser.APIKey == nil {
			break
		}

		return e.complexity.AuthenticatedUser.APIKey(childComplexity), true

	case "AuthenticatedUser.availableDashboards":
		if e.complexity.AuthenticatedUser.AvailableDashboards == nil {
			break
		}

		return e.complexity.AuthenticatedUser.AvailableDashboards(childComplexity), true

	case "AuthenticatedUser.botId":
		if e.complexity.AuthenticatedUser.BotID == nil {
			break
		}

		return e.complexity.AuthenticatedUser.BotID(childComplexity), true

	case "AuthenticatedUser.hideOnLandingPage":
		if e.complexity.AuthenticatedUser.HideOnLandingPage == nil {
			break
		}

		return e.complexity.AuthenticatedUser.HideOnLandingPage(childComplexity), true

	case "AuthenticatedUser.id":
		if e.complexity.AuthenticatedUser.ID == nil {
			break
		}

		return e.complexity.AuthenticatedUser.ID(childComplexity), true

	case "AuthenticatedUser.isBanned":
		if e.complexity.AuthenticatedUser.IsBanned == nil {
			break
		}

		return e.complexity.AuthenticatedUser.IsBanned(childComplexity), true

	case "AuthenticatedUser.isBotAdmin":
		if e.complexity.AuthenticatedUser.IsBotAdmin == nil {
			break
		}

		return e.complexity.AuthenticatedUser.IsBotAdmin(childComplexity), true

	case "AuthenticatedUser.isBotModerator":
		if e.complexity.AuthenticatedUser.IsBotModerator == nil {
			break
		}

		return e.complexity.AuthenticatedUser.IsBotModerator(childComplexity), true

	case "AuthenticatedUser.isEnabled":
		if e.complexity.AuthenticatedUser.IsEnabled == nil {
			break
		}

		return e.complexity.AuthenticatedUser.IsEnabled(childComplexity), true

	case "AuthenticatedUser.selectedDashboardId":
		if e.complexity.AuthenticatedUser.SelectedDashboardID == nil {
			break
		}

		return e.complexity.AuthenticatedUser.SelectedDashboardID(childComplexity), true

	case "AuthenticatedUser.selectedDashboardTwitchUser":
		if e.complexity.AuthenticatedUser.SelectedDashboardTwitchUser == nil {
			break
		}

		return e.complexity.AuthenticatedUser.SelectedDashboardTwitchUser(childComplexity), true

	case "AuthenticatedUser.twitchProfile":
		if e.complexity.AuthenticatedUser.TwitchProfile == nil {
			break
		}

		return e.complexity.AuthenticatedUser.TwitchProfile(childComplexity), true

	case "Badge.createdAt":
		if e.complexity.Badge.CreatedAt == nil {
			break
		}

		return e.complexity.Badge.CreatedAt(childComplexity), true

	case "Badge.enabled":
		if e.complexity.Badge.Enabled == nil {
			break
		}

		return e.complexity.Badge.Enabled(childComplexity), true

	case "Badge.ffzSlot":
		if e.complexity.Badge.FfzSlot == nil {
			break
		}

		return e.complexity.Badge.FfzSlot(childComplexity), true

	case "Badge.fileUrl":
		if e.complexity.Badge.FileURL == nil {
			break
		}

		return e.complexity.Badge.FileURL(childComplexity), true

	case "Badge.id":
		if e.complexity.Badge.ID == nil {
			break
		}

		return e.complexity.Badge.ID(childComplexity), true

	case "Badge.name":
		if e.complexity.Badge.Name == nil {
			break
		}

		return e.complexity.Badge.Name(childComplexity), true

	case "Badge.users":
		if e.complexity.Badge.Users == nil {
			break
		}

		return e.complexity.Badge.Users(childComplexity), true

	case "BuiltInVariable.canBeUsedInRegistry":
		if e.complexity.BuiltInVariable.CanBeUsedInRegistry == nil {
			break
		}

		return e.complexity.BuiltInVariable.CanBeUsedInRegistry(childComplexity), true

	case "BuiltInVariable.description":
		if e.complexity.BuiltInVariable.Description == nil {
			break
		}

		return e.complexity.BuiltInVariable.Description(childComplexity), true

	case "BuiltInVariable.example":
		if e.complexity.BuiltInVariable.Example == nil {
			break
		}

		return e.complexity.BuiltInVariable.Example(childComplexity), true

	case "BuiltInVariable.name":
		if e.complexity.BuiltInVariable.Name == nil {
			break
		}

		return e.complexity.BuiltInVariable.Name(childComplexity), true

	case "BuiltInVariable.visible":
		if e.complexity.BuiltInVariable.Visible == nil {
			break
		}

		return e.complexity.BuiltInVariable.Visible(childComplexity), true

	case "ChannelAlert.audioId":
		if e.complexity.ChannelAlert.AudioID == nil {
			break
		}

		return e.complexity.ChannelAlert.AudioID(childComplexity), true

	case "ChannelAlert.audioVolume":
		if e.complexity.ChannelAlert.AudioVolume == nil {
			break
		}

		return e.complexity.ChannelAlert.AudioVolume(childComplexity), true

	case "ChannelAlert.commandIds":
		if e.complexity.ChannelAlert.CommandIds == nil {
			break
		}

		return e.complexity.ChannelAlert.CommandIds(childComplexity), true

	case "ChannelAlert.greetingsIds":
		if e.complexity.ChannelAlert.GreetingsIds == nil {
			break
		}

		return e.complexity.ChannelAlert.GreetingsIds(childComplexity), true

	case "ChannelAlert.id":
		if e.complexity.ChannelAlert.ID == nil {
			break
		}

		return e.complexity.ChannelAlert.ID(childComplexity), true

	case "ChannelAlert.keywordsIds":
		if e.complexity.ChannelAlert.KeywordsIds == nil {
			break
		}

		return e.complexity.ChannelAlert.KeywordsIds(childComplexity), true

	case "ChannelAlert.name":
		if e.complexity.ChannelAlert.Name == nil {
			break
		}

		return e.complexity.ChannelAlert.Name(childComplexity), true

	case "ChannelAlert.rewardIds":
		if e.complexity.ChannelAlert.RewardIds == nil {
			break
		}

		return e.complexity.ChannelAlert.RewardIds(childComplexity), true

	case "ChatAlerts.ban":
		if e.complexity.ChatAlerts.Ban == nil {
			break
		}

		return e.complexity.ChatAlerts.Ban(childComplexity), true

	case "ChatAlerts.chatCleared":
		if e.complexity.ChatAlerts.ChatCleared == nil {
			break
		}

		return e.complexity.ChatAlerts.ChatCleared(childComplexity), true

	case "ChatAlerts.cheers":
		if e.complexity.ChatAlerts.Cheers == nil {
			break
		}

		return e.complexity.ChatAlerts.Cheers(childComplexity), true

	case "ChatAlerts.donations":
		if e.complexity.ChatAlerts.Donations == nil {
			break
		}

		return e.complexity.ChatAlerts.Donations(childComplexity), true

	case "ChatAlerts.firstUserMessage":
		if e.complexity.ChatAlerts.FirstUserMessage == nil {
			break
		}

		return e.complexity.ChatAlerts.FirstUserMessage(childComplexity), true

	case "ChatAlerts.followers":
		if e.complexity.ChatAlerts.Followers == nil {
			break
		}

		return e.complexity.ChatAlerts.Followers(childComplexity), true

	case "ChatAlerts.messageDelete":
		if e.complexity.ChatAlerts.MessageDelete == nil {
			break
		}

		return e.complexity.ChatAlerts.MessageDelete(childComplexity), true

	case "ChatAlerts.raids":
		if e.complexity.ChatAlerts.Raids == nil {
			break
		}

		return e.complexity.ChatAlerts.Raids(childComplexity), true

	case "ChatAlerts.redemptions":
		if e.complexity.ChatAlerts.Redemptions == nil {
			break
		}

		return e.complexity.ChatAlerts.Redemptions(childComplexity), true

	case "ChatAlerts.streamOffline":
		if e.complexity.ChatAlerts.StreamOffline == nil {
			break
		}

		return e.complexity.ChatAlerts.StreamOffline(childComplexity), true

	case "ChatAlerts.streamOnline":
		if e.complexity.ChatAlerts.StreamOnline == nil {
			break
		}

		return e.complexity.ChatAlerts.StreamOnline(childComplexity), true

	case "ChatAlerts.subscribers":
		if e.complexity.ChatAlerts.Subscribers == nil {
			break
		}

		return e.complexity.ChatAlerts.Subscribers(childComplexity), true

	case "ChatAlerts.unbanRequestCreate":
		if e.complexity.ChatAlerts.UnbanRequestCreate == nil {
			break
		}

		return e.complexity.ChatAlerts.UnbanRequestCreate(childComplexity), true

	case "ChatAlerts.unbanRequestResolve":
		if e.complexity.ChatAlerts.UnbanRequestResolve == nil {
			break
		}

		return e.complexity.ChatAlerts.UnbanRequestResolve(childComplexity), true

	case "ChatAlertsBan.cooldown":
		if e.complexity.ChatAlertsBan.Cooldown == nil {
			break
		}

		return e.complexity.ChatAlertsBan.Cooldown(childComplexity), true

	case "ChatAlertsBan.enabled":
		if e.complexity.ChatAlertsBan.Enabled == nil {
			break
		}

		return e.complexity.ChatAlertsBan.Enabled(childComplexity), true

	case "ChatAlertsBan.ignoreTimeoutFrom":
		if e.complexity.ChatAlertsBan.IgnoreTimeoutFrom == nil {
			break
		}

		return e.complexity.ChatAlertsBan.IgnoreTimeoutFrom(childComplexity), true

	case "ChatAlertsBan.messages":
		if e.complexity.ChatAlertsBan.Messages == nil {
			break
		}

		return e.complexity.ChatAlertsBan.Messages(childComplexity), true

	case "ChatAlertsChatCleared.cooldown":
		if e.complexity.ChatAlertsChatCleared.Cooldown == nil {
			break
		}

		return e.complexity.ChatAlertsChatCleared.Cooldown(childComplexity), true

	case "ChatAlertsChatCleared.enabled":
		if e.complexity.ChatAlertsChatCleared.Enabled == nil {
			break
		}

		return e.complexity.ChatAlertsChatCleared.Enabled(childComplexity), true

	case "ChatAlertsChatCleared.messages":
		if e.complexity.ChatAlertsChatCleared.Messages == nil {
			break
		}

		return e.complexity.ChatAlertsChatCleared.Messages(childComplexity), true

	case "ChatAlertsCheers.cooldown":
		if e.complexity.ChatAlertsCheers.Cooldown == nil {
			break
		}

		return e.complexity.ChatAlertsCheers.Cooldown(childComplexity), true

	case "ChatAlertsCheers.enabled":
		if e.complexity.ChatAlertsCheers.Enabled == nil {
			break
		}

		return e.complexity.ChatAlertsCheers.Enabled(childComplexity), true

	case "ChatAlertsCheers.messages":
		if e.complexity.ChatAlertsCheers.Messages == nil {
			break
		}

		return e.complexity.ChatAlertsCheers.Messages(childComplexity), true

	case "ChatAlertsCountedMessage.count":
		if e.complexity.ChatAlertsCountedMessage.Count == nil {
			break
		}

		return e.complexity.ChatAlertsCountedMessage.Count(childComplexity), true

	case "ChatAlertsCountedMessage.text":
		if e.complexity.ChatAlertsCountedMessage.Text == nil {
			break
		}

		return e.complexity.ChatAlertsCountedMessage.Text(childComplexity), true

	case "ChatAlertsDonations.cooldown":
		if e.complexity.ChatAlertsDonations.Cooldown == nil {
			break
		}

		return e.complexity.ChatAlertsDonations.Cooldown(childComplexity), true

	case "ChatAlertsDonations.enabled":
		if e.complexity.ChatAlertsDonations.Enabled == nil {
			break
		}

		return e.complexity.ChatAlertsDonations.Enabled(childComplexity), true

	case "ChatAlertsDonations.messages":
		if e.complexity.ChatAlertsDonations.Messages == nil {
			break
		}

		return e.complexity.ChatAlertsDonations.Messages(childComplexity), true

	case "ChatAlertsFirstUserMessage.cooldown":
		if e.complexity.ChatAlertsFirstUserMessage.Cooldown == nil {
			break
		}

		return e.complexity.ChatAlertsFirstUserMessage.Cooldown(childComplexity), true

	case "ChatAlertsFirstUserMessage.enabled":
		if e.complexity.ChatAlertsFirstUserMessage.Enabled == nil {
			break
		}

		return e.complexity.ChatAlertsFirstUserMessage.Enabled(childComplexity), true

	case "ChatAlertsFirstUserMessage.messages":
		if e.complexity.ChatAlertsFirstUserMessage.Messages == nil {
			break
		}

		return e.complexity.ChatAlertsFirstUserMessage.Messages(childComplexity), true

	case "ChatAlertsFollowersSettings.cooldown":
		if e.complexity.ChatAlertsFollowersSettings.Cooldown == nil {
			break
		}

		return e.complexity.ChatAlertsFollowersSettings.Cooldown(childComplexity), true

	case "ChatAlertsFollowersSettings.enabled":
		if e.complexity.ChatAlertsFollowersSettings.Enabled == nil {
			break
		}

		return e.complexity.ChatAlertsFollowersSettings.Enabled(childComplexity), true

	case "ChatAlertsFollowersSettings.messages":
		if e.complexity.ChatAlertsFollowersSettings.Messages == nil {
			break
		}

		return e.complexity.ChatAlertsFollowersSettings.Messages(childComplexity), true

	case "ChatAlertsMessage.text":
		if e.complexity.ChatAlertsMessage.Text == nil {
			break
		}

		return e.complexity.ChatAlertsMessage.Text(childComplexity), true

	case "ChatAlertsMessageDelete.cooldown":
		if e.complexity.ChatAlertsMessageDelete.Cooldown == nil {
			break
		}

		return e.complexity.ChatAlertsMessageDelete.Cooldown(childComplexity), true

	case "ChatAlertsMessageDelete.enabled":
		if e.complexity.ChatAlertsMessageDelete.Enabled == nil {
			break
		}

		return e.complexity.ChatAlertsMessageDelete.Enabled(childComplexity), true

	case "ChatAlertsMessageDelete.messages":
		if e.complexity.ChatAlertsMessageDelete.Messages == nil {
			break
		}

		return e.complexity.ChatAlertsMessageDelete.Messages(childComplexity), true

	case "ChatAlertsRaids.cooldown":
		if e.complexity.ChatAlertsRaids.Cooldown == nil {
			break
		}

		return e.complexity.ChatAlertsRaids.Cooldown(childComplexity), true

	case "ChatAlertsRaids.enabled":
		if e.complexity.ChatAlertsRaids.Enabled == nil {
			break
		}

		return e.complexity.ChatAlertsRaids.Enabled(childComplexity), true

	case "ChatAlertsRaids.messages":
		if e.complexity.ChatAlertsRaids.Messages == nil {
			break
		}

		return e.complexity.ChatAlertsRaids.Messages(childComplexity), true

	case "ChatAlertsRedemptions.cooldown":
		if e.complexity.ChatAlertsRedemptions.Cooldown == nil {
			break
		}

		return e.complexity.ChatAlertsRedemptions.Cooldown(childComplexity), true

	case "ChatAlertsRedemptions.enabled":
		if e.complexity.ChatAlertsRedemptions.Enabled == nil {
			break
		}

		return e.complexity.ChatAlertsRedemptions.Enabled(childComplexity), true

	case "ChatAlertsRedemptions.ignoredRewardsIds":
		if e.complexity.ChatAlertsRedemptions.IgnoredRewardsIds == nil {
			break
		}

		return e.complexity.ChatAlertsRedemptions.IgnoredRewardsIds(childComplexity), true

	case "ChatAlertsRedemptions.messages":
		if e.complexity.ChatAlertsRedemptions.Messages == nil {
			break
		}

		return e.complexity.ChatAlertsRedemptions.Messages(childComplexity), true

	case "ChatAlertsStreamOffline.cooldown":
		if e.complexity.ChatAlertsStreamOffline.Cooldown == nil {
			break
		}

		return e.complexity.ChatAlertsStreamOffline.Cooldown(childComplexity), true

	case "ChatAlertsStreamOffline.enabled":
		if e.complexity.ChatAlertsStreamOffline.Enabled == nil {
			break
		}

		return e.complexity.ChatAlertsStreamOffline.Enabled(childComplexity), true

	case "ChatAlertsStreamOffline.messages":
		if e.complexity.ChatAlertsStreamOffline.Messages == nil {
			break
		}

		return e.complexity.ChatAlertsStreamOffline.Messages(childComplexity), true

	case "ChatAlertsStreamOnline.cooldown":
		if e.complexity.ChatAlertsStreamOnline.Cooldown == nil {
			break
		}

		return e.complexity.ChatAlertsStreamOnline.Cooldown(childComplexity), true

	case "ChatAlertsStreamOnline.enabled":
		if e.complexity.ChatAlertsStreamOnline.Enabled == nil {
			break
		}

		return e.complexity.ChatAlertsStreamOnline.Enabled(childComplexity), true

	case "ChatAlertsStreamOnline.messages":
		if e.complexity.ChatAlertsStreamOnline.Messages == nil {
			break
		}

		return e.complexity.ChatAlertsStreamOnline.Messages(childComplexity), true

	case "ChatAlertsSubscribers.cooldown":
		if e.complexity.ChatAlertsSubscribers.Cooldown == nil {
			break
		}

		return e.complexity.ChatAlertsSubscribers.Cooldown(childComplexity), true

	case "ChatAlertsSubscribers.enabled":
		if e.complexity.ChatAlertsSubscribers.Enabled == nil {
			break
		}

		return e.complexity.ChatAlertsSubscribers.Enabled(childComplexity), true

	case "ChatAlertsSubscribers.messages":
		if e.complexity.ChatAlertsSubscribers.Messages == nil {
			break
		}

		return e.complexity.ChatAlertsSubscribers.Messages(childComplexity), true

	case "ChatAlertsUnbanRequestCreate.cooldown":
		if e.complexity.ChatAlertsUnbanRequestCreate.Cooldown == nil {
			break
		}

		return e.complexity.ChatAlertsUnbanRequestCreate.Cooldown(childComplexity), true

	case "ChatAlertsUnbanRequestCreate.enabled":
		if e.complexity.ChatAlertsUnbanRequestCreate.Enabled == nil {
			break
		}

		return e.complexity.ChatAlertsUnbanRequestCreate.Enabled(childComplexity), true

	case "ChatAlertsUnbanRequestCreate.messages":
		if e.complexity.ChatAlertsUnbanRequestCreate.Messages == nil {
			break
		}

		return e.complexity.ChatAlertsUnbanRequestCreate.Messages(childComplexity), true

	case "ChatAlertsUnbanRequestResolve.cooldown":
		if e.complexity.ChatAlertsUnbanRequestResolve.Cooldown == nil {
			break
		}

		return e.complexity.ChatAlertsUnbanRequestResolve.Cooldown(childComplexity), true

	case "ChatAlertsUnbanRequestResolve.enabled":
		if e.complexity.ChatAlertsUnbanRequestResolve.Enabled == nil {
			break
		}

		return e.complexity.ChatAlertsUnbanRequestResolve.Enabled(childComplexity), true

	case "ChatAlertsUnbanRequestResolve.messages":
		if e.complexity.ChatAlertsUnbanRequestResolve.Messages == nil {
			break
		}

		return e.complexity.ChatAlertsUnbanRequestResolve.Messages(childComplexity), true

	case "ChatOverlay.animation":
		if e.complexity.ChatOverlay.Animation == nil {
			break
		}

		return e.complexity.ChatOverlay.Animation(childComplexity), true

	case "ChatOverlay.chatBackgroundColor":
		if e.complexity.ChatOverlay.ChatBackgroundColor == nil {
			break
		}

		return e.complexity.ChatOverlay.ChatBackgroundColor(childComplexity), true

	case "ChatOverlay.direction":
		if e.complexity.ChatOverlay.Direction == nil {
			break
		}

		return e.complexity.ChatOverlay.Direction(childComplexity), true

	case "ChatOverlay.fontFamily":
		if e.complexity.ChatOverlay.FontFamily == nil {
			break
		}

		return e.complexity.ChatOverlay.FontFamily(childComplexity), true

	case "ChatOverlay.fontSize":
		if e.complexity.ChatOverlay.FontSize == nil {
			break
		}

		return e.complexity.ChatOverlay.FontSize(childComplexity), true

	case "ChatOverlay.fontStyle":
		if e.complexity.ChatOverlay.FontStyle == nil {
			break
		}

		return e.complexity.ChatOverlay.FontStyle(childComplexity), true

	case "ChatOverlay.fontWeight":
		if e.complexity.ChatOverlay.FontWeight == nil {
			break
		}

		return e.complexity.ChatOverlay.FontWeight(childComplexity), true

	case "ChatOverlay.hideBots":
		if e.complexity.ChatOverlay.HideBots == nil {
			break
		}

		return e.complexity.ChatOverlay.HideBots(childComplexity), true

	case "ChatOverlay.hideCommands":
		if e.complexity.ChatOverlay.HideCommands == nil {
			break
		}

		return e.complexity.ChatOverlay.HideCommands(childComplexity), true

	case "ChatOverlay.id":
		if e.complexity.ChatOverlay.ID == nil {
			break
		}

		return e.complexity.ChatOverlay.ID(childComplexity), true

	case "ChatOverlay.messageHideTimeout":
		if e.complexity.ChatOverlay.MessageHideTimeout == nil {
			break
		}

		return e.complexity.ChatOverlay.MessageHideTimeout(childComplexity), true

	case "ChatOverlay.messageShowDelay":
		if e.complexity.ChatOverlay.MessageShowDelay == nil {
			break
		}

		return e.complexity.ChatOverlay.MessageShowDelay(childComplexity), true

	case "ChatOverlay.paddingContainer":
		if e.complexity.ChatOverlay.PaddingContainer == nil {
			break
		}

		return e.complexity.ChatOverlay.PaddingContainer(childComplexity), true

	case "ChatOverlay.preset":
		if e.complexity.ChatOverlay.Preset == nil {
			break
		}

		return e.complexity.ChatOverlay.Preset(childComplexity), true

	case "ChatOverlay.showAnnounceBadge":
		if e.complexity.ChatOverlay.ShowAnnounceBadge == nil {
			break
		}

		return e.complexity.ChatOverlay.ShowAnnounceBadge(childComplexity), true

	case "ChatOverlay.showBadges":
		if e.complexity.ChatOverlay.ShowBadges == nil {
			break
		}

		return e.complexity.ChatOverlay.ShowBadges(childComplexity), true

	case "ChatOverlay.textShadowColor":
		if e.complexity.ChatOverlay.TextShadowColor == nil {
			break
		}

		return e.complexity.ChatOverlay.TextShadowColor(childComplexity), true

	case "ChatOverlay.textShadowSize":
		if e.complexity.ChatOverlay.TextShadowSize == nil {
			break
		}

		return e.complexity.ChatOverlay.TextShadowSize(childComplexity), true

	case "Command.aliases":
		if e.complexity.Command.Aliases == nil {
			break
		}

		return e.complexity.Command.Aliases(childComplexity), true

	case "Command.allowedUsersIds":
		if e.complexity.Command.AllowedUsersIds == nil {
			break
		}

		return e.complexity.Command.AllowedUsersIds(childComplexity), true

	case "Command.cooldown":
		if e.complexity.Command.Cooldown == nil {
			break
		}

		return e.complexity.Command.Cooldown(childComplexity), true

	case "Command.cooldownRolesIds":
		if e.complexity.Command.CooldownRolesIds == nil {
			break
		}

		return e.complexity.Command.CooldownRolesIds(childComplexity), true

	case "Command.cooldownType":
		if e.complexity.Command.CooldownType == nil {
			break
		}

		return e.complexity.Command.CooldownType(childComplexity), true

	case "Command.default":
		if e.complexity.Command.Default == nil {
			break
		}

		return e.complexity.Command.Default(childComplexity), true

	case "Command.defaultName":
		if e.complexity.Command.DefaultName == nil {
			break
		}

		return e.complexity.Command.DefaultName(childComplexity), true

	case "Command.deniedUsersIds":
		if e.complexity.Command.DeniedUsersIds == nil {
			break
		}

		return e.complexity.Command.DeniedUsersIds(childComplexity), true

	case "Command.description":
		if e.complexity.Command.Description == nil {
			break
		}

		return e.complexity.Command.Description(childComplexity), true

	case "Command.enabled":
		if e.complexity.Command.Enabled == nil {
			break
		}

		return e.complexity.Command.Enabled(childComplexity), true

	case "Command.enabledCategories":
		if e.complexity.Command.EnabledCategories == nil {
			break
		}

		return e.complexity.Command.EnabledCategories(childComplexity), true

	case "Command.expiresAt":
		if e.complexity.Command.ExpiresAt == nil {
			break
		}

		return e.complexity.Command.ExpiresAt(childComplexity), true

	case "Command.expiresType":
		if e.complexity.Command.ExpiresType == nil {
			break
		}

		return e.complexity.Command.ExpiresType(childComplexity), true

	case "Command.group":
		if e.complexity.Command.Group == nil {
			break
		}

		return e.complexity.Command.Group(childComplexity), true

	case "Command.groupId":
		if e.complexity.Command.GroupID == nil {
			break
		}

		return e.complexity.Command.GroupID(childComplexity), true

	case "Command.id":
		if e.complexity.Command.ID == nil {
			break
		}

		return e.complexity.Command.ID(childComplexity), true

	case "Command.isReply":
		if e.complexity.Command.IsReply == nil {
			break
		}

		return e.complexity.Command.IsReply(childComplexity), true

	case "Command.keepResponsesOrder":
		if e.complexity.Command.KeepResponsesOrder == nil {
			break
		}

		return e.complexity.Command.KeepResponsesOrder(childComplexity), true

	case "Command.module":
		if e.complexity.Command.Module == nil {
			break
		}

		return e.complexity.Command.Module(childComplexity), true

	case "Command.name":
		if e.complexity.Command.Name == nil {
			break
		}

		return e.complexity.Command.Name(childComplexity), true

	case "Command.onlineOnly":
		if e.complexity.Command.OnlineOnly == nil {
			break
		}

		return e.complexity.Command.OnlineOnly(childComplexity), true

	case "Command.requiredMessages":
		if e.complexity.Command.RequiredMessages == nil {
			break
		}

		return e.complexity.Command.RequiredMessages(childComplexity), true

	case "Command.requiredUsedChannelPoints":
		if e.complexity.Command.RequiredUsedChannelPoints == nil {
			break
		}

		return e.complexity.Command.RequiredUsedChannelPoints(childComplexity), true

	case "Command.requiredWatchTime":
		if e.complexity.Command.RequiredWatchTime == nil {
			break
		}

		return e.complexity.Command.RequiredWatchTime(childComplexity), true

	case "Command.responses":
		if e.complexity.Command.Responses == nil {
			break
		}

		return e.complexity.Command.Responses(childComplexity), true

	case "Command.rolesIds":
		if e.complexity.Command.RolesIds == nil {
			break
		}

		return e.complexity.Command.RolesIds(childComplexity), true

	case "Command.visible":
		if e.complexity.Command.Visible == nil {
			break
		}

		return e.complexity.Command.Visible(childComplexity), true

	case "CommandCreatePayload.id":
		if e.complexity.CommandCreatePayload.ID == nil {
			break
		}

		return e.complexity.CommandCreatePayload.ID(childComplexity), true

	case "CommandGroup.color":
		if e.complexity.CommandGroup.Color == nil {
			break
		}

		return e.complexity.CommandGroup.Color(childComplexity), true

	case "CommandGroup.id":
		if e.complexity.CommandGroup.ID == nil {
			break
		}

		return e.complexity.CommandGroup.ID(childComplexity), true

	case "CommandGroup.name":
		if e.complexity.CommandGroup.Name == nil {
			break
		}

		return e.complexity.CommandGroup.Name(childComplexity), true

	case "CommandResponse.commandId":
		if e.complexity.CommandResponse.CommandID == nil {
			break
		}

		return e.complexity.CommandResponse.CommandID(childComplexity), true

	case "CommandResponse.id":
		if e.complexity.CommandResponse.ID == nil {
			break
		}

		return e.complexity.CommandResponse.ID(childComplexity), true

	case "CommandResponse.text":
		if e.complexity.CommandResponse.Text == nil {
			break
		}

		return e.complexity.CommandResponse.Text(childComplexity), true

	case "CommandResponse.twitchCategories":
		if e.complexity.CommandResponse.TwitchCategories == nil {
			break
		}

		return e.complexity.CommandResponse.TwitchCategories(childComplexity), true

	case "CommandResponse.twitchCategoriesIds":
		if e.complexity.CommandResponse.TwitchCategoriesIds == nil {
			break
		}

		return e.complexity.CommandResponse.TwitchCategoriesIds(childComplexity), true

	case "CommunityUser.id":
		if e.complexity.CommunityUser.ID == nil {
			break
		}

		return e.complexity.CommunityUser.ID(childComplexity), true

	case "CommunityUser.messages":
		if e.complexity.CommunityUser.Messages == nil {
			break
		}

		return e.complexity.CommunityUser.Messages(childComplexity), true

	case "CommunityUser.twitchProfile":
		if e.complexity.CommunityUser.TwitchProfile == nil {
			break
		}

		return e.complexity.CommunityUser.TwitchProfile(childComplexity), true

	case "CommunityUser.usedChannelPoints":
		if e.complexity.CommunityUser.UsedChannelPoints == nil {
			break
		}

		return e.complexity.CommunityUser.UsedChannelPoints(childComplexity), true

	case "CommunityUser.usedEmotes":
		if e.complexity.CommunityUser.UsedEmotes == nil {
			break
		}

		return e.complexity.CommunityUser.UsedEmotes(childComplexity), true

	case "CommunityUser.watchedMs":
		if e.complexity.CommunityUser.WatchedMs == nil {
			break
		}

		return e.complexity.CommunityUser.WatchedMs(childComplexity), true

	case "CommunityUsersResponse.total":
		if e.complexity.CommunityUsersResponse.Total == nil {
			break
		}

		return e.complexity.CommunityUsersResponse.Total(childComplexity), true

	case "CommunityUsersResponse.users":
		if e.complexity.CommunityUsersResponse.Users == nil {
			break
		}

		return e.complexity.CommunityUsersResponse.Users(childComplexity), true

	case "Dashboard.flags":
		if e.complexity.Dashboard.Flags == nil {
			break
		}

		return e.complexity.Dashboard.Flags(childComplexity), true

	case "Dashboard.id":
		if e.complexity.Dashboard.ID == nil {
			break
		}

		return e.complexity.Dashboard.ID(childComplexity), true

	case "Dashboard.twitchProfile":
		if e.complexity.Dashboard.TwitchProfile == nil {
			break
		}

		return e.complexity.Dashboard.TwitchProfile(childComplexity), true

	case "DashboardEventData.banEndsInMinutes":
		if e.complexity.DashboardEventData.BanEndsInMinutes == nil {
			break
		}

		return e.complexity.DashboardEventData.BanEndsInMinutes(childComplexity), true

	case "DashboardEventData.banReason":
		if e.complexity.DashboardEventData.BanReason == nil {
			break
		}

		return e.complexity.DashboardEventData.BanReason(childComplexity), true

	case "DashboardEventData.bannedUserLogin":
		if e.complexity.DashboardEventData.BannedUserLogin == nil {
			break
		}

		return e.complexity.DashboardEventData.BannedUserLogin(childComplexity), true

	case "DashboardEventData.bannedUserName":
		if e.complexity.DashboardEventData.BannedUserName == nil {
			break
		}

		return e.complexity.DashboardEventData.BannedUserName(childComplexity), true

	case "DashboardEventData.donationAmount":
		if e.complexity.DashboardEventData.DonationAmount == nil {
			break
		}

		return e.complexity.DashboardEventData.DonationAmount(childComplexity), true

	case "DashboardEventData.donationCurrency":
		if e.complexity.DashboardEventData.DonationCurrency == nil {
			break
		}

		return e.complexity.DashboardEventData.DonationCurrency(childComplexity), true

	case "DashboardEventData.donationMessage":
		if e.complexity.DashboardEventData.DonationMessage == nil {
			break
		}

		return e.complexity.DashboardEventData.DonationMessage(childComplexity), true

	case "DashboardEventData.donationUserName":
		if e.complexity.DashboardEventData.DonationUserName == nil {
			break
		}

		return e.complexity.DashboardEventData.DonationUserName(childComplexity), true

	case "DashboardEventData.firstUserMessageMessage":
		if e.complexity.DashboardEventData.FirstUserMessageMessage == nil {
			break
		}

		return e.complexity.DashboardEventData.FirstUserMessageMessage(childComplexity), true

	case "DashboardEventData.firstUserMessageUserDisplayName":
		if e.complexity.DashboardEventData.FirstUserMessageUserDisplayName == nil {
			break
		}

		return e.complexity.DashboardEventData.FirstUserMessageUserDisplayName(childComplexity), true

	case "DashboardEventData.firstUserMessageUserName":
		if e.complexity.DashboardEventData.FirstUserMessageUserName == nil {
			break
		}

		return e.complexity.DashboardEventData.FirstUserMessageUserName(childComplexity), true

	case "DashboardEventData.followUserDisplayName":
		if e.complexity.DashboardEventData.FollowUserDisplayName == nil {
			break
		}

		return e.complexity.DashboardEventData.FollowUserDisplayName(childComplexity), true

	case "DashboardEventData.followUserName":
		if e.complexity.DashboardEventData.FollowUserName == nil {
			break
		}

		return e.complexity.DashboardEventData.FollowUserName(childComplexity), true

	case "DashboardEventData.message":
		if e.complexity.DashboardEventData.Message == nil {
			break
		}

		return e.complexity.DashboardEventData.Message(childComplexity), true

	case "DashboardEventData.moderatorDisplayName":
		if e.complexity.DashboardEventData.ModeratorDisplayName == nil {
			break
		}

		return e.complexity.DashboardEventData.ModeratorDisplayName(childComplexity), true

	case "DashboardEventData.moderatorName":
		if e.complexity.DashboardEventData.ModeratorName == nil {
			break
		}

		return e.complexity.DashboardEventData.ModeratorName(childComplexity), true

	case "DashboardEventData.raidedFromDisplayName":
		if e.complexity.DashboardEventData.RaidedFromDisplayName == nil {
			break
		}

		return e.complexity.DashboardEventData.RaidedFromDisplayName(childComplexity), true

	case "DashboardEventData.raidedFromUserName":
		if e.complexity.DashboardEventData.RaidedFromUserName == nil {
			break
		}

		return e.complexity.DashboardEventData.RaidedFromUserName(childComplexity), true

	case "DashboardEventData.raidedViewersCount":
		if e.complexity.DashboardEventData.RaidedViewersCount == nil {
			break
		}

		return e.complexity.DashboardEventData.RaidedViewersCount(childComplexity), true

	case "DashboardEventData.reSubLevel":
		if e.complexity.DashboardEventData.ReSubLevel == nil {
			break
		}

		return e.complexity.DashboardEventData.ReSubLevel(childComplexity), true

	case "DashboardEventData.reSubMonths":
		if e.complexity.DashboardEventData.ReSubMonths == nil {
			break
		}

		return e.complexity.DashboardEventData.ReSubMonths(childComplexity), true

	case "DashboardEventData.reSubStreak":
		if e.complexity.DashboardEventData.ReSubStreak == nil {
			break
		}

		return e.complexity.DashboardEventData.ReSubStreak(childComplexity), true

	case "DashboardEventData.reSubUserDisplayName":
		if e.complexity.DashboardEventData.ReSubUserDisplayName == nil {
			break
		}

		return e.complexity.DashboardEventData.ReSubUserDisplayName(childComplexity), true

	case "DashboardEventData.reSubUserName":
		if e.complexity.DashboardEventData.ReSubUserName == nil {
			break
		}

		return e.complexity.DashboardEventData.ReSubUserName(childComplexity), true

	case "DashboardEventData.redemptionCost":
		if e.complexity.DashboardEventData.RedemptionCost == nil {
			break
		}

		return e.complexity.DashboardEventData.RedemptionCost(childComplexity), true

	case "DashboardEventData.redemptionInput":
		if e.complexity.DashboardEventData.RedemptionInput == nil {
			break
		}

		return e.complexity.DashboardEventData.RedemptionInput(childComplexity), true

	case "DashboardEventData.redemptionTitle":
		if e.complexity.DashboardEventData.RedemptionTitle == nil {
			break
		}

		return e.complexity.DashboardEventData.RedemptionTitle(childComplexity), true

	case "DashboardEventData.redemptionUserDisplayName":
		if e.complexity.DashboardEventData.RedemptionUserDisplayName == nil {
			break
		}

		return e.complexity.DashboardEventData.RedemptionUserDisplayName(childComplexity), true

	case "DashboardEventData.redemptionUserName":
		if e.complexity.DashboardEventData.RedemptionUserName == nil {
			break
		}

		return e.complexity.DashboardEventData.RedemptionUserName(childComplexity), true

	case "DashboardEventData.subGiftLevel":
		if e.complexity.DashboardEventData.SubGiftLevel == nil {
			break
		}

		return e.complexity.DashboardEventData.SubGiftLevel(childComplexity), true

	case "DashboardEventData.subGiftTargetUserDisplayName":
		if e.complexity.DashboardEventData.SubGiftTargetUserDisplayName == nil {
			break
		}

		return e.complexity.DashboardEventData.SubGiftTargetUserDisplayName(childComplexity), true

	case "DashboardEventData.subGiftTargetUserName":
		if e.complexity.DashboardEventData.SubGiftTargetUserName == nil {
			break
		}

		return e.complexity.DashboardEventData.SubGiftTargetUserName(childComplexity), true

	case "DashboardEventData.subGiftUserDisplayName":
		if e.complexity.DashboardEventData.SubGiftUserDisplayName == nil {
			break
		}

		return e.complexity.DashboardEventData.SubGiftUserDisplayName(childComplexity), true

	case "DashboardEventData.subGiftUserName":
		if e.complexity.DashboardEventData.SubGiftUserName == nil {
			break
		}

		return e.complexity.DashboardEventData.SubGiftUserName(childComplexity), true

	case "DashboardEventData.subLevel":
		if e.complexity.DashboardEventData.SubLevel == nil {
			break
		}

		return e.complexity.DashboardEventData.SubLevel(childComplexity), true

	case "DashboardEventData.subUserDisplayName":
		if e.complexity.DashboardEventData.SubUserDisplayName == nil {
			break
		}

		return e.complexity.DashboardEventData.SubUserDisplayName(childComplexity), true

	case "DashboardEventData.subUserName":
		if e.complexity.DashboardEventData.SubUserName == nil {
			break
		}

		return e.complexity.DashboardEventData.SubUserName(childComplexity), true

	case "DashboardEventData.userLogin":
		if e.complexity.DashboardEventData.UserLogin == nil {
			break
		}

		return e.complexity.DashboardEventData.UserLogin(childComplexity), true

	case "DashboardEventData.userName":
		if e.complexity.DashboardEventData.UserName == nil {
			break
		}

		return e.complexity.DashboardEventData.UserName(childComplexity), true

	case "DashboardEventListPayload.events":
		if e.complexity.DashboardEventListPayload.Events == nil {
			break
		}

		return e.complexity.DashboardEventListPayload.Events(childComplexity), true

	case "DashboardEventPayload.createdAt":
		if e.complexity.DashboardEventPayload.CreatedAt == nil {
			break
		}

		return e.complexity.DashboardEventPayload.CreatedAt(childComplexity), true

	case "DashboardEventPayload.data":
		if e.complexity.DashboardEventPayload.Data == nil {
			break
		}

		return e.complexity.DashboardEventPayload.Data(childComplexity), true

	case "DashboardEventPayload.type":
		if e.complexity.DashboardEventPayload.Type == nil {
			break
		}

		return e.complexity.DashboardEventPayload.Type(childComplexity), true

	case "DashboardEventPayload.userId":
		if e.complexity.DashboardEventPayload.UserID == nil {
			break
		}

		return e.complexity.DashboardEventPayload.UserID(childComplexity), true

	case "DashboardStats.categoryId":
		if e.complexity.DashboardStats.CategoryID == nil {
			break
		}

		return e.complexity.DashboardStats.CategoryID(childComplexity), true

	case "DashboardStats.categoryName":
		if e.complexity.DashboardStats.CategoryName == nil {
			break
		}

		return e.complexity.DashboardStats.CategoryName(childComplexity), true

	case "DashboardStats.chatMessages":
		if e.complexity.DashboardStats.ChatMessages == nil {
			break
		}

		return e.complexity.DashboardStats.ChatMessages(childComplexity), true

	case "DashboardStats.followers":
		if e.complexity.DashboardStats.Followers == nil {
			break
		}

		return e.complexity.DashboardStats.Followers(childComplexity), true

	case "DashboardStats.requestedSongs":
		if e.complexity.DashboardStats.RequestedSongs == nil {
			break
		}

		return e.complexity.DashboardStats.RequestedSongs(childComplexity), true

	case "DashboardStats.startedAt":
		if e.complexity.DashboardStats.StartedAt == nil {
			break
		}

		return e.complexity.DashboardStats.StartedAt(childComplexity), true

	case "DashboardStats.subs":
		if e.complexity.DashboardStats.Subs == nil {
			break
		}

		return e.complexity.DashboardStats.Subs(childComplexity), true

	case "DashboardStats.title":
		if e.complexity.DashboardStats.Title == nil {
			break
		}

		return e.complexity.DashboardStats.Title(childComplexity), true

	case "DashboardStats.usedEmotes":
		if e.complexity.DashboardStats.UsedEmotes == nil {
			break
		}

		return e.complexity.DashboardStats.UsedEmotes(childComplexity), true

	case "DashboardStats.viewers":
		if e.complexity.DashboardStats.Viewers == nil {
			break
		}

		return e.complexity.DashboardStats.Viewers(childComplexity), true

	case "DuelGame.bothDieMessage":
		if e.complexity.DuelGame.BothDieMessage == nil {
			break
		}

		return e.complexity.DuelGame.BothDieMessage(childComplexity), true

	case "DuelGame.bothDiePercent":
		if e.complexity.DuelGame.BothDiePercent == nil {
			break
		}

		return e.complexity.DuelGame.BothDiePercent(childComplexity), true

	case "DuelGame.enabled":
		if e.complexity.DuelGame.Enabled == nil {
			break
		}

		return e.complexity.DuelGame.Enabled(childComplexity), true

	case "DuelGame.globalCooldown":
		if e.complexity.DuelGame.GlobalCooldown == nil {
			break
		}

		return e.complexity.DuelGame.GlobalCooldown(childComplexity), true

	case "DuelGame.pointsPerLose":
		if e.complexity.DuelGame.PointsPerLose == nil {
			break
		}

		return e.complexity.DuelGame.PointsPerLose(childComplexity), true

	case "DuelGame.pointsPerWin":
		if e.complexity.DuelGame.PointsPerWin == nil {
			break
		}

		return e.complexity.DuelGame.PointsPerWin(childComplexity), true

	case "DuelGame.resultMessage":
		if e.complexity.DuelGame.ResultMessage == nil {
			break
		}

		return e.complexity.DuelGame.ResultMessage(childComplexity), true

	case "DuelGame.secondsToAccept":
		if e.complexity.DuelGame.SecondsToAccept == nil {
			break
		}

		return e.complexity.DuelGame.SecondsToAccept(childComplexity), true

	case "DuelGame.startMessage":
		if e.complexity.DuelGame.StartMessage == nil {
			break
		}

		return e.complexity.DuelGame.StartMessage(childComplexity), true

	case "DuelGame.timeoutSeconds":
		if e.complexity.DuelGame.TimeoutSeconds == nil {
			break
		}

		return e.complexity.DuelGame.TimeoutSeconds(childComplexity), true

	case "DuelGame.userCooldown":
		if e.complexity.DuelGame.UserCooldown == nil {
			break
		}

		return e.complexity.DuelGame.UserCooldown(childComplexity), true

	case "EightBallGame.answers":
		if e.complexity.EightBallGame.Answers == nil {
			break
		}

		return e.complexity.EightBallGame.Answers(childComplexity), true

	case "EightBallGame.enabled":
		if e.complexity.EightBallGame.Enabled == nil {
			break
		}

		return e.complexity.EightBallGame.Enabled(childComplexity), true

	case "EmoteStatisticTopUser.count":
		if e.complexity.EmoteStatisticTopUser.Count == nil {
			break
		}

		return e.complexity.EmoteStatisticTopUser.Count(childComplexity), true

	case "EmoteStatisticTopUser.twitchProfile":
		if e.complexity.EmoteStatisticTopUser.TwitchProfile == nil {
			break
		}

		return e.complexity.EmoteStatisticTopUser.TwitchProfile(childComplexity), true

	case "EmoteStatisticTopUser.userId":
		if e.complexity.EmoteStatisticTopUser.UserID == nil {
			break
		}

		return e.complexity.EmoteStatisticTopUser.UserID(childComplexity), true

	case "EmoteStatisticUsage.count":
		if e.complexity.EmoteStatisticUsage.Count == nil {
			break
		}

		return e.complexity.EmoteStatisticUsage.Count(childComplexity), true

	case "EmoteStatisticUsage.timestamp":
		if e.complexity.EmoteStatisticUsage.Timestamp == nil {
			break
		}

		return e.complexity.EmoteStatisticUsage.Timestamp(childComplexity), true

	case "EmoteStatisticUserUsage.date":
		if e.complexity.EmoteStatisticUserUsage.Date == nil {
			break
		}

		return e.complexity.EmoteStatisticUserUsage.Date(childComplexity), true

	case "EmoteStatisticUserUsage.twitchProfile":
		if e.complexity.EmoteStatisticUserUsage.TwitchProfile == nil {
			break
		}

		return e.complexity.EmoteStatisticUserUsage.TwitchProfile(childComplexity), true

	case "EmoteStatisticUserUsage.userId":
		if e.complexity.EmoteStatisticUserUsage.UserID == nil {
			break
		}

		return e.complexity.EmoteStatisticUserUsage.UserID(childComplexity), true

	case "EmotesStatistic.emoteName":
		if e.complexity.EmotesStatistic.EmoteName == nil {
			break
		}

		return e.complexity.EmotesStatistic.EmoteName(childComplexity), true

	case "EmotesStatistic.graphicUsages":
		if e.complexity.EmotesStatistic.GraphicUsages == nil {
			break
		}

		return e.complexity.EmotesStatistic.GraphicUsages(childComplexity), true

	case "EmotesStatistic.lastUsedTimestamp":
		if e.complexity.EmotesStatistic.LastUsedTimestamp == nil {
			break
		}

		return e.complexity.EmotesStatistic.LastUsedTimestamp(childComplexity), true

	case "EmotesStatistic.totalUsages":
		if e.complexity.EmotesStatistic.TotalUsages == nil {
			break
		}

		return e.complexity.EmotesStatistic.TotalUsages(childComplexity), true

	case "EmotesStatisticEmoteDetailedResponse.emoteName":
		if e.complexity.EmotesStatisticEmoteDetailedResponse.EmoteName == nil {
			break
		}

		return e.complexity.EmotesStatisticEmoteDetailedResponse.EmoteName(childComplexity), true

	case "EmotesStatisticEmoteDetailedResponse.graphicUsages":
		if e.complexity.EmotesStatisticEmoteDetailedResponse.GraphicUsages == nil {
			break
		}

		return e.complexity.EmotesStatisticEmoteDetailedResponse.GraphicUsages(childComplexity), true

	case "EmotesStatisticEmoteDetailedResponse.lastUsedTimestamp":
		if e.complexity.EmotesStatisticEmoteDetailedResponse.LastUsedTimestamp == nil {
			break
		}

		return e.complexity.EmotesStatisticEmoteDetailedResponse.LastUsedTimestamp(childComplexity), true

	case "EmotesStatisticEmoteDetailedResponse.topUsers":
		if e.complexity.EmotesStatisticEmoteDetailedResponse.TopUsers == nil {
			break
		}

		return e.complexity.EmotesStatisticEmoteDetailedResponse.TopUsers(childComplexity), true

	case "EmotesStatisticEmoteDetailedResponse.topUsersTotal":
		if e.complexity.EmotesStatisticEmoteDetailedResponse.TopUsersTotal == nil {
			break
		}

		return e.complexity.EmotesStatisticEmoteDetailedResponse.TopUsersTotal(childComplexity), true

	case "EmotesStatisticEmoteDetailedResponse.totalUsages":
		if e.complexity.EmotesStatisticEmoteDetailedResponse.TotalUsages == nil {
			break
		}

		return e.complexity.EmotesStatisticEmoteDetailedResponse.TotalUsages(childComplexity), true

	case "EmotesStatisticEmoteDetailedResponse.usagesByUsersTotal":
		if e.complexity.EmotesStatisticEmoteDetailedResponse.UsagesByUsersTotal == nil {
			break
		}

		return e.complexity.EmotesStatisticEmoteDetailedResponse.UsagesByUsersTotal(childComplexity), true

	case "EmotesStatisticEmoteDetailedResponse.usagesHistory":
		if e.complexity.EmotesStatisticEmoteDetailedResponse.UsagesHistory == nil {
			break
		}

		return e.complexity.EmotesStatisticEmoteDetailedResponse.UsagesHistory(childComplexity), true

	case "EmotesStatisticResponse.emotes":
		if e.complexity.EmotesStatisticResponse.Emotes == nil {
			break
		}

		return e.complexity.EmotesStatisticResponse.Emotes(childComplexity), true

	case "EmotesStatisticResponse.total":
		if e.complexity.EmotesStatisticResponse.Total == nil {
			break
		}

		return e.complexity.EmotesStatisticResponse.Total(childComplexity), true

	case "Greeting.enabled":
		if e.complexity.Greeting.Enabled == nil {
			break
		}

		return e.complexity.Greeting.Enabled(childComplexity), true

	case "Greeting.id":
		if e.complexity.Greeting.ID == nil {
			break
		}

		return e.complexity.Greeting.ID(childComplexity), true

	case "Greeting.isReply":
		if e.complexity.Greeting.IsReply == nil {
			break
		}

		return e.complexity.Greeting.IsReply(childComplexity), true

	case "Greeting.text":
		if e.complexity.Greeting.Text == nil {
			break
		}

		return e.complexity.Greeting.Text(childComplexity), true

	case "Greeting.twitchProfile":
		if e.complexity.Greeting.TwitchProfile == nil {
			break
		}

		return e.complexity.Greeting.TwitchProfile(childComplexity), true

	case "Greeting.userId":
		if e.complexity.Greeting.UserID == nil {
			break
		}

		return e.complexity.Greeting.UserID(childComplexity), true

	case "Keyword.cooldown":
		if e.complexity.Keyword.Cooldown == nil {
			break
		}

		return e.complexity.Keyword.Cooldown(childComplexity), true

	case "Keyword.enabled":
		if e.complexity.Keyword.Enabled == nil {
			break
		}

		return e.complexity.Keyword.Enabled(childComplexity), true

	case "Keyword.id":
		if e.complexity.Keyword.ID == nil {
			break
		}

		return e.complexity.Keyword.ID(childComplexity), true

	case "Keyword.isRegularExpression":
		if e.complexity.Keyword.IsRegularExpression == nil {
			break
		}

		return e.complexity.Keyword.IsRegularExpression(childComplexity), true

	case "Keyword.isReply":
		if e.complexity.Keyword.IsReply == nil {
			break
		}

		return e.complexity.Keyword.IsReply(childComplexity), true

	case "Keyword.response":
		if e.complexity.Keyword.Response == nil {
			break
		}

		return e.complexity.Keyword.Response(childComplexity), true

	case "Keyword.text":
		if e.complexity.Keyword.Text == nil {
			break
		}

		return e.complexity.Keyword.Text(childComplexity), true

	case "Keyword.usageCount":
		if e.complexity.Keyword.UsageCount == nil {
			break
		}

		return e.complexity.Keyword.UsageCount(childComplexity), true

	case "Mutation.authenticatedUserRegenerateApiKey":
		if e.complexity.Mutation.AuthenticatedUserRegenerateAPIKey == nil {
			break
		}

		return e.complexity.Mutation.AuthenticatedUserRegenerateAPIKey(childComplexity), true

	case "Mutation.authenticatedUserSelectDashboard":
		if e.complexity.Mutation.AuthenticatedUserSelectDashboard == nil {
			break
		}

		args, err := ec.field_Mutation_authenticatedUserSelectDashboard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthenticatedUserSelectDashboard(childComplexity, args["dashboardId"].(string)), true

	case "Mutation.authenticatedUserUpdatePublicPage":
		if e.complexity.Mutation.AuthenticatedUserUpdatePublicPage == nil {
			break
		}

		args, err := ec.field_Mutation_authenticatedUserUpdatePublicPage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthenticatedUserUpdatePublicPage(childComplexity, args["opts"].(gqlmodel.UserUpdatePublicSettingsInput)), true

	case "Mutation.authenticatedUserUpdateSettings":
		if e.complexity.Mutation.AuthenticatedUserUpdateSettings == nil {
			break
		}

		args, err := ec.field_Mutation_authenticatedUserUpdateSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AuthenticatedUserUpdateSettings(childComplexity, args["opts"].(gqlmodel.UserUpdateSettingsInput)), true

	case "Mutation.badgesAddUser":
		if e.complexity.Mutation.BadgesAddUser == nil {
			break
		}

		args, err := ec.field_Mutation_badgesAddUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BadgesAddUser(childComplexity, args["id"].(string), args["userId"].(string)), true

	case "Mutation.badgesCreate":
		if e.complexity.Mutation.BadgesCreate == nil {
			break
		}

		args, err := ec.field_Mutation_badgesCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BadgesCreate(childComplexity, args["opts"].(gqlmodel.TwirBadgeCreateOpts)), true

	case "Mutation.badgesDelete":
		if e.complexity.Mutation.BadgesDelete == nil {
			break
		}

		args, err := ec.field_Mutation_badgesDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BadgesDelete(childComplexity, args["id"].(string)), true

	case "Mutation.badgesRemoveUser":
		if e.complexity.Mutation.BadgesRemoveUser == nil {
			break
		}

		args, err := ec.field_Mutation_badgesRemoveUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BadgesRemoveUser(childComplexity, args["id"].(string), args["userId"].(string)), true

	case "Mutation.badgesUpdate":
		if e.complexity.Mutation.BadgesUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_badgesUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BadgesUpdate(childComplexity, args["id"].(string), args["opts"].(gqlmodel.TwirBadgeUpdateOpts)), true

	case "Mutation.channelAlertsCreate":
		if e.complexity.Mutation.ChannelAlertsCreate == nil {
			break
		}

		args, err := ec.field_Mutation_channelAlertsCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChannelAlertsCreate(childComplexity, args["input"].(gqlmodel.ChannelAlertCreateInput)), true

	case "Mutation.channelAlertsDelete":
		if e.complexity.Mutation.ChannelAlertsDelete == nil {
			break
		}

		args, err := ec.field_Mutation_channelAlertsDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChannelAlertsDelete(childComplexity, args["id"].(string)), true

	case "Mutation.channelAlertsUpdate":
		if e.complexity.Mutation.ChannelAlertsUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_channelAlertsUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChannelAlertsUpdate(childComplexity, args["id"].(string), args["input"].(gqlmodel.ChannelAlertUpdateInput)), true

	case "Mutation.chatOverlayCreate":
		if e.complexity.Mutation.ChatOverlayCreate == nil {
			break
		}

		args, err := ec.field_Mutation_chatOverlayCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChatOverlayCreate(childComplexity, args["opts"].(gqlmodel.ChatOverlayMutateOpts)), true

	case "Mutation.chatOverlayDelete":
		if e.complexity.Mutation.ChatOverlayDelete == nil {
			break
		}

		args, err := ec.field_Mutation_chatOverlayDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChatOverlayDelete(childComplexity, args["id"].(string)), true

	case "Mutation.chatOverlayUpdate":
		if e.complexity.Mutation.ChatOverlayUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_chatOverlayUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChatOverlayUpdate(childComplexity, args["id"].(string), args["opts"].(gqlmodel.ChatOverlayMutateOpts)), true

	case "Mutation.commandsCreate":
		if e.complexity.Mutation.CommandsCreate == nil {
			break
		}

		args, err := ec.field_Mutation_commandsCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommandsCreate(childComplexity, args["opts"].(gqlmodel.CommandsCreateOpts)), true

	case "Mutation.commandsGroupsCreate":
		if e.complexity.Mutation.CommandsGroupsCreate == nil {
			break
		}

		args, err := ec.field_Mutation_commandsGroupsCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommandsGroupsCreate(childComplexity, args["opts"].(gqlmodel.CommandsGroupsCreateOpts)), true

	case "Mutation.commandsGroupsRemove":
		if e.complexity.Mutation.CommandsGroupsRemove == nil {
			break
		}

		args, err := ec.field_Mutation_commandsGroupsRemove_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommandsGroupsRemove(childComplexity, args["id"].(string)), true

	case "Mutation.commandsGroupsUpdate":
		if e.complexity.Mutation.CommandsGroupsUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_commandsGroupsUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommandsGroupsUpdate(childComplexity, args["id"].(string), args["opts"].(gqlmodel.CommandsGroupsUpdateOpts)), true

	case "Mutation.commandsRemove":
		if e.complexity.Mutation.CommandsRemove == nil {
			break
		}

		args, err := ec.field_Mutation_commandsRemove_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommandsRemove(childComplexity, args["id"].(string)), true

	case "Mutation.commandsUpdate":
		if e.complexity.Mutation.CommandsUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_commandsUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommandsUpdate(childComplexity, args["id"].(string), args["opts"].(gqlmodel.CommandsUpdateOpts)), true

	case "Mutation.communityResetStats":
		if e.complexity.Mutation.CommunityResetStats == nil {
			break
		}

		args, err := ec.field_Mutation_communityResetStats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommunityResetStats(childComplexity, args["type"].(gqlmodel.CommunityUsersResetType)), true

	case "Mutation.dropAllAuthSessions":
		if e.complexity.Mutation.DropAllAuthSessions == nil {
			break
		}

		return e.complexity.Mutation.DropAllAuthSessions(childComplexity), true

	case "Mutation.eventsubSubscribe":
		if e.complexity.Mutation.EventsubSubscribe == nil {
			break
		}

		args, err := ec.field_Mutation_eventsubSubscribe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EventsubSubscribe(childComplexity, args["opts"].(gqlmodel.EventsubSubscribeInput)), true

	case "Mutation.executeScript":
		if e.complexity.Mutation.ExecuteScript == nil {
			break
		}

		args, err := ec.field_Mutation_executeScript_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ExecuteScript(childComplexity, args["script"].(string), args["testAsUserName"].(*string)), true

	case "Mutation.gamesDuelUpdate":
		if e.complexity.Mutation.GamesDuelUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_gamesDuelUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GamesDuelUpdate(childComplexity, args["opts"].(gqlmodel.DuelGameOpts)), true

	case "Mutation.gamesEightBallUpdate":
		if e.complexity.Mutation.GamesEightBallUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_gamesEightBallUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GamesEightBallUpdate(childComplexity, args["opts"].(gqlmodel.EightBallGameOpts)), true

	case "Mutation.gamesRussianRouletteUpdate":
		if e.complexity.Mutation.GamesRussianRouletteUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_gamesRussianRouletteUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GamesRussianRouletteUpdate(childComplexity, args["opts"].(gqlmodel.RussianRouletteGameOpts)), true

	case "Mutation.gamesSeppukuUpdate":
		if e.complexity.Mutation.GamesSeppukuUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_gamesSeppukuUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GamesSeppukuUpdate(childComplexity, args["opts"].(gqlmodel.SeppukuGameOpts)), true

	case "Mutation.gamesVotebanUpdate":
		if e.complexity.Mutation.GamesVotebanUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_gamesVotebanUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GamesVotebanUpdate(childComplexity, args["opts"].(gqlmodel.VotebanGameOpts)), true

	case "Mutation.greetingsCreate":
		if e.complexity.Mutation.GreetingsCreate == nil {
			break
		}

		args, err := ec.field_Mutation_greetingsCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GreetingsCreate(childComplexity, args["opts"].(gqlmodel.GreetingsCreateInput)), true

	case "Mutation.greetingsRemove":
		if e.complexity.Mutation.GreetingsRemove == nil {
			break
		}

		args, err := ec.field_Mutation_greetingsRemove_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GreetingsRemove(childComplexity, args["id"].(string)), true

	case "Mutation.greetingsUpdate":
		if e.complexity.Mutation.GreetingsUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_greetingsUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GreetingsUpdate(childComplexity, args["id"].(string), args["opts"].(gqlmodel.GreetingsUpdateInput)), true

	case "Mutation.keywordCreate":
		if e.complexity.Mutation.KeywordCreate == nil {
			break
		}

		args, err := ec.field_Mutation_keywordCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.KeywordCreate(childComplexity, args["opts"].(gqlmodel.KeywordCreateInput)), true

	case "Mutation.keywordRemove":
		if e.complexity.Mutation.KeywordRemove == nil {
			break
		}

		args, err := ec.field_Mutation_keywordRemove_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.KeywordRemove(childComplexity, args["id"].(string)), true

	case "Mutation.keywordUpdate":
		if e.complexity.Mutation.KeywordUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_keywordUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.KeywordUpdate(childComplexity, args["id"].(string), args["opts"].(gqlmodel.KeywordUpdateInput)), true

	case "Mutation.logout":
		if e.complexity.Mutation.Logout == nil {
			break
		}

		return e.complexity.Mutation.Logout(childComplexity), true

	case "Mutation.notificationsCreate":
		if e.complexity.Mutation.NotificationsCreate == nil {
			break
		}

		args, err := ec.field_Mutation_notificationsCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NotificationsCreate(childComplexity, args["text"].(*string), args["editorJsJson"].(*string), args["userId"].(*string)), true

	case "Mutation.notificationsDelete":
		if e.complexity.Mutation.NotificationsDelete == nil {
			break
		}

		args, err := ec.field_Mutation_notificationsDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NotificationsDelete(childComplexity, args["id"].(string)), true

	case "Mutation.notificationsUpdate":
		if e.complexity.Mutation.NotificationsUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_notificationsUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NotificationsUpdate(childComplexity, args["id"].(string), args["opts"].(gqlmodel.NotificationUpdateOpts)), true

	case "Mutation.nowPlayingOverlayCreate":
		if e.complexity.Mutation.NowPlayingOverlayCreate == nil {
			break
		}

		args, err := ec.field_Mutation_nowPlayingOverlayCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NowPlayingOverlayCreate(childComplexity, args["opts"].(gqlmodel.NowPlayingOverlayMutateOpts)), true

	case "Mutation.nowPlayingOverlayDelete":
		if e.complexity.Mutation.NowPlayingOverlayDelete == nil {
			break
		}

		args, err := ec.field_Mutation_nowPlayingOverlayDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NowPlayingOverlayDelete(childComplexity, args["id"].(string)), true

	case "Mutation.nowPlayingOverlayUpdate":
		if e.complexity.Mutation.NowPlayingOverlayUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_nowPlayingOverlayUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NowPlayingOverlayUpdate(childComplexity, args["id"].(string), args["opts"].(gqlmodel.NowPlayingOverlayMutateOpts)), true

	case "Mutation.rolesCreate":
		if e.complexity.Mutation.RolesCreate == nil {
			break
		}

		args, err := ec.field_Mutation_rolesCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RolesCreate(childComplexity, args["opts"].(gqlmodel.RolesCreateOrUpdateOpts)), true

	case "Mutation.rolesRemove":
		if e.complexity.Mutation.RolesRemove == nil {
			break
		}

		args, err := ec.field_Mutation_rolesRemove_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RolesRemove(childComplexity, args["id"].(string)), true

	case "Mutation.rolesUpdate":
		if e.complexity.Mutation.RolesUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_rolesUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RolesUpdate(childComplexity, args["id"].(string), args["opts"].(gqlmodel.RolesCreateOrUpdateOpts)), true

	case "Mutation.songRequestsUpdate":
		if e.complexity.Mutation.SongRequestsUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_songRequestsUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SongRequestsUpdate(childComplexity, args["opts"].(gqlmodel.SongRequestsSettingsOpts)), true

	case "Mutation.switchUserAdmin":
		if e.complexity.Mutation.SwitchUserAdmin == nil {
			break
		}

		args, err := ec.field_Mutation_switchUserAdmin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SwitchUserAdmin(childComplexity, args["userId"].(string)), true

	case "Mutation.switchUserBan":
		if e.complexity.Mutation.SwitchUserBan == nil {
			break
		}

		args, err := ec.field_Mutation_switchUserBan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SwitchUserBan(childComplexity, args["userId"].(string)), true

	case "Mutation.timersCreate":
		if e.complexity.Mutation.TimersCreate == nil {
			break
		}

		args, err := ec.field_Mutation_timersCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TimersCreate(childComplexity, args["opts"].(gqlmodel.TimerCreateInput)), true

	case "Mutation.timersRemove":
		if e.complexity.Mutation.TimersRemove == nil {
			break
		}

		args, err := ec.field_Mutation_timersRemove_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TimersRemove(childComplexity, args["id"].(string)), true

	case "Mutation.timersUpdate":
		if e.complexity.Mutation.TimersUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_timersUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TimersUpdate(childComplexity, args["id"].(string), args["opts"].(gqlmodel.TimerUpdateInput)), true

	case "Mutation.updateChatAlerts":
		if e.complexity.Mutation.UpdateChatAlerts == nil {
			break
		}

		args, err := ec.field_Mutation_updateChatAlerts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChatAlerts(childComplexity, args["input"].(gqlmodel.ChatAlertsInput)), true

	case "Mutation.variablesCreate":
		if e.complexity.Mutation.VariablesCreate == nil {
			break
		}

		args, err := ec.field_Mutation_variablesCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VariablesCreate(childComplexity, args["opts"].(gqlmodel.VariableCreateInput)), true

	case "Mutation.variablesDelete":
		if e.complexity.Mutation.VariablesDelete == nil {
			break
		}

		args, err := ec.field_Mutation_variablesDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VariablesDelete(childComplexity, args["id"].(string)), true

	case "Mutation.variablesUpdate":
		if e.complexity.Mutation.VariablesUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_variablesUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VariablesUpdate(childComplexity, args["id"].(string), args["opts"].(gqlmodel.VariableUpdateInput)), true

	case "NowPlayingOverlay.backgroundColor":
		if e.complexity.NowPlayingOverlay.BackgroundColor == nil {
			break
		}

		return e.complexity.NowPlayingOverlay.BackgroundColor(childComplexity), true

	case "NowPlayingOverlay.channelId":
		if e.complexity.NowPlayingOverlay.ChannelID == nil {
			break
		}

		return e.complexity.NowPlayingOverlay.ChannelID(childComplexity), true

	case "NowPlayingOverlay.fontFamily":
		if e.complexity.NowPlayingOverlay.FontFamily == nil {
			break
		}

		return e.complexity.NowPlayingOverlay.FontFamily(childComplexity), true

	case "NowPlayingOverlay.fontWeight":
		if e.complexity.NowPlayingOverlay.FontWeight == nil {
			break
		}

		return e.complexity.NowPlayingOverlay.FontWeight(childComplexity), true

	case "NowPlayingOverlay.hideTimeout":
		if e.complexity.NowPlayingOverlay.HideTimeout == nil {
			break
		}

		return e.complexity.NowPlayingOverlay.HideTimeout(childComplexity), true

	case "NowPlayingOverlay.id":
		if e.complexity.NowPlayingOverlay.ID == nil {
			break
		}

		return e.complexity.NowPlayingOverlay.ID(childComplexity), true

	case "NowPlayingOverlay.preset":
		if e.complexity.NowPlayingOverlay.Preset == nil {
			break
		}

		return e.complexity.NowPlayingOverlay.Preset(childComplexity), true

	case "NowPlayingOverlay.showImage":
		if e.complexity.NowPlayingOverlay.ShowImage == nil {
			break
		}

		return e.complexity.NowPlayingOverlay.ShowImage(childComplexity), true

	case "NowPlayingOverlayTrack.artist":
		if e.complexity.NowPlayingOverlayTrack.Artist == nil {
			break
		}

		return e.complexity.NowPlayingOverlayTrack.Artist(childComplexity), true

	case "NowPlayingOverlayTrack.imageUrl":
		if e.complexity.NowPlayingOverlayTrack.ImageURL == nil {
			break
		}

		return e.complexity.NowPlayingOverlayTrack.ImageURL(childComplexity), true

	case "NowPlayingOverlayTrack.title":
		if e.complexity.NowPlayingOverlayTrack.Title == nil {
			break
		}

		return e.complexity.NowPlayingOverlayTrack.Title(childComplexity), true

	case "PublicCommand.aliases":
		if e.complexity.PublicCommand.Aliases == nil {
			break
		}

		return e.complexity.PublicCommand.Aliases(childComplexity), true

	case "PublicCommand.cooldown":
		if e.complexity.PublicCommand.Cooldown == nil {
			break
		}

		return e.complexity.PublicCommand.Cooldown(childComplexity), true

	case "PublicCommand.cooldownType":
		if e.complexity.PublicCommand.CooldownType == nil {
			break
		}

		return e.complexity.PublicCommand.CooldownType(childComplexity), true

	case "PublicCommand.description":
		if e.complexity.PublicCommand.Description == nil {
			break
		}

		return e.complexity.PublicCommand.Description(childComplexity), true

	case "PublicCommand.module":
		if e.complexity.PublicCommand.Module == nil {
			break
		}

		return e.complexity.PublicCommand.Module(childComplexity), true

	case "PublicCommand.name":
		if e.complexity.PublicCommand.Name == nil {
			break
		}

		return e.complexity.PublicCommand.Name(childComplexity), true

	case "PublicCommand.permissions":
		if e.complexity.PublicCommand.Permissions == nil {
			break
		}

		return e.complexity.PublicCommand.Permissions(childComplexity), true

	case "PublicCommand.responses":
		if e.complexity.PublicCommand.Responses == nil {
			break
		}

		return e.complexity.PublicCommand.Responses(childComplexity), true

	case "PublicCommandPermission.name":
		if e.complexity.PublicCommandPermission.Name == nil {
			break
		}

		return e.complexity.PublicCommandPermission.Name(childComplexity), true

	case "PublicCommandPermission.type":
		if e.complexity.PublicCommandPermission.Type == nil {
			break
		}

		return e.complexity.PublicCommandPermission.Type(childComplexity), true

	case "PublicSettings.description":
		if e.complexity.PublicSettings.Description == nil {
			break
		}

		return e.complexity.PublicSettings.Description(childComplexity), true

	case "PublicSettings.socialLinks":
		if e.complexity.PublicSettings.SocialLinks == nil {
			break
		}

		return e.complexity.PublicSettings.SocialLinks(childComplexity), true

	case "Query.adminAuditLogs":
		if e.complexity.Query.AdminAuditLogs == nil {
			break
		}

		args, err := ec.field_Query_adminAuditLogs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminAuditLogs(childComplexity, args["input"].(gqlmodel.AdminAuditLogsInput)), true

	case "Query.auditLog":
		if e.complexity.Query.AuditLog == nil {
			break
		}

		return e.complexity.Query.AuditLog(childComplexity), true

	case "Query.authLink":
		if e.complexity.Query.AuthLink == nil {
			break
		}

		args, err := ec.field_Query_authLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthLink(childComplexity, args["redirectTo"].(string)), true

	case "Query.authenticatedUser":
		if e.complexity.Query.AuthenticatedUser == nil {
			break
		}

		return e.complexity.Query.AuthenticatedUser(childComplexity), true

	case "Query.channelAlerts":
		if e.complexity.Query.ChannelAlerts == nil {
			break
		}

		return e.complexity.Query.ChannelAlerts(childComplexity), true

	case "Query.chatAlerts":
		if e.complexity.Query.ChatAlerts == nil {
			break
		}

		return e.complexity.Query.ChatAlerts(childComplexity), true

	case "Query.chatOverlays":
		if e.complexity.Query.ChatOverlays == nil {
			break
		}

		return e.complexity.Query.ChatOverlays(childComplexity), true

	case "Query.chatOverlaysById":
		if e.complexity.Query.ChatOverlaysByID == nil {
			break
		}

		args, err := ec.field_Query_chatOverlaysById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChatOverlaysByID(childComplexity, args["id"].(string)), true

	case "Query.commands":
		if e.complexity.Query.Commands == nil {
			break
		}

		return e.complexity.Query.Commands(childComplexity), true

	case "Query.commandsGroups":
		if e.complexity.Query.CommandsGroups == nil {
			break
		}

		return e.complexity.Query.CommandsGroups(childComplexity), true

	case "Query.commandsPublic":
		if e.complexity.Query.CommandsPublic == nil {
			break
		}

		args, err := ec.field_Query_commandsPublic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommandsPublic(childComplexity, args["channelId"].(string)), true

	case "Query.communityUsers":
		if e.complexity.Query.CommunityUsers == nil {
			break
		}

		args, err := ec.field_Query_communityUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommunityUsers(childComplexity, args["opts"].(gqlmodel.CommunityUsersOpts)), true

	case "Query.emotesStatisticEmoteDetailedInformation":
		if e.complexity.Query.EmotesStatisticEmoteDetailedInformation == nil {
			break
		}

		args, err := ec.field_Query_emotesStatisticEmoteDetailedInformation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EmotesStatisticEmoteDetailedInformation(childComplexity, args["opts"].(gqlmodel.EmotesStatisticEmoteDetailedOpts)), true

	case "Query.emotesStatistics":
		if e.complexity.Query.EmotesStatistics == nil {
			break
		}

		args, err := ec.field_Query_emotesStatistics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EmotesStatistics(childComplexity, args["opts"].(gqlmodel.EmotesStatisticsOpts)), true

	case "Query.gamesDuel":
		if e.complexity.Query.GamesDuel == nil {
			break
		}

		return e.complexity.Query.GamesDuel(childComplexity), true

	case "Query.gamesEightBall":
		if e.complexity.Query.GamesEightBall == nil {
			break
		}

		return e.complexity.Query.GamesEightBall(childComplexity), true

	case "Query.gamesRussianRoulette":
		if e.complexity.Query.GamesRussianRoulette == nil {
			break
		}

		return e.complexity.Query.GamesRussianRoulette(childComplexity), true

	case "Query.gamesSeppuku":
		if e.complexity.Query.GamesSeppuku == nil {
			break
		}

		return e.complexity.Query.GamesSeppuku(childComplexity), true

	case "Query.gamesVoteban":
		if e.complexity.Query.GamesVoteban == nil {
			break
		}

		return e.complexity.Query.GamesVoteban(childComplexity), true

	case "Query.greetings":
		if e.complexity.Query.Greetings == nil {
			break
		}

		return e.complexity.Query.Greetings(childComplexity), true

	case "Query.keywords":
		if e.complexity.Query.Keywords == nil {
			break
		}

		return e.complexity.Query.Keywords(childComplexity), true

	case "Query.notificationsByAdmin":
		if e.complexity.Query.NotificationsByAdmin == nil {
			break
		}

		args, err := ec.field_Query_notificationsByAdmin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NotificationsByAdmin(childComplexity, args["opts"].(gqlmodel.AdminNotificationsParams)), true

	case "Query.notificationsByUser":
		if e.complexity.Query.NotificationsByUser == nil {
			break
		}

		return e.complexity.Query.NotificationsByUser(childComplexity), true

	case "Query.nowPlayingOverlays":
		if e.complexity.Query.NowPlayingOverlays == nil {
			break
		}

		return e.complexity.Query.NowPlayingOverlays(childComplexity), true

	case "Query.nowPlayingOverlaysById":
		if e.complexity.Query.NowPlayingOverlaysByID == nil {
			break
		}

		args, err := ec.field_Query_nowPlayingOverlaysById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NowPlayingOverlaysByID(childComplexity, args["id"].(string)), true

	case "Query.rewardsRedemptionsHistory":
		if e.complexity.Query.RewardsRedemptionsHistory == nil {
			break
		}

		args, err := ec.field_Query_rewardsRedemptionsHistory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RewardsRedemptionsHistory(childComplexity, args["opts"].(gqlmodel.TwitchRedemptionsOpts)), true

	case "Query.roles":
		if e.complexity.Query.Roles == nil {
			break
		}

		return e.complexity.Query.Roles(childComplexity), true

	case "Query.songRequests":
		if e.complexity.Query.SongRequests == nil {
			break
		}

		return e.complexity.Query.SongRequests(childComplexity), true

	case "Query.songRequestsSearchChannelOrVideo":
		if e.complexity.Query.SongRequestsSearchChannelOrVideo == nil {
			break
		}

		args, err := ec.field_Query_songRequestsSearchChannelOrVideo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SongRequestsSearchChannelOrVideo(childComplexity, args["opts"].(gqlmodel.SongRequestsSearchChannelOrVideoOpts)), true

	case "Query.timers":
		if e.complexity.Query.Timers == nil {
			break
		}

		return e.complexity.Query.Timers(childComplexity), true

	case "Query.twirBadges":
		if e.complexity.Query.TwirBadges == nil {
			break
		}

		return e.complexity.Query.TwirBadges(childComplexity), true

	case "Query.twirStats":
		if e.complexity.Query.TwirStats == nil {
			break
		}

		return e.complexity.Query.TwirStats(childComplexity), true

	case "Query.twirUsers":
		if e.complexity.Query.TwirUsers == nil {
			break
		}

		args, err := ec.field_Query_twirUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TwirUsers(childComplexity, args["opts"].(gqlmodel.TwirUsersSearchParams)), true

	case "Query.twitchGetChannelBadges":
		if e.complexity.Query.TwitchGetChannelBadges == nil {
			break
		}

		args, err := ec.field_Query_twitchGetChannelBadges_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TwitchGetChannelBadges(childComplexity, args["channelId"].(*string)), true

	case "Query.twitchGetChannelRewards":
		if e.complexity.Query.TwitchGetChannelRewards == nil {
			break
		}

		args, err := ec.field_Query_twitchGetChannelRewards_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TwitchGetChannelRewards(childComplexity, args["channelId"].(*string)), true

	case "Query.twitchGetGlobalBadges":
		if e.complexity.Query.TwitchGetGlobalBadges == nil {
			break
		}

		return e.complexity.Query.TwitchGetGlobalBadges(childComplexity), true

	case "Query.twitchGetUserById":
		if e.complexity.Query.TwitchGetUserByID == nil {
			break
		}

		args, err := ec.field_Query_twitchGetUserById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TwitchGetUserByID(childComplexity, args["id"].(string)), true

	case "Query.twitchGetUserByName":
		if e.complexity.Query.TwitchGetUserByName == nil {
			break
		}

		args, err := ec.field_Query_twitchGetUserByName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TwitchGetUserByName(childComplexity, args["name"].(string)), true

	case "Query.twitchRewards":
		if e.complexity.Query.TwitchRewards == nil {
			break
		}

		args, err := ec.field_Query_twitchRewards_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TwitchRewards(childComplexity, args["channelId"].(*string)), true

	case "Query.userPublicSettings":
		if e.complexity.Query.UserPublicSettings == nil {
			break
		}

		args, err := ec.field_Query_userPublicSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserPublicSettings(childComplexity, args["userId"].(*string)), true

	case "Query.variables":
		if e.complexity.Query.Variables == nil {
			break
		}

		return e.complexity.Query.Variables(childComplexity), true

	case "Query.variablesBuiltIn":
		if e.complexity.Query.VariablesBuiltIn == nil {
			break
		}

		return e.complexity.Query.VariablesBuiltIn(childComplexity), true

	case "Role.channelId":
		if e.complexity.Role.ChannelID == nil {
			break
		}

		return e.complexity.Role.ChannelID(childComplexity), true

	case "Role.id":
		if e.complexity.Role.ID == nil {
			break
		}

		return e.complexity.Role.ID(childComplexity), true

	case "Role.name":
		if e.complexity.Role.Name == nil {
			break
		}

		return e.complexity.Role.Name(childComplexity), true

	case "Role.permissions":
		if e.complexity.Role.Permissions == nil {
			break
		}

		return e.complexity.Role.Permissions(childComplexity), true

	case "Role.settings":
		if e.complexity.Role.Settings == nil {
			break
		}

		return e.complexity.Role.Settings(childComplexity), true

	case "Role.type":
		if e.complexity.Role.Type == nil {
			break
		}

		return e.complexity.Role.Type(childComplexity), true

	case "Role.users":
		if e.complexity.Role.Users == nil {
			break
		}

		return e.complexity.Role.Users(childComplexity), true

	case "RoleSettings.requiredMessages":
		if e.complexity.RoleSettings.RequiredMessages == nil {
			break
		}

		return e.complexity.RoleSettings.RequiredMessages(childComplexity), true

	case "RoleSettings.requiredUserChannelPoints":
		if e.complexity.RoleSettings.RequiredUserChannelPoints == nil {
			break
		}

		return e.complexity.RoleSettings.RequiredUserChannelPoints(childComplexity), true

	case "RoleSettings.requiredWatchTime":
		if e.complexity.RoleSettings.RequiredWatchTime == nil {
			break
		}

		return e.complexity.RoleSettings.RequiredWatchTime(childComplexity), true

	case "RussianRouletteGame.canBeUsedByModerator":
		if e.complexity.RussianRouletteGame.CanBeUsedByModerator == nil {
			break
		}

		return e.complexity.RussianRouletteGame.CanBeUsedByModerator(childComplexity), true

	case "RussianRouletteGame.chargedBullets":
		if e.complexity.RussianRouletteGame.ChargedBullets == nil {
			break
		}

		return e.complexity.RussianRouletteGame.ChargedBullets(childComplexity), true

	case "RussianRouletteGame.deathMessage":
		if e.complexity.RussianRouletteGame.DeathMessage == nil {
			break
		}

		return e.complexity.RussianRouletteGame.DeathMessage(childComplexity), true

	case "RussianRouletteGame.decisionSeconds":
		if e.complexity.RussianRouletteGame.DecisionSeconds == nil {
			break
		}

		return e.complexity.RussianRouletteGame.DecisionSeconds(childComplexity), true

	case "RussianRouletteGame.enabled":
		if e.complexity.RussianRouletteGame.Enabled == nil {
			break
		}

		return e.complexity.RussianRouletteGame.Enabled(childComplexity), true

	case "RussianRouletteGame.initMessage":
		if e.complexity.RussianRouletteGame.InitMessage == nil {
			break
		}

		return e.complexity.RussianRouletteGame.InitMessage(childComplexity), true

	case "RussianRouletteGame.surviveMessage":
		if e.complexity.RussianRouletteGame.SurviveMessage == nil {
			break
		}

		return e.complexity.RussianRouletteGame.SurviveMessage(childComplexity), true

	case "RussianRouletteGame.timeoutSeconds":
		if e.complexity.RussianRouletteGame.TimeoutSeconds == nil {
			break
		}

		return e.complexity.RussianRouletteGame.TimeoutSeconds(childComplexity), true

	case "RussianRouletteGame.tumberSize":
		if e.complexity.RussianRouletteGame.TumberSize == nil {
			break
		}

		return e.complexity.RussianRouletteGame.TumberSize(childComplexity), true

	case "SeppukuGame.enabled":
		if e.complexity.SeppukuGame.Enabled == nil {
			break
		}

		return e.complexity.SeppukuGame.Enabled(childComplexity), true

	case "SeppukuGame.message":
		if e.complexity.SeppukuGame.Message == nil {
			break
		}

		return e.complexity.SeppukuGame.Message(childComplexity), true

	case "SeppukuGame.messageModerators":
		if e.complexity.SeppukuGame.MessageModerators == nil {
			break
		}

		return e.complexity.SeppukuGame.MessageModerators(childComplexity), true

	case "SeppukuGame.timeoutModerators":
		if e.complexity.SeppukuGame.TimeoutModerators == nil {
			break
		}

		return e.complexity.SeppukuGame.TimeoutModerators(childComplexity), true

	case "SeppukuGame.timeoutSeconds":
		if e.complexity.SeppukuGame.TimeoutSeconds == nil {
			break
		}

		return e.complexity.SeppukuGame.TimeoutSeconds(childComplexity), true

	case "SocialLink.href":
		if e.complexity.SocialLink.Href == nil {
			break
		}

		return e.complexity.SocialLink.Href(childComplexity), true

	case "SocialLink.title":
		if e.complexity.SocialLink.Title == nil {
			break
		}

		return e.complexity.SocialLink.Title(childComplexity), true

	case "SongRequestsChannelTranslations.denied":
		if e.complexity.SongRequestsChannelTranslations.Denied == nil {
			break
		}

		return e.complexity.SongRequestsChannelTranslations.Denied(childComplexity), true

	case "SongRequestsDenyList.artistsNames":
		if e.complexity.SongRequestsDenyList.ArtistsNames == nil {
			break
		}

		return e.complexity.SongRequestsDenyList.ArtistsNames(childComplexity), true

	case "SongRequestsDenyList.channels":
		if e.complexity.SongRequestsDenyList.Channels == nil {
			break
		}

		return e.complexity.SongRequestsDenyList.Channels(childComplexity), true

	case "SongRequestsDenyList.songs":
		if e.complexity.SongRequestsDenyList.Songs == nil {
			break
		}

		return e.complexity.SongRequestsDenyList.Songs(childComplexity), true

	case "SongRequestsDenyList.users":
		if e.complexity.SongRequestsDenyList.Users == nil {
			break
		}

		return e.complexity.SongRequestsDenyList.Users(childComplexity), true

	case "SongRequestsDenyList.words":
		if e.complexity.SongRequestsDenyList.Words == nil {
			break
		}

		return e.complexity.SongRequestsDenyList.Words(childComplexity), true

	case "SongRequestsSearchChannelOrVideoItem.id":
		if e.complexity.SongRequestsSearchChannelOrVideoItem.ID == nil {
			break
		}

		return e.complexity.SongRequestsSearchChannelOrVideoItem.ID(childComplexity), true

	case "SongRequestsSearchChannelOrVideoItem.thumbnail":
		if e.complexity.SongRequestsSearchChannelOrVideoItem.Thumbnail == nil {
			break
		}

		return e.complexity.SongRequestsSearchChannelOrVideoItem.Thumbnail(childComplexity), true

	case "SongRequestsSearchChannelOrVideoItem.title":
		if e.complexity.SongRequestsSearchChannelOrVideoItem.Title == nil {
			break
		}

		return e.complexity.SongRequestsSearchChannelOrVideoItem.Title(childComplexity), true

	case "SongRequestsSearchChannelOrVideoResponse.items":
		if e.complexity.SongRequestsSearchChannelOrVideoResponse.Items == nil {
			break
		}

		return e.complexity.SongRequestsSearchChannelOrVideoResponse.Items(childComplexity), true

	case "SongRequestsSettings.acceptOnlyWhenOnline":
		if e.complexity.SongRequestsSettings.AcceptOnlyWhenOnline == nil {
			break
		}

		return e.complexity.SongRequestsSettings.AcceptOnlyWhenOnline(childComplexity), true

	case "SongRequestsSettings.announcePlay":
		if e.complexity.SongRequestsSettings.AnnouncePlay == nil {
			break
		}

		return e.complexity.SongRequestsSettings.AnnouncePlay(childComplexity), true

	case "SongRequestsSettings.channelPointsRewardId":
		if e.complexity.SongRequestsSettings.ChannelPointsRewardID == nil {
			break
		}

		return e.complexity.SongRequestsSettings.ChannelPointsRewardID(childComplexity), true

	case "SongRequestsSettings.denyList":
		if e.complexity.SongRequestsSettings.DenyList == nil {
			break
		}

		return e.complexity.SongRequestsSettings.DenyList(childComplexity), true

	case "SongRequestsSettings.enabled":
		if e.complexity.SongRequestsSettings.Enabled == nil {
			break
		}

		return e.complexity.SongRequestsSettings.Enabled(childComplexity), true

	case "SongRequestsSettings.maxRequests":
		if e.complexity.SongRequestsSettings.MaxRequests == nil {
			break
		}

		return e.complexity.SongRequestsSettings.MaxRequests(childComplexity), true

	case "SongRequestsSettings.neededVotesForSkip":
		if e.complexity.SongRequestsSettings.NeededVotesForSkip == nil {
			break
		}

		return e.complexity.SongRequestsSettings.NeededVotesForSkip(childComplexity), true

	case "SongRequestsSettings.playerNoCookieMode":
		if e.complexity.SongRequestsSettings.PlayerNoCookieMode == nil {
			break
		}

		return e.complexity.SongRequestsSettings.PlayerNoCookieMode(childComplexity), true

	case "SongRequestsSettings.song":
		if e.complexity.SongRequestsSettings.Song == nil {
			break
		}

		return e.complexity.SongRequestsSettings.Song(childComplexity), true

	case "SongRequestsSettings.takeSongFromDonationMessages":
		if e.complexity.SongRequestsSettings.TakeSongFromDonationMessages == nil {
			break
		}

		return e.complexity.SongRequestsSettings.TakeSongFromDonationMessages(childComplexity), true

	case "SongRequestsSettings.translations":
		if e.complexity.SongRequestsSettings.Translations == nil {
			break
		}

		return e.complexity.SongRequestsSettings.Translations(childComplexity), true

	case "SongRequestsSettings.user":
		if e.complexity.SongRequestsSettings.User == nil {
			break
		}

		return e.complexity.SongRequestsSettings.User(childComplexity), true

	case "SongRequestsSongSettings.acceptedCategories":
		if e.complexity.SongRequestsSongSettings.AcceptedCategories == nil {
			break
		}

		return e.complexity.SongRequestsSongSettings.AcceptedCategories(childComplexity), true

	case "SongRequestsSongSettings.maxLength":
		if e.complexity.SongRequestsSongSettings.MaxLength == nil {
			break
		}

		return e.complexity.SongRequestsSongSettings.MaxLength(childComplexity), true

	case "SongRequestsSongSettings.minLength":
		if e.complexity.SongRequestsSongSettings.MinLength == nil {
			break
		}

		return e.complexity.SongRequestsSongSettings.MinLength(childComplexity), true

	case "SongRequestsSongSettings.minViews":
		if e.complexity.SongRequestsSongSettings.MinViews == nil {
			break
		}

		return e.complexity.SongRequestsSongSettings.MinViews(childComplexity), true

	case "SongRequestsSongTranslations.ageRestrictions":
		if e.complexity.SongRequestsSongTranslations.AgeRestrictions == nil {
			break
		}

		return e.complexity.SongRequestsSongTranslations.AgeRestrictions(childComplexity), true

	case "SongRequestsSongTranslations.alreadyInQueue":
		if e.complexity.SongRequestsSongTranslations.AlreadyInQueue == nil {
			break
		}

		return e.complexity.SongRequestsSongTranslations.AlreadyInQueue(childComplexity), true

	case "SongRequestsSongTranslations.cannotGetInformation":
		if e.complexity.SongRequestsSongTranslations.CannotGetInformation == nil {
			break
		}

		return e.complexity.SongRequestsSongTranslations.CannotGetInformation(childComplexity), true

	case "SongRequestsSongTranslations.denied":
		if e.complexity.SongRequestsSongTranslations.Denied == nil {
			break
		}

		return e.complexity.SongRequestsSongTranslations.Denied(childComplexity), true

	case "SongRequestsSongTranslations.live":
		if e.complexity.SongRequestsSongTranslations.Live == nil {
			break
		}

		return e.complexity.SongRequestsSongTranslations.Live(childComplexity), true

	case "SongRequestsSongTranslations.maxLength":
		if e.complexity.SongRequestsSongTranslations.MaxLength == nil {
			break
		}

		return e.complexity.SongRequestsSongTranslations.MaxLength(childComplexity), true

	case "SongRequestsSongTranslations.maximumOrdered":
		if e.complexity.SongRequestsSongTranslations.MaximumOrdered == nil {
			break
		}

		return e.complexity.SongRequestsSongTranslations.MaximumOrdered(childComplexity), true

	case "SongRequestsSongTranslations.minLength":
		if e.complexity.SongRequestsSongTranslations.MinLength == nil {
			break
		}

		return e.complexity.SongRequestsSongTranslations.MinLength(childComplexity), true

	case "SongRequestsSongTranslations.minViews":
		if e.complexity.SongRequestsSongTranslations.MinViews == nil {
			break
		}

		return e.complexity.SongRequestsSongTranslations.MinViews(childComplexity), true

	case "SongRequestsSongTranslations.notFound":
		if e.complexity.SongRequestsSongTranslations.NotFound == nil {
			break
		}

		return e.complexity.SongRequestsSongTranslations.NotFound(childComplexity), true

	case "SongRequestsSongTranslations.requestedMessage":
		if e.complexity.SongRequestsSongTranslations.RequestedMessage == nil {
			break
		}

		return e.complexity.SongRequestsSongTranslations.RequestedMessage(childComplexity), true

	case "SongRequestsTranslations.acceptOnlyWhenOnline":
		if e.complexity.SongRequestsTranslations.AcceptOnlyWhenOnline == nil {
			break
		}

		return e.complexity.SongRequestsTranslations.AcceptOnlyWhenOnline(childComplexity), true

	case "SongRequestsTranslations.channel":
		if e.complexity.SongRequestsTranslations.Channel == nil {
			break
		}

		return e.complexity.SongRequestsTranslations.Channel(childComplexity), true

	case "SongRequestsTranslations.noText":
		if e.complexity.SongRequestsTranslations.NoText == nil {
			break
		}

		return e.complexity.SongRequestsTranslations.NoText(childComplexity), true

	case "SongRequestsTranslations.notEnabled":
		if e.complexity.SongRequestsTranslations.NotEnabled == nil {
			break
		}

		return e.complexity.SongRequestsTranslations.NotEnabled(childComplexity), true

	case "SongRequestsTranslations.nowPlaying":
		if e.complexity.SongRequestsTranslations.NowPlaying == nil {
			break
		}

		return e.complexity.SongRequestsTranslations.NowPlaying(childComplexity), true

	case "SongRequestsTranslations.song":
		if e.complexity.SongRequestsTranslations.Song == nil {
			break
		}

		return e.complexity.SongRequestsTranslations.Song(childComplexity), true

	case "SongRequestsTranslations.user":
		if e.complexity.SongRequestsTranslations.User == nil {
			break
		}

		return e.complexity.SongRequestsTranslations.User(childComplexity), true

	case "SongRequestsUserSettings.maxRequests":
		if e.complexity.SongRequestsUserSettings.MaxRequests == nil {
			break
		}

		return e.complexity.SongRequestsUserSettings.MaxRequests(childComplexity), true

	case "SongRequestsUserSettings.minFollowTime":
		if e.complexity.SongRequestsUserSettings.MinFollowTime == nil {
			break
		}

		return e.complexity.SongRequestsUserSettings.MinFollowTime(childComplexity), true

	case "SongRequestsUserSettings.minMessages":
		if e.complexity.SongRequestsUserSettings.MinMessages == nil {
			break
		}

		return e.complexity.SongRequestsUserSettings.MinMessages(childComplexity), true

	case "SongRequestsUserSettings.minWatchTime":
		if e.complexity.SongRequestsUserSettings.MinWatchTime == nil {
			break
		}

		return e.complexity.SongRequestsUserSettings.MinWatchTime(childComplexity), true

	case "SongRequestsUserTranslations.denied":
		if e.complexity.SongRequestsUserTranslations.Denied == nil {
			break
		}

		return e.complexity.SongRequestsUserTranslations.Denied(childComplexity), true

	case "SongRequestsUserTranslations.maxRequests":
		if e.complexity.SongRequestsUserTranslations.MaxRequests == nil {
			break
		}

		return e.complexity.SongRequestsUserTranslations.MaxRequests(childComplexity), true

	case "SongRequestsUserTranslations.minFollow":
		if e.complexity.SongRequestsUserTranslations.MinFollow == nil {
			break
		}

		return e.complexity.SongRequestsUserTranslations.MinFollow(childComplexity), true

	case "SongRequestsUserTranslations.minMessages":
		if e.complexity.SongRequestsUserTranslations.MinMessages == nil {
			break
		}

		return e.complexity.SongRequestsUserTranslations.MinMessages(childComplexity), true

	case "SongRequestsUserTranslations.minWatched":
		if e.complexity.SongRequestsUserTranslations.MinWatched == nil {
			break
		}

		return e.complexity.SongRequestsUserTranslations.MinWatched(childComplexity), true

	case "Subscription.auditLog":
		if e.complexity.Subscription.AuditLog == nil {
			break
		}

		return e.complexity.Subscription.AuditLog(childComplexity), true

	case "Subscription.chatOverlaySettings":
		if e.complexity.Subscription.ChatOverlaySettings == nil {
			break
		}

		args, err := ec.field_Subscription_chatOverlaySettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.ChatOverlaySettings(childComplexity, args["id"].(string), args["apiKey"].(string)), true

	case "Subscription.dashboardStats":
		if e.complexity.Subscription.DashboardStats == nil {
			break
		}

		return e.complexity.Subscription.DashboardStats(childComplexity), true

	case "Subscription.dashboardWidgetsEvents":
		if e.complexity.Subscription.DashboardWidgetsEvents == nil {
			break
		}

		return e.complexity.Subscription.DashboardWidgetsEvents(childComplexity), true

	case "Subscription.newNotification":
		if e.complexity.Subscription.NewNotification == nil {
			break
		}

		return e.complexity.Subscription.NewNotification(childComplexity), true

	case "Subscription.nowPlayingCurrentTrack":
		if e.complexity.Subscription.NowPlayingCurrentTrack == nil {
			break
		}

		args, err := ec.field_Subscription_nowPlayingCurrentTrack_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.NowPlayingCurrentTrack(childComplexity, args["apiKey"].(string)), true

	case "Subscription.nowPlayingOverlaySettings":
		if e.complexity.Subscription.NowPlayingOverlaySettings == nil {
			break
		}

		args, err := ec.field_Subscription_nowPlayingOverlaySettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.NowPlayingOverlaySettings(childComplexity, args["id"].(string), args["apiKey"].(string)), true

	case "Timer.enabled":
		if e.complexity.Timer.Enabled == nil {
			break
		}

		return e.complexity.Timer.Enabled(childComplexity), true

	case "Timer.id":
		if e.complexity.Timer.ID == nil {
			break
		}

		return e.complexity.Timer.ID(childComplexity), true

	case "Timer.messageInterval":
		if e.complexity.Timer.MessageInterval == nil {
			break
		}

		return e.complexity.Timer.MessageInterval(childComplexity), true

	case "Timer.name":
		if e.complexity.Timer.Name == nil {
			break
		}

		return e.complexity.Timer.Name(childComplexity), true

	case "Timer.responses":
		if e.complexity.Timer.Responses == nil {
			break
		}

		return e.complexity.Timer.Responses(childComplexity), true

	case "Timer.timeInterval":
		if e.complexity.Timer.TimeInterval == nil {
			break
		}

		return e.complexity.Timer.TimeInterval(childComplexity), true

	case "TimerResponse.id":
		if e.complexity.TimerResponse.ID == nil {
			break
		}

		return e.complexity.TimerResponse.ID(childComplexity), true

	case "TimerResponse.isAnnounce":
		if e.complexity.TimerResponse.IsAnnounce == nil {
			break
		}

		return e.complexity.TimerResponse.IsAnnounce(childComplexity), true

	case "TimerResponse.text":
		if e.complexity.TimerResponse.Text == nil {
			break
		}

		return e.complexity.TimerResponse.Text(childComplexity), true

	case "TwirAdminUser.apiKey":
		if e.complexity.TwirAdminUser.APIKey == nil {
			break
		}

		return e.complexity.TwirAdminUser.APIKey(childComplexity), true

	case "TwirAdminUser.id":
		if e.complexity.TwirAdminUser.ID == nil {
			break
		}

		return e.complexity.TwirAdminUser.ID(childComplexity), true

	case "TwirAdminUser.isBanned":
		if e.complexity.TwirAdminUser.IsBanned == nil {
			break
		}

		return e.complexity.TwirAdminUser.IsBanned(childComplexity), true

	case "TwirAdminUser.isBotAdmin":
		if e.complexity.TwirAdminUser.IsBotAdmin == nil {
			break
		}

		return e.complexity.TwirAdminUser.IsBotAdmin(childComplexity), true

	case "TwirAdminUser.isBotEnabled":
		if e.complexity.TwirAdminUser.IsBotEnabled == nil {
			break
		}

		return e.complexity.TwirAdminUser.IsBotEnabled(childComplexity), true

	case "TwirAdminUser.isBotModerator":
		if e.complexity.TwirAdminUser.IsBotModerator == nil {
			break
		}

		return e.complexity.TwirAdminUser.IsBotModerator(childComplexity), true

	case "TwirAdminUser.twitchProfile":
		if e.complexity.TwirAdminUser.TwitchProfile == nil {
			break
		}

		return e.complexity.TwirAdminUser.TwitchProfile(childComplexity), true

	case "TwirStats.channels":
		if e.complexity.TwirStats.Channels == nil {
			break
		}

		return e.complexity.TwirStats.Channels(childComplexity), true

	case "TwirStats.createdCommands":
		if e.complexity.TwirStats.CreatedCommands == nil {
			break
		}

		return e.complexity.TwirStats.CreatedCommands(childComplexity), true

	case "TwirStats.messages":
		if e.complexity.TwirStats.Messages == nil {
			break
		}

		return e.complexity.TwirStats.Messages(childComplexity), true

	case "TwirStats.streamers":
		if e.complexity.TwirStats.Streamers == nil {
			break
		}

		return e.complexity.TwirStats.Streamers(childComplexity), true

	case "TwirStats.usedCommands":
		if e.complexity.TwirStats.UsedCommands == nil {
			break
		}

		return e.complexity.TwirStats.UsedCommands(childComplexity), true

	case "TwirStats.usedEmotes":
		if e.complexity.TwirStats.UsedEmotes == nil {
			break
		}

		return e.complexity.TwirStats.UsedEmotes(childComplexity), true

	case "TwirStats.viewers":
		if e.complexity.TwirStats.Viewers == nil {
			break
		}

		return e.complexity.TwirStats.Viewers(childComplexity), true

	case "TwirStatsStreamer.followersCount":
		if e.complexity.TwirStatsStreamer.FollowersCount == nil {
			break
		}

		return e.complexity.TwirStatsStreamer.FollowersCount(childComplexity), true

	case "TwirStatsStreamer.id":
		if e.complexity.TwirStatsStreamer.ID == nil {
			break
		}

		return e.complexity.TwirStatsStreamer.ID(childComplexity), true

	case "TwirStatsStreamer.isLive":
		if e.complexity.TwirStatsStreamer.IsLive == nil {
			break
		}

		return e.complexity.TwirStatsStreamer.IsLive(childComplexity), true

	case "TwirStatsStreamer.isPartner":
		if e.complexity.TwirStatsStreamer.IsPartner == nil {
			break
		}

		return e.complexity.TwirStatsStreamer.IsPartner(childComplexity), true

	case "TwirStatsStreamer.twitchProfile":
		if e.complexity.TwirStatsStreamer.TwitchProfile == nil {
			break
		}

		return e.complexity.TwirStatsStreamer.TwitchProfile(childComplexity), true

	case "TwirTwitchChannelBadgeResponse.badges":
		if e.complexity.TwirTwitchChannelBadgeResponse.Badges == nil {
			break
		}

		return e.complexity.TwirTwitchChannelBadgeResponse.Badges(childComplexity), true

	case "TwirTwitchChannelReward.background_color":
		if e.complexity.TwirTwitchChannelReward.BackgroundColor == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.BackgroundColor(childComplexity), true

	case "TwirTwitchChannelReward.broadcaster_id":
		if e.complexity.TwirTwitchChannelReward.BroadcasterID == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.BroadcasterID(childComplexity), true

	case "TwirTwitchChannelReward.broadcaster_login":
		if e.complexity.TwirTwitchChannelReward.BroadcasterLogin == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.BroadcasterLogin(childComplexity), true

	case "TwirTwitchChannelReward.broadcaster_name":
		if e.complexity.TwirTwitchChannelReward.BroadcasterName == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.BroadcasterName(childComplexity), true

	case "TwirTwitchChannelReward.cooldown_expires_at":
		if e.complexity.TwirTwitchChannelReward.CooldownExpiresAt == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.CooldownExpiresAt(childComplexity), true

	case "TwirTwitchChannelReward.cost":
		if e.complexity.TwirTwitchChannelReward.Cost == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.Cost(childComplexity), true

	case "TwirTwitchChannelReward.global_cooldown_setting":
		if e.complexity.TwirTwitchChannelReward.GlobalCooldownSetting == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.GlobalCooldownSetting(childComplexity), true

	case "TwirTwitchChannelReward.id":
		if e.complexity.TwirTwitchChannelReward.ID == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.ID(childComplexity), true

	case "TwirTwitchChannelReward.image":
		if e.complexity.TwirTwitchChannelReward.Image == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.Image(childComplexity), true

	case "TwirTwitchChannelReward.is_enabled":
		if e.complexity.TwirTwitchChannelReward.IsEnabled == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.IsEnabled(childComplexity), true

	case "TwirTwitchChannelReward.is_in_stock":
		if e.complexity.TwirTwitchChannelReward.IsInStock == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.IsInStock(childComplexity), true

	case "TwirTwitchChannelReward.is_paused":
		if e.complexity.TwirTwitchChannelReward.IsPaused == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.IsPaused(childComplexity), true

	case "TwirTwitchChannelReward.is_user_input_required":
		if e.complexity.TwirTwitchChannelReward.IsUserInputRequired == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.IsUserInputRequired(childComplexity), true

	case "TwirTwitchChannelReward.max_per_stream_setting":
		if e.complexity.TwirTwitchChannelReward.MaxPerStreamSetting == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.MaxPerStreamSetting(childComplexity), true

	case "TwirTwitchChannelReward.max_per_user_per_stream_setting":
		if e.complexity.TwirTwitchChannelReward.MaxPerUserPerStreamSetting == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.MaxPerUserPerStreamSetting(childComplexity), true

	case "TwirTwitchChannelReward.prompt":
		if e.complexity.TwirTwitchChannelReward.Prompt == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.Prompt(childComplexity), true

	case "TwirTwitchChannelReward.redemptions_redeemed_current_stream":
		if e.complexity.TwirTwitchChannelReward.RedemptionsRedeemedCurrentStream == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.RedemptionsRedeemedCurrentStream(childComplexity), true

	case "TwirTwitchChannelReward.should_redemptions_skip_request_queue":
		if e.complexity.TwirTwitchChannelReward.ShouldRedemptionsSkipRequestQueue == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.ShouldRedemptionsSkipRequestQueue(childComplexity), true

	case "TwirTwitchChannelReward.title":
		if e.complexity.TwirTwitchChannelReward.Title == nil {
			break
		}

		return e.complexity.TwirTwitchChannelReward.Title(childComplexity), true

	case "TwirTwitchChannelRewardGlobalCooldownSetting.global_cooldown_seconds":
		if e.complexity.TwirTwitchChannelRewardGlobalCooldownSetting.GlobalCooldownSeconds == nil {
			break
		}

		return e.complexity.TwirTwitchChannelRewardGlobalCooldownSetting.GlobalCooldownSeconds(childComplexity), true

	case "TwirTwitchChannelRewardGlobalCooldownSetting.is_enabled":
		if e.complexity.TwirTwitchChannelRewardGlobalCooldownSetting.IsEnabled == nil {
			break
		}

		return e.complexity.TwirTwitchChannelRewardGlobalCooldownSetting.IsEnabled(childComplexity), true

	case "TwirTwitchChannelRewardImage.url_1x":
		if e.complexity.TwirTwitchChannelRewardImage.URL1x == nil {
			break
		}

		return e.complexity.TwirTwitchChannelRewardImage.URL1x(childComplexity), true

	case "TwirTwitchChannelRewardImage.url_2x":
		if e.complexity.TwirTwitchChannelRewardImage.URL2x == nil {
			break
		}

		return e.complexity.TwirTwitchChannelRewardImage.URL2x(childComplexity), true

	case "TwirTwitchChannelRewardImage.url_4x":
		if e.complexity.TwirTwitchChannelRewardImage.URL4x == nil {
			break
		}

		return e.complexity.TwirTwitchChannelRewardImage.URL4x(childComplexity), true

	case "TwirTwitchChannelRewardMaxPerStreamSetting.is_enabled":
		if e.complexity.TwirTwitchChannelRewardMaxPerStreamSetting.IsEnabled == nil {
			break
		}

		return e.complexity.TwirTwitchChannelRewardMaxPerStreamSetting.IsEnabled(childComplexity), true

	case "TwirTwitchChannelRewardMaxPerStreamSetting.max_per_stream":
		if e.complexity.TwirTwitchChannelRewardMaxPerStreamSetting.MaxPerStream == nil {
			break
		}

		return e.complexity.TwirTwitchChannelRewardMaxPerStreamSetting.MaxPerStream(childComplexity), true

	case "TwirTwitchChannelRewardMaxPerUserPerStreamSetting.is_enabled":
		if e.complexity.TwirTwitchChannelRewardMaxPerUserPerStreamSetting.IsEnabled == nil {
			break
		}

		return e.complexity.TwirTwitchChannelRewardMaxPerUserPerStreamSetting.IsEnabled(childComplexity), true

	case "TwirTwitchChannelRewardMaxPerUserPerStreamSetting.max_per_user_per_stream":
		if e.complexity.TwirTwitchChannelRewardMaxPerUserPerStreamSetting.MaxPerUserPerStream == nil {
			break
		}

		return e.complexity.TwirTwitchChannelRewardMaxPerUserPerStreamSetting.MaxPerUserPerStream(childComplexity), true

	case "TwirTwitchChannelRewardResponse.partnerOrAffiliate":
		if e.complexity.TwirTwitchChannelRewardResponse.PartnerOrAffiliate == nil {
			break
		}

		return e.complexity.TwirTwitchChannelRewardResponse.PartnerOrAffiliate(childComplexity), true

	case "TwirTwitchChannelRewardResponse.rewards":
		if e.complexity.TwirTwitchChannelRewardResponse.Rewards == nil {
			break
		}

		return e.complexity.TwirTwitchChannelRewardResponse.Rewards(childComplexity), true

	case "TwirTwitchGlobalBadgeResponse.badges":
		if e.complexity.TwirTwitchGlobalBadgeResponse.Badges == nil {
			break
		}

		return e.complexity.TwirTwitchGlobalBadgeResponse.Badges(childComplexity), true

	case "TwirUserTwitchInfo.description":
		if e.complexity.TwirUserTwitchInfo.Description == nil {
			break
		}

		return e.complexity.TwirUserTwitchInfo.Description(childComplexity), true

	case "TwirUserTwitchInfo.displayName":
		if e.complexity.TwirUserTwitchInfo.DisplayName == nil {
			break
		}

		return e.complexity.TwirUserTwitchInfo.DisplayName(childComplexity), true

	case "TwirUserTwitchInfo.id":
		if e.complexity.TwirUserTwitchInfo.ID == nil {
			break
		}

		return e.complexity.TwirUserTwitchInfo.ID(childComplexity), true

	case "TwirUserTwitchInfo.login":
		if e.complexity.TwirUserTwitchInfo.Login == nil {
			break
		}

		return e.complexity.TwirUserTwitchInfo.Login(childComplexity), true

	case "TwirUserTwitchInfo.notFound":
		if e.complexity.TwirUserTwitchInfo.NotFound == nil {
			break
		}

		return e.complexity.TwirUserTwitchInfo.NotFound(childComplexity), true

	case "TwirUserTwitchInfo.profileImageUrl":
		if e.complexity.TwirUserTwitchInfo.ProfileImageURL == nil {
			break
		}

		return e.complexity.TwirUserTwitchInfo.ProfileImageURL(childComplexity), true

	case "TwirUsersResponse.total":
		if e.complexity.TwirUsersResponse.Total == nil {
			break
		}

		return e.complexity.TwirUsersResponse.Total(childComplexity), true

	case "TwirUsersResponse.users":
		if e.complexity.TwirUsersResponse.Users == nil {
			break
		}

		return e.complexity.TwirUsersResponse.Users(childComplexity), true

	case "TwitchBadge.set_id":
		if e.complexity.TwitchBadge.SetID == nil {
			break
		}

		return e.complexity.TwitchBadge.SetID(childComplexity), true

	case "TwitchBadge.versions":
		if e.complexity.TwitchBadge.Versions == nil {
			break
		}

		return e.complexity.TwitchBadge.Versions(childComplexity), true

	case "TwitchBadgeVersion.id":
		if e.complexity.TwitchBadgeVersion.ID == nil {
			break
		}

		return e.complexity.TwitchBadgeVersion.ID(childComplexity), true

	case "TwitchBadgeVersion.image_url_1x":
		if e.complexity.TwitchBadgeVersion.ImageURL1x == nil {
			break
		}

		return e.complexity.TwitchBadgeVersion.ImageURL1x(childComplexity), true

	case "TwitchBadgeVersion.image_url_2x":
		if e.complexity.TwitchBadgeVersion.ImageURL2x == nil {
			break
		}

		return e.complexity.TwitchBadgeVersion.ImageURL2x(childComplexity), true

	case "TwitchBadgeVersion.image_url_4x":
		if e.complexity.TwitchBadgeVersion.ImageURL4x == nil {
			break
		}

		return e.complexity.TwitchBadgeVersion.ImageURL4x(childComplexity), true

	case "TwitchCategory.boxArtUrl":
		if e.complexity.TwitchCategory.BoxArtURL == nil {
			break
		}

		return e.complexity.TwitchCategory.BoxArtURL(childComplexity), true

	case "TwitchCategory.id":
		if e.complexity.TwitchCategory.ID == nil {
			break
		}

		return e.complexity.TwitchCategory.ID(childComplexity), true

	case "TwitchCategory.name":
		if e.complexity.TwitchCategory.Name == nil {
			break
		}

		return e.complexity.TwitchCategory.Name(childComplexity), true

	case "TwitchRedemption.channelId":
		if e.complexity.TwitchRedemption.ChannelID == nil {
			break
		}

		return e.complexity.TwitchRedemption.ChannelID(childComplexity), true

	case "TwitchRedemption.id":
		if e.complexity.TwitchRedemption.ID == nil {
			break
		}

		return e.complexity.TwitchRedemption.ID(childComplexity), true

	case "TwitchRedemption.prompt":
		if e.complexity.TwitchRedemption.Prompt == nil {
			break
		}

		return e.complexity.TwitchRedemption.Prompt(childComplexity), true

	case "TwitchRedemption.redeemedAt":
		if e.complexity.TwitchRedemption.RedeemedAt == nil {
			break
		}

		return e.complexity.TwitchRedemption.RedeemedAt(childComplexity), true

	case "TwitchRedemption.reward":
		if e.complexity.TwitchRedemption.Reward == nil {
			break
		}

		return e.complexity.TwitchRedemption.Reward(childComplexity), true

	case "TwitchRedemption.user":
		if e.complexity.TwitchRedemption.User == nil {
			break
		}

		return e.complexity.TwitchRedemption.User(childComplexity), true

	case "TwitchRedemptionResponse.redemptions":
		if e.complexity.TwitchRedemptionResponse.Redemptions == nil {
			break
		}

		return e.complexity.TwitchRedemptionResponse.Redemptions(childComplexity), true

	case "TwitchRedemptionResponse.total":
		if e.complexity.TwitchRedemptionResponse.Total == nil {
			break
		}

		return e.complexity.TwitchRedemptionResponse.Total(childComplexity), true

	case "TwitchReward.backgroundColor":
		if e.complexity.TwitchReward.BackgroundColor == nil {
			break
		}

		return e.complexity.TwitchReward.BackgroundColor(childComplexity), true

	case "TwitchReward.cost":
		if e.complexity.TwitchReward.Cost == nil {
			break
		}

		return e.complexity.TwitchReward.Cost(childComplexity), true

	case "TwitchReward.enabled":
		if e.complexity.TwitchReward.Enabled == nil {
			break
		}

		return e.complexity.TwitchReward.Enabled(childComplexity), true

	case "TwitchReward.id":
		if e.complexity.TwitchReward.ID == nil {
			break
		}

		return e.complexity.TwitchReward.ID(childComplexity), true

	case "TwitchReward.imageUrls":
		if e.complexity.TwitchReward.ImageUrls == nil {
			break
		}

		return e.complexity.TwitchReward.ImageUrls(childComplexity), true

	case "TwitchReward.title":
		if e.complexity.TwitchReward.Title == nil {
			break
		}

		return e.complexity.TwitchReward.Title(childComplexity), true

	case "TwitchReward.usedTimes":
		if e.complexity.TwitchReward.UsedTimes == nil {
			break
		}

		return e.complexity.TwitchReward.UsedTimes(childComplexity), true

	case "UserNotification.createdAt":
		if e.complexity.UserNotification.CreatedAt == nil {
			break
		}

		return e.complexity.UserNotification.CreatedAt(childComplexity), true

	case "UserNotification.editorJsJson":
		if e.complexity.UserNotification.EditorJsJSON == nil {
			break
		}

		return e.complexity.UserNotification.EditorJsJSON(childComplexity), true

	case "UserNotification.id":
		if e.complexity.UserNotification.ID == nil {
			break
		}

		return e.complexity.UserNotification.ID(childComplexity), true

	case "UserNotification.text":
		if e.complexity.UserNotification.Text == nil {
			break
		}

		return e.complexity.UserNotification.Text(childComplexity), true

	case "UserNotification.userId":
		if e.complexity.UserNotification.UserID == nil {
			break
		}

		return e.complexity.UserNotification.UserID(childComplexity), true

	case "Variable.description":
		if e.complexity.Variable.Description == nil {
			break
		}

		return e.complexity.Variable.Description(childComplexity), true

	case "Variable.evalValue":
		if e.complexity.Variable.EvalValue == nil {
			break
		}

		return e.complexity.Variable.EvalValue(childComplexity), true

	case "Variable.id":
		if e.complexity.Variable.ID == nil {
			break
		}

		return e.complexity.Variable.ID(childComplexity), true

	case "Variable.name":
		if e.complexity.Variable.Name == nil {
			break
		}

		return e.complexity.Variable.Name(childComplexity), true

	case "Variable.response":
		if e.complexity.Variable.Response == nil {
			break
		}

		return e.complexity.Variable.Response(childComplexity), true

	case "Variable.type":
		if e.complexity.Variable.Type == nil {
			break
		}

		return e.complexity.Variable.Type(childComplexity), true

	case "VotebanGame.banMessage":
		if e.complexity.VotebanGame.BanMessage == nil {
			break
		}

		return e.complexity.VotebanGame.BanMessage(childComplexity), true

	case "VotebanGame.banMessageModerators":
		if e.complexity.VotebanGame.BanMessageModerators == nil {
			break
		}

		return e.complexity.VotebanGame.BanMessageModerators(childComplexity), true

	case "VotebanGame.chatVotesWordsNegative":
		if e.complexity.VotebanGame.ChatVotesWordsNegative == nil {
			break
		}

		return e.complexity.VotebanGame.ChatVotesWordsNegative(childComplexity), true

	case "VotebanGame.chatVotesWordsPositive":
		if e.complexity.VotebanGame.ChatVotesWordsPositive == nil {
			break
		}

		return e.complexity.VotebanGame.ChatVotesWordsPositive(childComplexity), true

	case "VotebanGame.enabled":
		if e.complexity.VotebanGame.Enabled == nil {
			break
		}

		return e.complexity.VotebanGame.Enabled(childComplexity), true

	case "VotebanGame.initMessage":
		if e.complexity.VotebanGame.InitMessage == nil {
			break
		}

		return e.complexity.VotebanGame.InitMessage(childComplexity), true

	case "VotebanGame.neededVotes":
		if e.complexity.VotebanGame.NeededVotes == nil {
			break
		}

		return e.complexity.VotebanGame.NeededVotes(childComplexity), true

	case "VotebanGame.surviveMessage":
		if e.complexity.VotebanGame.SurviveMessage == nil {
			break
		}

		return e.complexity.VotebanGame.SurviveMessage(childComplexity), true

	case "VotebanGame.surviveMessageModerators":
		if e.complexity.VotebanGame.SurviveMessageModerators == nil {
			break
		}

		return e.complexity.VotebanGame.SurviveMessageModerators(childComplexity), true

	case "VotebanGame.timeoutModerators":
		if e.complexity.VotebanGame.TimeoutModerators == nil {
			break
		}

		return e.complexity.VotebanGame.TimeoutModerators(childComplexity), true

	case "VotebanGame.timeoutSeconds":
		if e.complexity.VotebanGame.TimeoutSeconds == nil {
			break
		}

		return e.complexity.VotebanGame.TimeoutSeconds(childComplexity), true

	case "VotebanGame.voteDuration":
		if e.complexity.VotebanGame.VoteDuration == nil {
			break
		}

		return e.complexity.VotebanGame.VoteDuration(childComplexity), true

	case "VotebanGame.votingMode":
		if e.complexity.VotebanGame.VotingMode == nil {
			break
		}

		return e.complexity.VotebanGame.VotingMode(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAdminAuditLogsInput,
		ec.unmarshalInputAdminNotificationsParams,
		ec.unmarshalInputChannelAlertCreateInput,
		ec.unmarshalInputChannelAlertUpdateInput,
		ec.unmarshalInputChatAlertsBanInput,
		ec.unmarshalInputChatAlertsChatClearedInput,
		ec.unmarshalInputChatAlertsCheersInput,
		ec.unmarshalInputChatAlertsCountedMessageInput,
		ec.unmarshalInputChatAlertsDonationsInput,
		ec.unmarshalInputChatAlertsFirstUserMessageInput,
		ec.unmarshalInputChatAlertsFollowersSettingsInput,
		ec.unmarshalInputChatAlertsInput,
		ec.unmarshalInputChatAlertsMessageDeleteInput,
		ec.unmarshalInputChatAlertsMessageInput,
		ec.unmarshalInputChatAlertsRaidsInput,
		ec.unmarshalInputChatAlertsRedemptionsInput,
		ec.unmarshalInputChatAlertsStreamOfflineInput,
		ec.unmarshalInputChatAlertsStreamOnlineInput,
		ec.unmarshalInputChatAlertsSubscribersInput,
		ec.unmarshalInputChatAlertsUnbanRequestCreateInput,
		ec.unmarshalInputChatAlertsUnbanRequestResolveInput,
		ec.unmarshalInputChatOverlayMutateOpts,
		ec.unmarshalInputCommandsCreateOpts,
		ec.unmarshalInputCommandsGroupsCreateOpts,
		ec.unmarshalInputCommandsGroupsUpdateOpts,
		ec.unmarshalInputCommandsUpdateOpts,
		ec.unmarshalInputCommunityUsersOpts,
		ec.unmarshalInputCreateOrUpdateCommandResponseInput,
		ec.unmarshalInputCreateOrUpdateRoleSettingsInput,
		ec.unmarshalInputDuelGameOpts,
		ec.unmarshalInputEightBallGameOpts,
		ec.unmarshalInputEmotesStatisticEmoteDetailedOpts,
		ec.unmarshalInputEmotesStatisticsOpts,
		ec.unmarshalInputEventsubSubscribeInput,
		ec.unmarshalInputGreetingsCreateInput,
		ec.unmarshalInputGreetingsUpdateInput,
		ec.unmarshalInputKeywordCreateInput,
		ec.unmarshalInputKeywordUpdateInput,
		ec.unmarshalInputNotificationUpdateOpts,
		ec.unmarshalInputNowPlayingOverlayMutateOpts,
		ec.unmarshalInputRolesCreateOrUpdateOpts,
		ec.unmarshalInputRussianRouletteGameOpts,
		ec.unmarshalInputSeppukuGameOpts,
		ec.unmarshalInputSocialLinkInput,
		ec.unmarshalInputSongRequestsChannelTranslationsOpts,
		ec.unmarshalInputSongRequestsDenyListOpts,
		ec.unmarshalInputSongRequestsSearchChannelOrVideoOpts,
		ec.unmarshalInputSongRequestsSettingsOpts,
		ec.unmarshalInputSongRequestsSongSettingsOpts,
		ec.unmarshalInputSongRequestsSongTranslationsOpts,
		ec.unmarshalInputSongRequestsTranslationsOpts,
		ec.unmarshalInputSongRequestsUserSettingsOpts,
		ec.unmarshalInputSongRequestsUserTranslationsOpts,
		ec.unmarshalInputTimerCreateInput,
		ec.unmarshalInputTimerResponseCreateInput,
		ec.unmarshalInputTimerResponseUpdateInput,
		ec.unmarshalInputTimerUpdateInput,
		ec.unmarshalInputTwirBadgeCreateOpts,
		ec.unmarshalInputTwirBadgeUpdateOpts,
		ec.unmarshalInputTwirUsersSearchParams,
		ec.unmarshalInputTwitchRedemptionsOpts,
		ec.unmarshalInputUserUpdatePublicSettingsInput,
		ec.unmarshalInputUserUpdateSettingsInput,
		ec.unmarshalInputVariableCreateInput,
		ec.unmarshalInputVariableUpdateInput,
		ec.unmarshalInputVotebanGameOpts,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../../../schema/admin-actions.graphqls", Input: `extend type Mutation {
	dropAllAuthSessions: Boolean! @isAuthenticated @isAdmin
	eventsubSubscribe(opts: EventsubSubscribeInput!): Boolean! @isAuthenticated @isAdmin
}

input EventsubSubscribeInput {
	type: String! @validate(constraint: "max=50")
	version: String! @validate(constraint: "max=50")
	condition: EventsubSubscribeConditionInput!
}

enum EventsubSubscribeConditionInput {
	CHANNEL
	USER
	CHANNEL_WITH_MODERATOR_ID
	CHANNEL_WITH_BOT_ID
}
`, BuiltIn: false},
	{Name: "../../../../schema/admin-audit-logs.graphqls", Input: `extend type Query {
  adminAuditLogs(input: AdminAuditLogsInput!): AdminAuditLogResponse!
    @isAuthenticated
    @isAdmin
}

input AdminAuditLogsInput {
  system: [AuditLogSystem!]
  objectId: String
  userId: String
  channelId: String
  operationType: [AuditOperationType!]
  page: Int
  perPage: Int
}

type AdminAuditLogResponse {
  logs: [AdminAuditLog!]!
  total: Int!
}

type AdminAuditLog {
  id: UUID!
  system: AuditLogSystem!
  operationType: AuditOperationType!
  oldValue: String
  newValue: String
  objectId: String
  userId: String
  channelId: String
  createdAt: Time!

  user: TwirUserTwitchInfo @goField(forceResolver: true)
  channel: TwirUserTwitchInfo @goField(forceResolver: true)
}

enum AuditOperationType {
  CREATE
  UPDATE
  DELETE
}
`, BuiltIn: false},
	{Name: "../../../../schema/admin-badges.graphqls", Input: `extend type Query {
	"""
	Twir badges
	"""
	twirBadges: [Badge!]!
}

extend type Mutation {
	badgesDelete(id: ID!): Boolean! @isAuthenticated @isAdmin
	badgesUpdate(id: ID!, opts: TwirBadgeUpdateOpts!): Badge! @isAuthenticated @isAdmin
	badgesCreate(opts: TwirBadgeCreateOpts!): Badge! @isAuthenticated @isAdmin
	badgesAddUser(id: ID!, userId: String!): Boolean! @isAuthenticated @isAdmin
	badgesRemoveUser(id: ID!, userId: String!): Boolean! @isAuthenticated @isAdmin
}

type Badge {
	id: ID!
	name: String!
	createdAt: String!
	fileUrl: String!
	enabled: Boolean!
	"""
	IDS of users which has this badge
	"""
	users: [String!]
	ffzSlot: Int!
}

input TwirBadgeUpdateOpts {
	name: String @validate(constraint: "max=200")
	file: Upload
	enabled: Boolean
	ffzSlot: Int @validate(constraint: "max=999999")
}

input TwirBadgeCreateOpts {
	name: String! @validate(constraint: "max=500")
	file: Upload!
	enabled: Boolean
	ffzSlot: Int! @validate(constraint: "max=999999")
}
`, BuiltIn: false},
	{Name: "../../../../schema/admin-users.graphqls", Input: `extend type Query {
	"""
	finding users on twitch with filter does they exists in database
	"""
	twirUsers(opts: TwirUsersSearchParams!): TwirUsersResponse! @isAuthenticated @isAdmin
}

extend type Mutation {
	switchUserBan(userId: ID!): Boolean! @isAuthenticated @isAdmin
	switchUserAdmin(userId: ID!): Boolean! @isAuthenticated @isAdmin
}

type TwirAdminUser implements TwirUser {
	id: ID!
	twitchProfile: TwirUserTwitchInfo! @goField(forceResolver: true)
	isBotAdmin: Boolean!
	isBanned: Boolean!
	isBotModerator: Boolean!
	isBotEnabled: Boolean!
	apiKey: String!
}

input TwirUsersSearchParams {
	search: String
	page: Int
	perPage: Int
	isBotAdmin: Boolean
	isBanned: Boolean
	isBotEnabled: Boolean
	badges: [String!]
}

type TwirUsersResponse {
	users: [TwirAdminUser!]!
	total: Int!
}
`, BuiltIn: false},
	{Name: "../../../../schema/alerts.graphqls", Input: `extend type Query {
	channelAlerts: [ChannelAlert!]! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: VIEW_ALERTS)
}

extend type Mutation {
	channelAlertsCreate(input: ChannelAlertCreateInput!): ChannelAlert! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_ALERTS)
	channelAlertsUpdate(id: ID!, input: ChannelAlertUpdateInput!): ChannelAlert! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_ALERTS)
	channelAlertsDelete(id: ID!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_ALERTS)
}

type ChannelAlert {
	id: ID!
	name: String!
	audioId: ID
	audioVolume: Int
	commandIds: [ID!]
	rewardIds: [ID!]
	greetingsIds: [ID!]
	keywordsIds: [ID!]
}

input ChannelAlertUpdateInput {
	name: String
	audioId: ID
	audioVolume: Int @validate(constraint: "min=0,max=100")
	commandIds: [ID!] @validate(constraint: "dive,max=500")
	rewardIds: [ID!] @validate(constraint: "dive,max=500")
	greetingsIds: [ID!] @validate(constraint: "dive,max=500")
	keywordsIds: [ID!] @validate(constraint: "dive,max=500")
}

input ChannelAlertCreateInput {
	name: String! @validate(constraint: "max=500")
	audioId: ID
	audioVolume: Int @validate(constraint: "min=0,max=100")
	commandIds: [ID!] @validate(constraint: "dive,max=500")
	rewardIds: [ID!] @validate(constraint: "dive,max=500")
	greetingsIds: [ID!] @validate(constraint: "dive,max=500")
	keywordsIds: [ID!] @validate(constraint: "dive,max=500")
}
`, BuiltIn: false},
	{Name: "../../../../schema/chat-alerts.graphqls", Input: `extend type Query {
	chatAlerts: ChatAlerts @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: VIEW_ALERTS)
}

extend type Mutation {
	updateChatAlerts(input: ChatAlertsInput!): ChatAlerts! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_ALERTS)
}

type ChatAlerts {
	followers: ChatAlertsFollowersSettings
	raids: ChatAlertsRaids
	donations: ChatAlertsDonations
	subscribers: ChatAlertsSubscribers
	cheers: ChatAlertsCheers
	redemptions: ChatAlertsRedemptions
	firstUserMessage: ChatAlertsFirstUserMessage
	streamOnline: ChatAlertsStreamOnline
	streamOffline: ChatAlertsStreamOffline
	chatCleared: ChatAlertsChatCleared
	ban: ChatAlertsBan
	unbanRequestCreate: ChatAlertsUnbanRequestCreate
	unbanRequestResolve: ChatAlertsUnbanRequestResolve
	messageDelete: ChatAlertsMessageDelete
}

union ChatAlertsSettings = ChatAlertsFollowersSettings | ChatAlertsRaids | ChatAlertsDonations | ChatAlertsSubscribers | ChatAlertsCheers | ChatAlertsRedemptions | ChatAlertsFirstUserMessage | ChatAlertsStreamOnline | ChatAlertsStreamOffline | ChatAlertsChatCleared | ChatAlertsBan | ChatAlertsUnbanRequestCreate | ChatAlertsUnbanRequestResolve | ChatAlertsMessageDelete

type ChatAlertsCountedMessage {
	count: Int!
	text: String!
}

type ChatAlertsMessage {
	text: String!
}

type ChatAlertsFollowersSettings {
	enabled: Boolean!
	messages: [ChatAlertsMessage!]!
	cooldown: Int!
}

type ChatAlertsRaids {
	enabled: Boolean!
	messages: [ChatAlertsCountedMessage!]!
	cooldown: Int!
}

type ChatAlertsDonations {
	enabled: Boolean!
	messages: [ChatAlertsCountedMessage!]!
	cooldown: Int!
}

type ChatAlertsSubscribers {
	enabled: Boolean!
	messages: [ChatAlertsCountedMessage!]!
	cooldown: Int!
}

type ChatAlertsCheers {
	enabled: Boolean!
	messages: [ChatAlertsCountedMessage!]!
	cooldown: Int!
}

type ChatAlertsRedemptions {
	enabled: Boolean!
	messages: [ChatAlertsMessage!]!
	cooldown: Int!
	ignoredRewardsIds: [String!]!
}

type ChatAlertsFirstUserMessage {
	enabled: Boolean!
	messages: [ChatAlertsMessage!]!
	cooldown: Int!
}

type ChatAlertsStreamOnline {
	enabled: Boolean!
	messages: [ChatAlertsMessage!]!
	cooldown: Int!
}

type ChatAlertsStreamOffline {
	enabled: Boolean!
	messages: [ChatAlertsMessage!]!
	cooldown: Int!
}

type ChatAlertsChatCleared {
	enabled: Boolean!
	messages: [ChatAlertsMessage!]!
	cooldown: Int!
}

type ChatAlertsMessageDelete {
	enabled: Boolean!
	messages: [ChatAlertsMessage!]!
	cooldown: Int!
}

type ChatAlertsBan {
	enabled: Boolean!
	messages: [ChatAlertsCountedMessage!]!
	ignoreTimeoutFrom: [String!]!
	cooldown: Int!
}

type ChatAlertsUnbanRequestCreate {
	enabled: Boolean!
	messages: [ChatAlertsMessage!]!
	cooldown: Int!
}

type ChatAlertsUnbanRequestResolve {
	enabled: Boolean!
	messages: [ChatAlertsMessage!]!
	cooldown: Int!
}

input ChatAlertsInput {
	followers: ChatAlertsFollowersSettingsInput
	raids: ChatAlertsRaidsInput
	donations: ChatAlertsDonationsInput
	subscribers: ChatAlertsSubscribersInput
	cheers: ChatAlertsCheersInput
	redemptions: ChatAlertsRedemptionsInput
	firstUserMessage: ChatAlertsFirstUserMessageInput
	streamOnline: ChatAlertsStreamOnlineInput
	streamOffline: ChatAlertsStreamOfflineInput
	chatCleared: ChatAlertsChatClearedInput
	ban: ChatAlertsBanInput
	unbanRequestCreate: ChatAlertsUnbanRequestCreateInput
	unbanRequestResolve: ChatAlertsUnbanRequestResolveInput
	messageDelete: ChatAlertsMessageDeleteInput
}

input ChatAlertsFollowersSettingsInput {
	enabled: Boolean
	messages: [ChatAlertsMessageInput]
	cooldown: Int
}

input ChatAlertsRaidsInput {
	enabled: Boolean
	messages: [ChatAlertsCountedMessageInput]
	cooldown: Int
}

input ChatAlertsDonationsInput {
	enabled: Boolean
	messages: [ChatAlertsCountedMessageInput]
	cooldown: Int
}

input ChatAlertsSubscribersInput {
	enabled: Boolean
	messages: [ChatAlertsCountedMessageInput]
	cooldown: Int
}

input ChatAlertsCheersInput {
	enabled: Boolean
	messages: [ChatAlertsCountedMessageInput]
	cooldown: Int
}

input ChatAlertsRedemptionsInput {
	enabled: Boolean
	messages: [ChatAlertsMessageInput]
	cooldown: Int
	ignoredRewardsIds: [String!]
}

input ChatAlertsFirstUserMessageInput {
	enabled: Boolean
	messages: [ChatAlertsMessageInput]
	cooldown: Int
}

input ChatAlertsStreamOnlineInput {
	enabled: Boolean
	messages: [ChatAlertsMessageInput]
	cooldown: Int
}

input ChatAlertsStreamOfflineInput {
	enabled: Boolean
	messages: [ChatAlertsMessageInput]
	cooldown: Int
}

input ChatAlertsChatClearedInput {
	enabled: Boolean
	messages: [ChatAlertsMessageInput]
	cooldown: Int
}

input ChatAlertsBanInput {
	enabled: Boolean
	messages: [ChatAlertsCountedMessageInput]
	ignoreTimeoutFrom: [String]
	cooldown: Int
}

input ChatAlertsUnbanRequestCreateInput {
	enabled: Boolean
	messages: [ChatAlertsMessageInput]
	cooldown: Int
}

input ChatAlertsUnbanRequestResolveInput {
	enabled: Boolean
	messages: [ChatAlertsMessageInput]
	cooldown: Int
}

input ChatAlertsMessageInput {
	text: String @validate(constraint: "max=500")
}

input ChatAlertsCountedMessageInput {
	count: Int
	text: String @validate(constraint: "max=500")
}

input ChatAlertsMessageDeleteInput {
	enabled: Boolean
	messages: [ChatAlertsMessageInput]
	cooldown: Int
}
`, BuiltIn: false},
	{Name: "../../../../schema/commands-groups.graphqls", Input: `extend type Query {
	commandsGroups: [CommandGroup!]! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: VIEW_COMMANDS)
}

extend type Mutation {
	commandsGroupsCreate(opts: CommandsGroupsCreateOpts!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_COMMANDS)
	commandsGroupsUpdate(id: ID!, opts: CommandsGroupsUpdateOpts!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_COMMANDS)
	commandsGroupsRemove(id: ID!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_COMMANDS)
}

type CommandGroup {
	id: ID!
	name: String!
	color: String!
}

input CommandsGroupsCreateOpts {
	name: String! @validate(constraint: "max=50")
	color: String! @validate(constraint: "max=50")
}

input CommandsGroupsUpdateOpts {
	name: String @validate(constraint: "max=50")
	color: String @validate(constraint: "max=50")
}
`, BuiltIn: false},
	{Name: "../../../../schema/commands.graphqls", Input: `extend type Query {
	commands: [Command!]! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: VIEW_COMMANDS)
	commandsPublic(channelId: ID!): [PublicCommand!]!
}

extend type Mutation {
	commandsCreate(opts: CommandsCreateOpts!): CommandCreatePayload! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_COMMANDS)
	commandsUpdate(id: ID!, opts: CommandsUpdateOpts!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_COMMANDS)
	commandsRemove(id: ID!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_COMMANDS)
}

type Command {
	id: ID!
	name: String!
	description: String!
	aliases: [String!]!
	responses: [CommandResponse!]!
	cooldown: Int!
	cooldownType: String!
	enabled: Boolean!
	visible: Boolean!
	default: Boolean!
	defaultName: String
	module: String!
	isReply: Boolean!
	keepResponsesOrder: Boolean!
	deniedUsersIds: [String!]!
	allowedUsersIds: [String!]!
	rolesIds: [String!]!
	onlineOnly: Boolean!
	cooldownRolesIds: [String!]!
	enabledCategories: [String!]!
	requiredWatchTime: Int!
	requiredMessages: Int!
	requiredUsedChannelPoints: Int!
	groupId: String
	group: CommandGroup
	expiresAt: Int
	expiresType: CommandExpiresType
}

type CommandResponse {
	id: ID!
	commandId: ID!
	text: String!
	twitchCategoriesIds: [String!]!
	twitchCategories: [TwitchCategory!]! @goField(forceResolver: true)
}

type PublicCommand {
	name: String!
	description: String!
	aliases: [String!]!
	responses: [String!]!
	cooldown: Int!
	cooldownType: String!
	module: String!
	permissions: [PublicCommandPermission!]!
}

type PublicCommandPermission {
	name: String!
	type: String!
}

input CommandsCreateOpts {
	name: String! @validate(constraint: "max=50")
	description: String! @validate(constraint: "max=500")
	aliases: [String!]! @validate(constraint: "dive,max=50,min=1")
	responses: [CreateOrUpdateCommandResponseInput!]! @validate(constraint: "max=3")
	cooldown: Int! @validate(constraint: "max=90000")
	cooldownType: String!
	enabled: Boolean!
	visible: Boolean!
	isReply: Boolean!
	keepResponsesOrder: Boolean!
	deniedUsersIds: [String!]! @validate(constraint: "dive,max=500")
	allowedUsersIds: [String!]! @validate(constraint: "dive,max=500")
	rolesIds: [String!]! @validate(constraint: "dive,max=500")
	onlineOnly: Boolean!
	cooldownRolesIds: [String!]! @validate(constraint: "dive,max=500")
	enabledCategories: [String!]! @validate(constraint: "dive,max=500")
	requiredWatchTime: Int!
	requiredMessages: Int!
	requiredUsedChannelPoints: Int!
	groupId: String @validate(constraint: "max=500,omitempty")
	expiresAt: Int
	expiresType: CommandExpiresType
}

input CommandsUpdateOpts {
	name: String @validate(constraint: "max=50")
	description: String @validate(constraint: "max=500")
	aliases: [String!] @validate(constraint: "dive,max=50,min=1")
	responses: [CreateOrUpdateCommandResponseInput!] @validate(constraint: "max=3")
	cooldown: Int
	cooldownType: String
	enabled: Boolean
	visible: Boolean
	isReply: Boolean
	keepResponsesOrder: Boolean
	deniedUsersIds: [String!] @validate(constraint: "dive,max=500")
	allowedUsersIds: [String!] @validate(constraint: "dive,max=500")
	rolesIds: [String!]
	onlineOnly: Boolean
	cooldownRolesIds: [String!] @validate(constraint: "dive,max=500")
	enabledCategories: [String!] @validate(constraint: "dive,max=500")
	requiredWatchTime: Int
	requiredMessages: Int
	requiredUsedChannelPoints: Int
	groupId: String @validate(constraint: "max=500,omitempty")
	expiresAt: Int
	expiresType: CommandExpiresType
}

input CreateOrUpdateCommandResponseInput {
	text: String! @validate(constraint: "max=500")
	twitchCategoriesIds: [String!]! @validate(constraint: "max=500")
}

enum CommandExpiresType {
	DISABLE
	DELETE
}

type CommandCreatePayload {
	id: String!
}
`, BuiltIn: false},
	{Name: "../../../../schema/community-redemptions.graphqls", Input: `extend type Query {
	rewardsRedemptionsHistory(opts: TwitchRedemptionsOpts!): TwitchRedemptionResponse! @isAuthenticated
}

type TwitchRedemptionResponse {
	redemptions: [TwitchRedemption!]!
	total: Int!
}

type TwitchRedemption {
	id: ID!
	channelId: String!
	user: TwirUserTwitchInfo! @goField(forceResolver: true)
	reward: TwitchReward!
	redeemedAt: Time!
	prompt: String
}

input TwitchRedemptionsOpts {
	byChannelId: ID
	userSearch: String
	page: Int
	perPage: Int
	rewardsIds: [ID!]
}
`, BuiltIn: false},
	{Name: "../../../../schema/community-users.graphqls", Input: `extend type Query {
	communityUsers(opts: CommunityUsersOpts!): CommunityUsersResponse!
}

extend type Mutation {
	communityResetStats(type: CommunityUsersResetType!): Boolean! @isAuthenticated
}

enum CommunityUsersResetType {
	WATCHED
	MESSAGES
	USED_EMOTES
	USED_CHANNELS_POINTS
}

enum CommunityUsersSortBy {
	WATCHED
	MESSAGES
	USED_EMOTES
	USED_CHANNELS_POINTS
}

enum CommunityUsersOrder {
	DESC
	ASC
}

input CommunityUsersOpts {
	channelId: ID!
	page: Int
	perPage: Int
	sortBy: CommunityUsersSortBy
	order: CommunityUsersOrder
	search: String
}

type CommunityUsersResponse {
	users: [CommunityUser!]!
	total: Int!
}

type CommunityUser implements TwirUser {
	id: ID!
	twitchProfile: TwirUserTwitchInfo! @goField(forceResolver: true)
	watchedMs: Int!
	messages: Int!
	usedEmotes: Int!
	usedChannelPoints: Int!
}
`, BuiltIn: false},
	{Name: "../../../../schema/dashboard-widgets-events.graphqls", Input: `extend type Subscription {
	dashboardWidgetsEvents: DashboardEventListPayload! @isAuthenticated @hasAccessToSelectedDashboard
}

type DashboardEventListPayload {
	events: [DashboardEventPayload!]!
}

type DashboardEventPayload {
	userId: String!
	type: DashboardEventType!
	createdAt: Time!
	data: DashboardEventData!
}

enum DashboardEventType {
	DONATION
	FOLLOW
	RAIDED
	SUBSCRIBE
	RESUBSCRIBE
	SUBGIFT
	FIRST_USER_MESSAGE
	CHAT_CLEAR
	REDEMPTION_CREATED
	CHANNEL_BAN
	CHANNEL_UNBAN_REQUEST_CREATE
	CHANNEL_UNBAN_REQUEST_RESOLVE
}

type DashboardEventData {
	donationAmount: String
  donationCurrency: String
  donationMessage: String
  donationUserName: String
  raidedViewersCount: String
  raidedFromUserName: String
  raidedFromDisplayName: String
  followUserName: String
  followUserDisplayName: String
  redemptionTitle: String
  redemptionInput: String
  redemptionUserName: String
  redemptionUserDisplayName: String
  redemptionCost: String
  subLevel: String
  subUserName: String
  subUserDisplayName: String
  reSubLevel: String
  reSubUserName: String
  reSubUserDisplayName: String
  reSubMonths: String
  reSubStreak: String
  subGiftLevel: String
  subGiftUserName: String
  subGiftUserDisplayName: String
  subGiftTargetUserName: String
  subGiftTargetUserDisplayName: String
  firstUserMessageUserName: String
  firstUserMessageUserDisplayName: String
  firstUserMessageMessage: String
  banReason: String
  banEndsInMinutes: String
  bannedUserName: String
  bannedUserLogin: String
  moderatorName: String
  moderatorDisplayName: String
  message: String
  userLogin: String
  userName: String
}
`, BuiltIn: false},
	{Name: "../../../../schema/dashboard.graphqls", Input: `extend type Subscription {
	dashboardStats: DashboardStats! @isAuthenticated
}

type DashboardStats {
	categoryId: ID!
	categoryName: String!
	viewers: Int
	startedAt: Time
	title: String!
	chatMessages: Int!
	followers: Int!
	usedEmotes: Int!
	requestedSongs: Int!
	subs: Int!
}
`, BuiltIn: false},
	{Name: "../../../../schema/emotes-statistic.graphqls", Input: `extend type Query {
	emotesStatistics(opts: EmotesStatisticsOpts!): EmotesStatisticResponse! @isAuthenticated
	emotesStatisticEmoteDetailedInformation(opts: EmotesStatisticEmoteDetailedOpts!): EmotesStatisticEmoteDetailedResponse! @isAuthenticated
}

type EmotesStatisticResponse {
	emotes: [EmotesStatistic!]!
	total: Int!
}

type EmotesStatistic {
	emoteName: String!
	totalUsages: Int!
	lastUsedTimestamp: Int!
	graphicUsages: [EmoteStatisticUsage!]!
}

enum EmotesStatisticsOptsOrder {
	ASC
	DESC
}

input EmotesStatisticsOpts {
	search: String
	page: Int
	perPage: Int
	graphicRange: EmoteStatisticRange
	order: EmotesStatisticsOptsOrder
}

enum EmoteStatisticRange {
	LAST_DAY
	LAST_WEEK
	LAST_MONTH
	LAST_THREE_MONTH
	LAST_YEAR
}

input EmotesStatisticEmoteDetailedOpts {
	emoteName: String!
	range: EmoteStatisticRange!
	usagesByUsersPage: Int
	usagesByUsersPerPage: Int
	topUsersPage: Int
	topUsersPerPage: Int
}

type EmotesStatisticEmoteDetailedResponse {
	emoteName: String!
	totalUsages: Int!
	lastUsedTimestamp: Int!
	graphicUsages: [EmoteStatisticUsage!]!
	usagesHistory: [EmoteStatisticUserUsage!]!
	usagesByUsersTotal: Int!
	topUsers: [EmoteStatisticTopUser!]!
	topUsersTotal: Int!
}

type EmoteStatisticUsage {
	count: Int!
	timestamp: Int!
}

type EmoteStatisticUserUsage {
	userId: String!
	twitchProfile: TwirUserTwitchInfo! @goField(forceResolver: true)
	date: Time!
}

type EmoteStatisticTopUser {
	userId: String!
	twitchProfile: TwirUserTwitchInfo! @goField(forceResolver: true)
	count: Int!
}
`, BuiltIn: false},
	{Name: "../../../../schema/games.graphqls", Input: `extend type Query {
	gamesEightBall: EightBallGame! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_GAMES)
	gamesDuel: DuelGame! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_GAMES)
	gamesRussianRoulette: RussianRouletteGame! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_GAMES)
	gamesSeppuku: SeppukuGame! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_GAMES)
	gamesVoteban: VotebanGame! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_GAMES)
}

extend type Mutation {
	gamesEightBallUpdate(opts: EightBallGameOpts!): EightBallGame! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_GAMES)
	gamesDuelUpdate(opts: DuelGameOpts!): DuelGame! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_GAMES)
	gamesRussianRouletteUpdate(opts: RussianRouletteGameOpts!): RussianRouletteGame! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_GAMES)
	gamesSeppukuUpdate(opts: SeppukuGameOpts!): SeppukuGame! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_GAMES)
	gamesVotebanUpdate(opts: VotebanGameOpts!): VotebanGame! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_GAMES)
}

type EightBallGame {
	enabled: Boolean!
	answers: [String!]!
}

input EightBallGameOpts {
	enabled: Boolean
	answers: [String!] @validate(constraint: "dive,max=500")
}

type DuelGame {
	enabled: Boolean!
	userCooldown: Int!
	globalCooldown: Int!
	timeoutSeconds: Int!
	startMessage: String!
	resultMessage: String!
	secondsToAccept: Int!
	pointsPerWin: Int!
	pointsPerLose: Int!
	bothDiePercent: Int!
	bothDieMessage: String!
}

input DuelGameOpts {
	enabled: Boolean
	userCooldown: Int @validate(constraint: "max=999999")
	globalCooldown: Int @validate(constraint: "max=999999")
	timeoutSeconds: Int @validate(constraint: "max=999999")
	startMessage: String @validate(constraint: "max=500")
	resultMessage: String @validate(constraint: "max=500")
	secondsToAccept: Int @validate(constraint: "max=600")
	pointsPerWin: Int @validate(constraint: "max=999999")
	pointsPerLose: Int @validate(constraint: "max=999999")
	bothDiePercent: Int @validate(constraint: "min=0,max=100")
	bothDieMessage: String @validate(constraint: "max=500")
}

type RussianRouletteGame {
	enabled: Boolean!
	canBeUsedByModerator: Boolean!
	timeoutSeconds: Int!
	decisionSeconds: Int!
	initMessage: String!
	surviveMessage: String!
	deathMessage: String!
	chargedBullets: Int!
	tumberSize: Int!
}

input RussianRouletteGameOpts {
	enabled: Boolean
	canBeUsedByModerator: Boolean
	timeoutSeconds: Int @validate(constraint: "max=999999")
	decisionSeconds: Int @validate(constraint: "max=999999")
	initMessage: String @validate(constraint: "max=500")
	surviveMessage: String @validate(constraint: "max=500")
	deathMessage: String @validate(constraint: "max=500")
	chargedBullets: Int @validate(constraint: "max=999999")
	tumberSize: Int @validate(constraint: "max=999999")
}

type SeppukuGame {
	enabled: Boolean!
	timeoutSeconds: Int!
	timeoutModerators: Boolean!
	message: String!
	messageModerators: String!
}

input SeppukuGameOpts {
	enabled: Boolean
	timeoutSeconds: Int @validate(constraint: "max=86400,min=1")
	timeoutModerators: Boolean
	message: String @validate(constraint: "max=500")
	messageModerators: String @validate(constraint: "max=500")
}

enum VoteBanGameVotingMode {
	CHAT
	POLLS
}

type VotebanGame {
	enabled: Boolean!
	timeoutSeconds: Int!
	timeoutModerators: Boolean!
	initMessage: String!
	banMessage: String!
	banMessageModerators: String!
	surviveMessage: String!
	surviveMessageModerators: String!
	neededVotes: Int!
	voteDuration: Int!
	votingMode: VoteBanGameVotingMode!
	chatVotesWordsPositive: [String!]!
	chatVotesWordsNegative: [String!]!
}

input VotebanGameOpts {
	enabled: Boolean
	timeoutSeconds: Int @validate(constraint: "min=1,max=86400")
	timeoutModerators: Boolean
	initMessage: String @validate(constraint: "max=500")
	banMessage: String @validate(constraint: "max=500")
	banMessageModerators: String @validate(constraint: "max=500")
	surviveMessage: String @validate(constraint: "max=500")
	surviveMessageModerators: String @validate(constraint: "max=500")
	neededVotes: Int @validate(constraint: "min=1,max=999999")
	voteDuration: Int @validate(constraint: "min=1,max=86400")
	votingMode: VoteBanGameVotingMode @validate(constraint: "max=500")
	chatVotesWordsPositive: [String!] @validate(constraint: "dive,max=500")
	chatVotesWordsNegative: [String!] @validate(constraint: "dive,max=500")
}
`, BuiltIn: false},
	{Name: "../../../../schema/greetings.graphqls", Input: `extend type Query {
	greetings: [Greeting!]! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: VIEW_GREETINGS)
}

extend type Mutation {
	greetingsCreate(opts: GreetingsCreateInput!): Greeting! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_GREETINGS)
	greetingsUpdate(id: String!, opts: GreetingsUpdateInput!): Greeting! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_GREETINGS)
	greetingsRemove(id: String!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_GREETINGS)
}

type Greeting {
	id: ID!
	userId: String!
	twitchProfile: TwirUserTwitchInfo! @goField(forceResolver: true)
	enabled: Boolean!
	isReply: Boolean!
	text: String!
}

input GreetingsCreateInput {
	enabled: Boolean!
	isReply: Boolean!
	userId: String!
	text: String! @validate(constraint: "max=500")
}

input GreetingsUpdateInput {
	enabled: Boolean
	isReply: Boolean
	userId: String
	text: String @validate(constraint: "max=500")
}
`, BuiltIn: false},
	{Name: "../../../../schema/keywords.graphqls", Input: `extend type Query {
	keywords: [Keyword!]! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: VIEW_KEYWORDS)
}

extend type Mutation {
	keywordCreate(opts: KeywordCreateInput!): Keyword! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_KEYWORDS)
	keywordUpdate(id: String!, opts: KeywordUpdateInput!): Keyword! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_KEYWORDS)
	keywordRemove(id: String!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_KEYWORDS)
}

type Keyword {
	id: ID!
	text: String!
	response: String
	enabled: Boolean!
	cooldown: Int!
	isReply: Boolean!
	isRegularExpression: Boolean!
	usageCount: Int!
}

input KeywordCreateInput {
	text: String! @validate(constraint: "max=5000")
	response: String @validate(constraint: "max=500,omitempty")
	cooldown: Int @validate(constraint: "max=999999")
	enabled: Boolean
	usageCount: Int @validate(constraint: "max=999999999999999")
	isRegularExpression: Boolean
	isReply: Boolean
}

input KeywordUpdateInput {
	text: String @validate(constraint: "max=5000")
	response: String @validate(constraint: "max=500,omitempty")
	cooldown: Int @validate(constraint: "max=999999")
	enabled: Boolean
	usageCount: Int @validate(constraint: "max=999999999999999")
	isRegularExpression: Boolean
	isReply: Boolean
}
`, BuiltIn: false},
	{Name: "../../../../schema/notifications.graphqls", Input: `extend type Query {
	notificationsByUser: [UserNotification!]! @isAuthenticated
	notificationsByAdmin(opts: AdminNotificationsParams!): AdminNotificationsResponse! @isAuthenticated @isAdmin
}

extend type Mutation {
	notificationsCreate(
		text: String @validate(constraint: "max=10000"),
		editorJsJson: String @validate(constraint: "max=10000")
		userId: String
	): AdminNotification! @isAuthenticated @isAdmin
	notificationsUpdate(id: ID!, opts: NotificationUpdateOpts!): AdminNotification! @isAuthenticated @isAdmin
	notificationsDelete(id: ID!): Boolean! @isAuthenticated @isAdmin
}

extend type Subscription {
	"""
	` + "`" + `newNotification` + "`" + ` will return a stream of ` + "`" + `Notification` + "`" + ` objects.
	"""
	newNotification: UserNotification! @isAuthenticated
}

interface Notification {
	id: ID!
	userId: ID
	text: String
	editorJsJson: String
	createdAt: Time!
}

type UserNotification implements Notification {
	id: ID!
	userId: ID
	text: String
	createdAt: Time!
	editorJsJson: String
}

type AdminNotification implements Notification {
	id: ID!
	text: String
	userId: ID
	twitchProfile: TwirUserTwitchInfo @goField(forceResolver: true)
	createdAt: Time!
	editorJsJson: String
}

enum NotificationType {
	GLOBAL
	USER
}

input AdminNotificationsParams {
	search: String
	page: Int
	perPage: Int
	type: NotificationType
}

input NotificationUpdateOpts {
	text: String @validate(constraint: "max=10000")
	editorJsJson: String @validate(constraint: "max=10000")
}

type AdminNotificationsResponse {
	notifications: [AdminNotification!]!
	total: Int!
}
`, BuiltIn: false},
	{Name: "../../../../schema/overlays.graphqls", Input: `extend type Query {
	chatOverlays: [ChatOverlay!]! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_OVERLAYS)
	chatOverlaysById(id: String!): ChatOverlay @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_OVERLAYS)

	nowPlayingOverlays: [NowPlayingOverlay!]! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_OVERLAYS)
	nowPlayingOverlaysById(id: String!): NowPlayingOverlay @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_OVERLAYS)
}

extend type Mutation {
	chatOverlayUpdate(id: String!, opts: ChatOverlayMutateOpts!): Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_OVERLAYS)
	chatOverlayCreate(opts: ChatOverlayMutateOpts!): Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_OVERLAYS)
	chatOverlayDelete(id: String!): Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_OVERLAYS)

	nowPlayingOverlayUpdate(id: String!, opts: NowPlayingOverlayMutateOpts!): Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_OVERLAYS)
	nowPlayingOverlayCreate(opts: NowPlayingOverlayMutateOpts!): Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_OVERLAYS)
	nowPlayingOverlayDelete(id: String!): Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_OVERLAYS)
}

extend type Subscription {
	chatOverlaySettings(id: String!, apiKey: String!): ChatOverlay

	nowPlayingOverlaySettings(id: String!, apiKey: String!): NowPlayingOverlay
	nowPlayingCurrentTrack(apiKey: String!): NowPlayingOverlayTrack
}

enum ChatOverlayAnimation {
	DISABLED
	DEFAULT
}

type ChatOverlay {
	id: String!
	messageHideTimeout: Int!
	messageShowDelay: Int!
	preset: String!
	fontSize: Int!
	hideCommands: Boolean!
	hideBots: Boolean!
	fontFamily: String!
	showBadges: Boolean!
	showAnnounceBadge: Boolean!
	textShadowColor: String!
	textShadowSize: Int!
	chatBackgroundColor: String!
	direction: String!
	fontWeight: Int!
	fontStyle: String!
	paddingContainer: Int!
	animation: ChatOverlayAnimation!
}

input ChatOverlayMutateOpts {
	messageHideTimeout: Int
	messageShowDelay: Int
	preset: String
	fontSize: Int
	hideCommands: Boolean
	hideBots: Boolean
	fontFamily: String
	showBadges: Boolean
	showAnnounceBadge: Boolean
	textShadowColor: String
	textShadowSize: Int
	chatBackgroundColor: String
	direction: String
	fontWeight: Int
	fontStyle: String
	paddingContainer: Int
	animation: ChatOverlayAnimation
}

enum NowPlayingOverlayPreset {
	TRANSPARENT
	AIDEN_REDESIGN
	SIMPLE_LINE
}

type NowPlayingOverlay {
	id: String!
	preset: NowPlayingOverlayPreset!
	channelId: String!
	fontFamily: String!
	fontWeight: Int!
	backgroundColor: String!
	showImage: Boolean!
	hideTimeout: Int
}

input NowPlayingOverlayMutateOpts {
	preset: NowPlayingOverlayPreset
	fontFamily: String
	fontWeight: Int
	backgroundColor: String
	showImage: Boolean
	hideTimeout: Int
}

type NowPlayingOverlayTrack {
	artist: String!
	title: String!
	imageUrl: String
}
`, BuiltIn: false},
	{Name: "../../../../schema/rewards.graphqls", Input: `extend type Query {
	"""
	Channel id is optional
	"""
	twitchRewards(channelId: String): [TwitchReward!]! @isAuthenticated
}

type TwitchReward {
	id: ID!
	title: String!
	cost: Int!
	imageUrls: [String!]
	backgroundColor: String!
	enabled: Boolean!
	usedTimes: Int!
}
`, BuiltIn: false},
	{Name: "../../../../schema/roles.graphqls", Input: `extend type Query {
	roles: [Role!]! @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_ROLES)
}

extend type Mutation  {
	rolesCreate(opts: RolesCreateOrUpdateOpts!): Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_ROLES)
	rolesUpdate(id: ID!, opts: RolesCreateOrUpdateOpts!): Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_ROLES)
	rolesRemove(id: ID!): Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_ROLES)
}

type Role {
	id: ID!
	channelId: String!
	name: String!
	type: RoleTypeEnum!
	permissions: [ChannelRolePermissionEnum!]!
	settings: RoleSettings!
	"""
	This is a list of user ids
	"""
	users: [TwirUserTwitchInfo!]! @goField(forceResolver: true)
}

enum RoleTypeEnum {
	BROADCASTER
	MODERATOR
	VIP
	SUBSCRIBER
	VIEWER
	CUSTOM
}

type RoleSettings {
	requiredWatchTime: Int!
	requiredMessages: Int!
	requiredUserChannelPoints: Int!
}

enum ChannelRolePermissionEnum {
	CAN_ACCESS_DASHBOARD

	UPDATE_CHANNEL_TITLE
	UPDATE_CHANNEL_CATEGORY

	VIEW_COMMANDS
	MANAGE_COMMANDS

	VIEW_KEYWORDS
	MANAGE_KEYWORDS

	VIEW_TIMERS
	MANAGE_TIMERS

	VIEW_INTEGRATIONS
	MANAGE_INTEGRATIONS

	VIEW_SONG_REQUESTS
	MANAGE_SONG_REQUESTS

	VIEW_MODERATION
	MANAGE_MODERATION

	VIEW_VARIABLES
	MANAGE_VARIABLES

	VIEW_GREETINGS
	MANAGE_GREETINGS

	VIEW_OVERLAYS
	MANAGE_OVERLAYS

	VIEW_ROLES
	MANAGE_ROLES

	VIEW_EVENTS
	MANAGE_EVENTS

	VIEW_ALERTS
	MANAGE_ALERTS

	VIEW_GAMES
	MANAGE_GAMES
}

directive @hasChannelRolesDashboardPermission(permission: ChannelRolePermissionEnum) on FIELD_DEFINITION

input RolesCreateOrUpdateOpts {
	name: String! @validate(constraint: "max=50")
	permissions: [ChannelRolePermissionEnum!]!
	settings: CreateOrUpdateRoleSettingsInput!
	"""
	This is a list of user ids
	"""
	users: [String!]!
}

input CreateOrUpdateRoleSettingsInput {
	requiredWatchTime: Int! @validate(constraint: "max=99999999999999")
	requiredMessages: Int! @validate(constraint: "max=99999999999999")
	requiredUserChannelPoints: Int! @validate(constraint: "max=99999999999999")
}
`, BuiltIn: false},
	{Name: "../../../../schema/schema.graphqls", Input: `type Query
type Mutation
type Subscription

directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on INPUT_FIELD_DEFINITION
	| FIELD_DEFINITION

directive @isAuthenticated on FIELD_DEFINITION

directive @isAdmin on FIELD_DEFINITION

directive @hasAccessToSelectedDashboard on FIELD_DEFINITION

directive @validate(constraint: String!) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION


scalar Upload
scalar Time
scalar UUID
`, BuiltIn: false},
	{Name: "../../../../schema/shared-users.graphqls", Input: `interface TwirUser {
	id: ID!
	twitchProfile: TwirUserTwitchInfo!
}

type TwirUserTwitchInfo {
	id: String!
	login: String!
	displayName: String!
	profileImageUrl: String!
	description: String!
	notFound: Boolean!
}
`, BuiltIn: false},
	{Name: "../../../../schema/song-requests.graphqls", Input: `extend type Query {
	songRequests: SongRequestsSettings @isAuthenticated @hasChannelRolesDashboardPermission(permission: VIEW_SONG_REQUESTS)
	songRequestsSearchChannelOrVideo(opts: SongRequestsSearchChannelOrVideoOpts!): SongRequestsSearchChannelOrVideoResponse! @isAuthenticated
}

extend type Mutation {
	songRequestsUpdate(opts: SongRequestsSettingsOpts!): Boolean! @isAuthenticated @hasChannelRolesDashboardPermission(permission: MANAGE_SONG_REQUESTS)
}

type SongRequestsSettings {
	enabled: Boolean!
	acceptOnlyWhenOnline: Boolean!
	maxRequests: Int!
	channelPointsRewardId: String
	announcePlay: Boolean!
	neededVotesForSkip: Int!
	user: SongRequestsUserSettings!
	song: SongRequestsSongSettings!
	denyList: SongRequestsDenyList!
	translations: SongRequestsTranslations!
	takeSongFromDonationMessages: Boolean!
	playerNoCookieMode: Boolean!
}

type SongRequestsUserSettings {
	maxRequests: Int!
	minWatchTime: Int!
	minMessages: Int!
	minFollowTime: Int!
}

type SongRequestsSongSettings {
	minLength: Int!
	maxLength: Int!
	minViews: Int!
	acceptedCategories: [String!]!
}

type SongRequestsDenyList {
	users: [String!]!
	songs: [String!]!
	channels: [String!]!
	artistsNames: [String!]!
	words: [String!]!
}

type SongRequestsTranslations {
	nowPlaying: String!
	notEnabled: String!
	noText: String!
	acceptOnlyWhenOnline: String!
	user: SongRequestsUserTranslations!
	song: SongRequestsSongTranslations!
	channel: SongRequestsChannelTranslations!
}

type SongRequestsUserTranslations {
	denied: String!
	maxRequests: String!
	minMessages: String!
	minWatched: String!
	minFollow: String!
}

type SongRequestsSongTranslations {
	denied: String!
	notFound: String!
	alreadyInQueue: String!
	ageRestrictions: String!
	cannotGetInformation: String!
	live: String!
	maxLength: String!
	minLength: String!
	requestedMessage: String!
	maximumOrdered: String!
	minViews: String!
}

type SongRequestsChannelTranslations {
	denied: String!
}

input SongRequestsSettingsOpts {
	enabled: Boolean!
	acceptOnlyWhenOnline: Boolean!
	maxRequests: Int! @validate(constraint: "max=500")
	channelPointsRewardId: String
	announcePlay: Boolean!
	neededVotesForSkip: Int! @validate(constraint: "min=0,max=100")
	user: SongRequestsUserSettingsOpts!
	song: SongRequestsSongSettingsOpts!
	denyList: SongRequestsDenyListOpts!
	translations: SongRequestsTranslationsOpts!
	takeSongFromDonationMessages: Boolean!
	playerNoCookieMode: Boolean!
}

input SongRequestsUserSettingsOpts {
	maxRequests: Int! @validate(constraint: "max=500")
	minWatchTime: Int! @validate(constraint: "max=9999999999")
	minMessages: Int! @validate(constraint: "max=9999999999")
	minFollowTime: Int! @validate(constraint: "max=9999999999")
}

input SongRequestsSongSettingsOpts {
	minLength: Int! @validate(constraint: "max=86399")
	maxLength: Int! @validate(constraint: "max=86400")
	minViews: Int! @validate(constraint: "max=10000000000000")
	acceptedCategories: [String!]! @validate(constraint: "dive,max=500")
}

input SongRequestsDenyListOpts {
	users: [String!]! @validate(constraint: "dive,max=500")
	songs: [String!]! @validate(constraint: "dive,max=500")
	channels: [String!]! @validate(constraint: "dive,max=500")
	artistsNames: [String!]! @validate(constraint: "dive,max=500")
	words: [String!]! @validate(constraint: "dive,max=500")
}

input SongRequestsTranslationsOpts {
	nowPlaying: String! @validate(constraint: "max=400")
	notEnabled: String! @validate(constraint: "max=400")
	noText: String! @validate(constraint: "max=400")
	acceptOnlyWhenOnline: String! @validate(constraint: "max=400")
	user: SongRequestsUserTranslationsOpts! @validate(constraint: "max=400")
	song: SongRequestsSongTranslationsOpts! @validate(constraint: "max=400")
	channel: SongRequestsChannelTranslationsOpts! @validate(constraint: "max=400")
}

input SongRequestsUserTranslationsOpts {
	denied: String! @validate(constraint: "max=400")
	maxRequests: String! @validate(constraint: "max=400")
	minMessages: String! @validate(constraint: "max=400")
	minWatched: String! @validate(constraint: "max=400")
	minFollow: String! @validate(constraint: "max=400")
}

input SongRequestsSongTranslationsOpts {
	denied: String! @validate(constraint: "max=400")
	notFound: String! @validate(constraint: "max=400")
	alreadyInQueue: String! @validate(constraint: "max=400")
	ageRestrictions: String! @validate(constraint: "max=400")
	cannotGetInformation: String! @validate(constraint: "max=400")
	live: String! @validate(constraint: "max=400")
	maxLength: String! @validate(constraint: "max=400")
	minLength: String! @validate(constraint: "max=400")
	requestedMessage: String! @validate(constraint: "max=400")
	maximumOrdered: String! @validate(constraint: "max=400")
	minViews: String! @validate(constraint: "max=400")
}

input SongRequestsChannelTranslationsOpts {
	denied: String! @validate(constraint: "max=400")
}

enum SongRequestsSearchChannelOrVideoOptsType {
	CHANNEL
	VIDEO
}

input SongRequestsSearchChannelOrVideoOpts {
	type: SongRequestsSearchChannelOrVideoOptsType!
	query: [String!]!
}

type SongRequestsSearchChannelOrVideoResponse {
	items: [SongRequestsSearchChannelOrVideoItem!]!
}

type SongRequestsSearchChannelOrVideoItem {
	id: String!
	title: String!
	thumbnail: String!
}
`, BuiltIn: false},
	{Name: "../../../../schema/stats.graphqls", Input: `extend type Query {
	twirStats: TwirStats!
}

type TwirStats {
	channels: Int!
	createdCommands: Int!
	viewers: Int!
	messages: Int!
	usedEmotes: Int!
	usedCommands: Int!
	streamers: [TwirStatsStreamer!]!
}

type TwirStatsStreamer {
	id: String!
	twitchProfile: TwirUserTwitchInfo!
	isLive: Boolean!
	isPartner: Boolean!
	followersCount: Int!
}
`, BuiltIn: false},
	{Name: "../../../../schema/timers.graphqls", Input: `extend type Query {
	timers: [Timer!]! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: VIEW_TIMERS)
}

extend type Mutation {
	timersCreate(opts: TimerCreateInput!): Timer! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_TIMERS)
	timersUpdate(id: String!, opts: TimerUpdateInput!): Timer! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_TIMERS)
	timersRemove(id: String!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_TIMERS)
}

type Timer {
	id: ID!
	name: String!
	enabled: Boolean!
	timeInterval: Int!
	messageInterval: Int!
	responses: [TimerResponse!]!
}

type TimerResponse {
	id: ID!
	text: String!
	isAnnounce: Boolean!
}

input TimerCreateInput {
	name: String! @validate(constraint: "max=50")
	enabled: Boolean!
	timeInterval: Int! @validate(constraint: "min=1,max=999999")
	messageInterval: Int! @validate(constraint: "min=0,max=999999")
	responses: [TimerResponseCreateInput!]!
}

input TimerResponseCreateInput {
	text: String! @validate(constraint: "max=500")
	isAnnounce: Boolean!
}

input TimerUpdateInput {
	name: String @validate(constraint: "max=50")
	enabled: Boolean
	timeInterval: Int @validate(constraint: "min=1,max=999999")
	messageInterval: Int @validate(constraint: "min=0,max=999999")
	responses: [TimerResponseUpdateInput!]
}

input TimerResponseUpdateInput {
	text: String! @validate(constraint: "max=500")
	isAnnounce: Boolean!
}
`, BuiltIn: false},
	{Name: "../../../../schema/twitch.graphqls", Input: `extend type Query {
	twitchGetUserById(id: ID!): TwirUserTwitchInfo
	twitchGetUserByName(name: String!): TwirUserTwitchInfo

	twitchGetChannelRewards(channelId: ID): TwirTwitchChannelRewardResponse!

	"""
	Get channel badges.
	If channelId is not provided - selected dashboard/authenticated user channelId is used, depending on context.
	For example if queried by apiKey - userId belongs to apiKey owner id.
	"""
	twitchGetChannelBadges(channelId: ID): TwirTwitchChannelBadgeResponse!
	twitchGetGlobalBadges: TwirTwitchGlobalBadgeResponse!
}

type TwirTwitchChannelRewardResponse {
	partnerOrAffiliate: Boolean!
	rewards: [TwirTwitchChannelReward!]!
}

type TwirTwitchChannelReward {
	id: ID!
	broadcaster_name: String!
	broadcaster_login: String!
	broadcaster_id: ID!
	"""
	In case of image is not set - default image is used
	"""
	image: TwirTwitchChannelRewardImage!
	background_color: String!
	is_enabled: Boolean!
	cost: Int!
	title: String!
	prompt: String!
	is_user_input_required: Boolean!
	max_per_stream_setting: TwirTwitchChannelRewardMaxPerStreamSetting!
	max_per_user_per_stream_setting: TwirTwitchChannelRewardMaxPerUserPerStreamSetting!
	global_cooldown_setting: TwirTwitchChannelRewardGlobalCooldownSetting!
	is_paused: Boolean!
	is_in_stock: Boolean!
	should_redemptions_skip_request_queue: Boolean!
	redemptions_redeemed_current_stream: Int!
	cooldown_expires_at: String!
}

type TwirTwitchChannelRewardMaxPerStreamSetting {
	is_enabled: Boolean!
	max_per_stream: Int!
}

type TwirTwitchChannelRewardMaxPerUserPerStreamSetting {
	is_enabled: Boolean!
	max_per_user_per_stream: Int!
}

type TwirTwitchChannelRewardGlobalCooldownSetting {
	is_enabled: Boolean!
	global_cooldown_seconds: Int!
}

type TwirTwitchChannelRewardImage {
	url_1x: String!
	url_2x: String!
	url_4x: String!
}

type TwitchBadge {
	set_id: String!
	versions: [TwitchBadgeVersion!]!
}

type TwitchBadgeVersion {
	id: String!
	image_url_1x: String!
	image_url_2x: String!
	image_url_4x: String!
}

type TwirTwitchChannelBadgeResponse {
	badges: [TwitchBadge!]!
}

type TwirTwitchGlobalBadgeResponse {
	badges: [TwitchBadge!]!
}


type TwitchCategory {
	id: String!
	name: String!
	boxArtUrl: String!
}
`, BuiltIn: false},
	{Name: "../../../../schema/user-audit-logs.graphqls", Input: `extend type Query	{
	auditLog: [AuditLog!]! @isAuthenticated @hasAccessToSelectedDashboard
}

extend type Subscription {
	auditLog: AuditLog! @isAuthenticated @hasAccessToSelectedDashboard
}

type AuditLog {
	id: UUID!
	system: AuditLogSystem!
	operationType: AuditOperationType!
	oldValue: String
	newValue: String
	objectId: String
	userId: String
	createdAt: Time!

	user: TwirUserTwitchInfo @goField(forceResolver: true)
}

enum AuditLogSystem {
	BADGE
	BADGE_USER
	CHANNEL_COMMAND
	CHANNEL_COMMAND_GROUP
	CHANNEL_VARIABLE
	CHANNEL_GAMES_EIGHT_BALL
	CHANNEL_GAMES_DUEL
	CHANNEL_GAMES_RUSSIAN_ROULETTE
	CHANNEL_GAMES_SEPPUKU
	CHANNEL_GAMES_VOTEBAN
	CHANNEL_GREETING
	CHANNEL_KEYWORD
	CHANNEL_MODERATION_SETTING
	CHANNEL_OVERLAY_CHAT
	CHANNEL_OVERLAY_DUDES
	CHANNEL_OVERLAY_NOW_PLAYING
	CHANNEL_ROLES
	CHANNEL_TIMERS
	CHANNEL_SONG_REQUESTS
	CHANNEL_INTEGRATIONS
	CHANNELS_ALERTS
	CHANNELS_MODULES_SETTINGS
	CHANNELS_CHAT_ALERTS
}
`, BuiltIn: false},
	{Name: "../../../../schema/user.graphqls", Input: `extend type Query {
	authenticatedUser: AuthenticatedUser! @isAuthenticated
	userPublicSettings(userId: String): PublicSettings!
	authLink(redirectTo: String!): String!
}

extend type Mutation {
	authenticatedUserSelectDashboard(dashboardId: String!): Boolean! @isAuthenticated
	authenticatedUserUpdateSettings(opts: UserUpdateSettingsInput!): Boolean! @isAuthenticated
	authenticatedUserRegenerateApiKey: String! @isAuthenticated
	authenticatedUserUpdatePublicPage(opts: UserUpdatePublicSettingsInput!): Boolean! @isAuthenticated
	logout: Boolean! @isAuthenticated
}

type AuthenticatedUser implements TwirUser {
	id: ID!
	isBotAdmin: Boolean!
	isBanned: Boolean!
	isEnabled: Boolean
	isBotModerator: Boolean
	apiKey: String!
	hideOnLandingPage: Boolean!
	botId: ID
	twitchProfile: TwirUserTwitchInfo! @goField(forceResolver: true)
	selectedDashboardId: String!
	selectedDashboardTwitchUser: TwirUserTwitchInfo! @goField(forceResolver: true)
	availableDashboards: [Dashboard!]! @goField(forceResolver: true)
}

type Dashboard {
	id: String!
	flags: [ChannelRolePermissionEnum!]!
	twitchProfile: TwirUserTwitchInfo! @goField(forceResolver: true)
}

input UserUpdateSettingsInput {
	hideOnLandingPage: Boolean
}

type PublicSettings {
	description: String
	socialLinks: [SocialLink!]!
}

type SocialLink {
	title: String!
	href: String!
}

input UserUpdatePublicSettingsInput {
	description: String @validate(constraint: "max=5000")
	socialLinks: [SocialLinkInput!]
}

input SocialLinkInput {
	title: String! @validate(constraint: "max=50")
	href: String! @validate(constraint: "max=500")
}
`, BuiltIn: false},
	{Name: "../../../../schema/variables.graphqls", Input: `extend type Query {
	variables: [Variable!]! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: VIEW_VARIABLES)
	variablesBuiltIn: [BuiltInVariable!]! @isAuthenticated
}

extend type Mutation {
	variablesCreate(opts: VariableCreateInput!): Variable! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_VARIABLES)
	variablesUpdate(id: ID!, opts: VariableUpdateInput!): Variable! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_VARIABLES)
	variablesDelete(id: ID!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_VARIABLES)
	executeScript(script: String!, testAsUserName: String): String! @isAuthenticated
}

enum VariableType {
	SCRIPT
	TEXT
	NUMBER
}

type Variable {
	id: ID!
	name: String!
	description: String
	type: VariableType!
	evalValue: String!
	response: String!
}

input VariableCreateInput {
	name: String! @validate(constraint: "max=50")
	description: String	@validate(constraint: "max=500")
	type: VariableType!
	evalValue: String! @validate(constraint: "max=10000")
	response: String! @validate(constraint: "max=500")
}

input VariableUpdateInput {
	name: String @validate(constraint: "max=50")
	description: String @validate(constraint: "max=500")
	type: VariableType
	evalValue: String @validate(constraint: "max=10000")
	response: String @validate(constraint: "max=500")
}

type BuiltInVariable {
	name: String!
	example: String!
	description: String!
	visible: Boolean!
	canBeUsedInRegistry: Boolean!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_hasChannelRolesDashboardPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodel.ChannelRolePermissionEnum
	if tmp, ok := rawArgs["permission"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permission"))
		arg0, err = ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["permission"] = arg0
	return args, nil
}

func (ec *executionContext) dir_validate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["constraint"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["constraint"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_authenticatedUserSelectDashboard_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dashboardId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dashboardId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dashboardId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_authenticatedUserUpdatePublicPage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UserUpdatePublicSettingsInput
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNUserUpdatePublicSettingsInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐUserUpdatePublicSettingsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_authenticatedUserUpdateSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UserUpdateSettingsInput
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNUserUpdateSettingsInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐUserUpdateSettingsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_badgesAddUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_badgesCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.TwirBadgeCreateOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNTwirBadgeCreateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirBadgeCreateOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_badgesDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_badgesRemoveUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_badgesUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodel.TwirBadgeUpdateOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg1, err = ec.unmarshalNTwirBadgeUpdateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirBadgeUpdateOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_channelAlertsCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.ChannelAlertCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNChannelAlertCreateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelAlertCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_channelAlertsDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_channelAlertsUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodel.ChannelAlertUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNChannelAlertUpdateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelAlertUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_chatOverlayCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.ChatOverlayMutateOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNChatOverlayMutateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlayMutateOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_chatOverlayDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_chatOverlayUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodel.ChatOverlayMutateOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg1, err = ec.unmarshalNChatOverlayMutateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlayMutateOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_commandsCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.CommandsCreateOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNCommandsCreateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandsCreateOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_commandsGroupsCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.CommandsGroupsCreateOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNCommandsGroupsCreateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandsGroupsCreateOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_commandsGroupsRemove_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_commandsGroupsUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodel.CommandsGroupsUpdateOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg1, err = ec.unmarshalNCommandsGroupsUpdateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandsGroupsUpdateOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_commandsRemove_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_commandsUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodel.CommandsUpdateOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg1, err = ec.unmarshalNCommandsUpdateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandsUpdateOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_communityResetStats_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.CommunityUsersResetType
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalNCommunityUsersResetType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUsersResetType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_eventsubSubscribe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.EventsubSubscribeInput
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNEventsubSubscribeInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEventsubSubscribeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_executeScript_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["script"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("script"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["script"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["testAsUserName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("testAsUserName"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["testAsUserName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_gamesDuelUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.DuelGameOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNDuelGameOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDuelGameOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_gamesEightBallUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.EightBallGameOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNEightBallGameOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEightBallGameOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_gamesRussianRouletteUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.RussianRouletteGameOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNRussianRouletteGameOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRussianRouletteGameOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_gamesSeppukuUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.SeppukuGameOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNSeppukuGameOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSeppukuGameOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_gamesVotebanUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.VotebanGameOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNVotebanGameOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVotebanGameOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_greetingsCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.GreetingsCreateInput
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNGreetingsCreateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐGreetingsCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_greetingsRemove_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_greetingsUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodel.GreetingsUpdateInput
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg1, err = ec.unmarshalNGreetingsUpdateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐGreetingsUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_keywordCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.KeywordCreateInput
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNKeywordCreateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐKeywordCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_keywordRemove_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_keywordUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodel.KeywordUpdateInput
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg1, err = ec.unmarshalNKeywordUpdateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐKeywordUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_notificationsCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["text"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "max=10000")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg0 = data
		} else if tmp == nil {
			arg0 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["text"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["editorJsJson"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("editorJsJson"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "max=10000")
			if err != nil {
				return nil, err
			}
			if ec.directives.Validate == nil {
				return nil, errors.New("directive validate is not implemented")
			}
			return ec.directives.Validate(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(*string); ok {
			arg1 = data
		} else if tmp == nil {
			arg1 = nil
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp))
		}
	}
	args["editorJsJson"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_notificationsDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_notificationsUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodel.NotificationUpdateOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg1, err = ec.unmarshalNNotificationUpdateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNotificationUpdateOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_nowPlayingOverlayCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NowPlayingOverlayMutateOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNNowPlayingOverlayMutateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlayMutateOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_nowPlayingOverlayDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_nowPlayingOverlayUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodel.NowPlayingOverlayMutateOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg1, err = ec.unmarshalNNowPlayingOverlayMutateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlayMutateOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_rolesCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.RolesCreateOrUpdateOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNRolesCreateOrUpdateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRolesCreateOrUpdateOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rolesRemove_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rolesUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodel.RolesCreateOrUpdateOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg1, err = ec.unmarshalNRolesCreateOrUpdateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRolesCreateOrUpdateOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_songRequestsUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.SongRequestsSettingsOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNSongRequestsSettingsOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSettingsOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_switchUserAdmin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_switchUserBan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_timersCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.TimerCreateInput
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNTimerCreateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_timersRemove_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_timersUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodel.TimerUpdateInput
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg1, err = ec.unmarshalNTimerUpdateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChatAlerts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.ChatAlertsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNChatAlertsInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_variablesCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.VariableCreateInput
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNVariableCreateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariableCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_variablesDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_variablesUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gqlmodel.VariableUpdateInput
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg1, err = ec.unmarshalNVariableUpdateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariableUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_adminAuditLogs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.AdminAuditLogsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAdminAuditLogsInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminAuditLogsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_authLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["redirectTo"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("redirectTo"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["redirectTo"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_chatOverlaysById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_commandsPublic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_communityUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.CommunityUsersOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNCommunityUsersOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUsersOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_emotesStatisticEmoteDetailedInformation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.EmotesStatisticEmoteDetailedOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNEmotesStatisticEmoteDetailedOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticEmoteDetailedOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_emotesStatistics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.EmotesStatisticsOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNEmotesStatisticsOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticsOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_notificationsByAdmin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.AdminNotificationsParams
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNAdminNotificationsParams2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminNotificationsParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_nowPlayingOverlaysById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_rewardsRedemptionsHistory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.TwitchRedemptionsOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNTwitchRedemptionsOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchRedemptionsOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_songRequestsSearchChannelOrVideo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.SongRequestsSearchChannelOrVideoOpts
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNSongRequestsSearchChannelOrVideoOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSearchChannelOrVideoOpts(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_twirUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.TwirUsersSearchParams
	if tmp, ok := rawArgs["opts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opts"))
		arg0, err = ec.unmarshalNTwirUsersSearchParams2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUsersSearchParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["opts"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_twitchGetChannelBadges_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["channelId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_twitchGetChannelRewards_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["channelId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_twitchGetUserById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_twitchGetUserByName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_twitchRewards_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["channelId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_userPublicSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_chatOverlaySettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["apiKey"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiKey"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["apiKey"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_nowPlayingCurrentTrack_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["apiKey"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiKey"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["apiKey"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_nowPlayingOverlaySettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["apiKey"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiKey"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["apiKey"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AdminAuditLog_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminAuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuditLog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuditLog_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuditLog_system(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminAuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuditLog_system(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.AuditLogSystem)
	fc.Result = res
	return ec.marshalNAuditLogSystem2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLogSystem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuditLog_system(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AuditLogSystem does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuditLog_operationType(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminAuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuditLog_operationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.AuditOperationType)
	fc.Result = res
	return ec.marshalNAuditOperationType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditOperationType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuditLog_operationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AuditOperationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuditLog_oldValue(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminAuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuditLog_oldValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuditLog_oldValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuditLog_newValue(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminAuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuditLog_newValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuditLog_newValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuditLog_objectId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminAuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuditLog_objectId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuditLog_objectId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuditLog_userId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminAuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuditLog_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuditLog_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuditLog_channelId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminAuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuditLog_channelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuditLog_channelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuditLog_createdAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminAuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuditLog_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuditLog_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuditLog_user(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminAuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuditLog_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AdminAuditLog().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalOTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuditLog_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuditLog",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuditLog_channel(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminAuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuditLog_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AdminAuditLog().Channel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalOTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuditLog_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuditLog",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuditLogResponse_logs(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminAuditLogResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuditLogResponse_logs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.AdminAuditLog)
	fc.Result = res
	return ec.marshalNAdminAuditLog2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminAuditLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuditLogResponse_logs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuditLogResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AdminAuditLog_id(ctx, field)
			case "system":
				return ec.fieldContext_AdminAuditLog_system(ctx, field)
			case "operationType":
				return ec.fieldContext_AdminAuditLog_operationType(ctx, field)
			case "oldValue":
				return ec.fieldContext_AdminAuditLog_oldValue(ctx, field)
			case "newValue":
				return ec.fieldContext_AdminAuditLog_newValue(ctx, field)
			case "objectId":
				return ec.fieldContext_AdminAuditLog_objectId(ctx, field)
			case "userId":
				return ec.fieldContext_AdminAuditLog_userId(ctx, field)
			case "channelId":
				return ec.fieldContext_AdminAuditLog_channelId(ctx, field)
			case "createdAt":
				return ec.fieldContext_AdminAuditLog_createdAt(ctx, field)
			case "user":
				return ec.fieldContext_AdminAuditLog_user(ctx, field)
			case "channel":
				return ec.fieldContext_AdminAuditLog_channel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminAuditLog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuditLogResponse_total(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminAuditLogResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuditLogResponse_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuditLogResponse_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuditLogResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminNotification_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminNotification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminNotification_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminNotification_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminNotification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminNotification_text(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminNotification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminNotification_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminNotification_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminNotification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminNotification_userId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminNotification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminNotification_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminNotification_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminNotification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminNotification_twitchProfile(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminNotification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminNotification_twitchProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AdminNotification().TwitchProfile(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalOTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminNotification_twitchProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminNotification",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminNotification_createdAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminNotification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminNotification_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminNotification_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminNotification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminNotification_editorJsJson(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminNotification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminNotification_editorJsJson(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EditorJsJSON, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminNotification_editorJsJson(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminNotification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminNotificationsResponse_notifications(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminNotificationsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminNotificationsResponse_notifications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.AdminNotification)
	fc.Result = res
	return ec.marshalNAdminNotification2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminNotificationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminNotificationsResponse_notifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminNotificationsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AdminNotification_id(ctx, field)
			case "text":
				return ec.fieldContext_AdminNotification_text(ctx, field)
			case "userId":
				return ec.fieldContext_AdminNotification_userId(ctx, field)
			case "twitchProfile":
				return ec.fieldContext_AdminNotification_twitchProfile(ctx, field)
			case "createdAt":
				return ec.fieldContext_AdminNotification_createdAt(ctx, field)
			case "editorJsJson":
				return ec.fieldContext_AdminNotification_editorJsJson(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminNotification", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminNotificationsResponse_total(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AdminNotificationsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminNotificationsResponse_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminNotificationsResponse_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminNotificationsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_system(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_system(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.AuditLogSystem)
	fc.Result = res
	return ec.marshalNAuditLogSystem2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLogSystem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_system(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AuditLogSystem does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_operationType(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_operationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.AuditOperationType)
	fc.Result = res
	return ec.marshalNAuditOperationType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditOperationType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_operationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AuditOperationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_oldValue(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_oldValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OldValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_oldValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_newValue(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_newValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_newValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_objectId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_objectId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_objectId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_userId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_createdAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditLog_user(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuditLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditLog_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuditLog().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalOTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditLog_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditLog",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticatedUser_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuthenticatedUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticatedUser_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticatedUser_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticatedUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticatedUser_isBotAdmin(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuthenticatedUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticatedUser_isBotAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBotAdmin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticatedUser_isBotAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticatedUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticatedUser_isBanned(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuthenticatedUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticatedUser_isBanned(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBanned, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticatedUser_isBanned(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticatedUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticatedUser_isEnabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuthenticatedUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticatedUser_isEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticatedUser_isEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticatedUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticatedUser_isBotModerator(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuthenticatedUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticatedUser_isBotModerator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBotModerator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticatedUser_isBotModerator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticatedUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticatedUser_apiKey(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuthenticatedUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticatedUser_apiKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticatedUser_apiKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticatedUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticatedUser_hideOnLandingPage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuthenticatedUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticatedUser_hideOnLandingPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HideOnLandingPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticatedUser_hideOnLandingPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticatedUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticatedUser_botId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuthenticatedUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticatedUser_botId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BotID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticatedUser_botId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticatedUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticatedUser_twitchProfile(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuthenticatedUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticatedUser_twitchProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuthenticatedUser().TwitchProfile(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalNTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticatedUser_twitchProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticatedUser",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticatedUser_selectedDashboardId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuthenticatedUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticatedUser_selectedDashboardId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectedDashboardID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticatedUser_selectedDashboardId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticatedUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticatedUser_selectedDashboardTwitchUser(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuthenticatedUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticatedUser_selectedDashboardTwitchUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuthenticatedUser().SelectedDashboardTwitchUser(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalNTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticatedUser_selectedDashboardTwitchUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticatedUser",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthenticatedUser_availableDashboards(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.AuthenticatedUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthenticatedUser_availableDashboards(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuthenticatedUser().AvailableDashboards(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.Dashboard)
	fc.Result = res
	return ec.marshalNDashboard2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthenticatedUser_availableDashboards(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthenticatedUser",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Dashboard_id(ctx, field)
			case "flags":
				return ec.fieldContext_Dashboard_flags(ctx, field)
			case "twitchProfile":
				return ec.fieldContext_Dashboard_twitchProfile(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Dashboard", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Badge_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Badge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Badge_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Badge_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Badge_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Badge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Badge_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Badge_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Badge_createdAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Badge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Badge_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Badge_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Badge_fileUrl(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Badge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Badge_fileUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Badge_fileUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Badge_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Badge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Badge_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Badge_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Badge_users(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Badge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Badge_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Badge_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Badge_ffzSlot(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Badge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Badge_ffzSlot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FfzSlot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Badge_ffzSlot(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuiltInVariable_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.BuiltInVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuiltInVariable_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuiltInVariable_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuiltInVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuiltInVariable_example(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.BuiltInVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuiltInVariable_example(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Example, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuiltInVariable_example(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuiltInVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuiltInVariable_description(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.BuiltInVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuiltInVariable_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuiltInVariable_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuiltInVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuiltInVariable_visible(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.BuiltInVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuiltInVariable_visible(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visible, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuiltInVariable_visible(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuiltInVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuiltInVariable_canBeUsedInRegistry(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.BuiltInVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuiltInVariable_canBeUsedInRegistry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanBeUsedInRegistry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuiltInVariable_canBeUsedInRegistry(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuiltInVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelAlert_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChannelAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelAlert_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelAlert_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelAlert_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChannelAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelAlert_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelAlert_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelAlert_audioId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChannelAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelAlert_audioId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AudioID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelAlert_audioId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelAlert_audioVolume(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChannelAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelAlert_audioVolume(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AudioVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelAlert_audioVolume(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelAlert_commandIds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChannelAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelAlert_commandIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommandIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelAlert_commandIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelAlert_rewardIds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChannelAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelAlert_rewardIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RewardIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelAlert_rewardIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelAlert_greetingsIds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChannelAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelAlert_greetingsIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GreetingsIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelAlert_greetingsIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelAlert_keywordsIds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChannelAlert) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelAlert_keywordsIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeywordsIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelAlert_keywordsIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlerts_followers(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlerts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlerts_followers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Followers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlertsFollowersSettings)
	fc.Result = res
	return ec.marshalOChatAlertsFollowersSettings2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsFollowersSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlerts_followers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlerts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ChatAlertsFollowersSettings_enabled(ctx, field)
			case "messages":
				return ec.fieldContext_ChatAlertsFollowersSettings_messages(ctx, field)
			case "cooldown":
				return ec.fieldContext_ChatAlertsFollowersSettings_cooldown(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsFollowersSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlerts_raids(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlerts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlerts_raids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Raids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlertsRaids)
	fc.Result = res
	return ec.marshalOChatAlertsRaids2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsRaids(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlerts_raids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlerts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ChatAlertsRaids_enabled(ctx, field)
			case "messages":
				return ec.fieldContext_ChatAlertsRaids_messages(ctx, field)
			case "cooldown":
				return ec.fieldContext_ChatAlertsRaids_cooldown(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsRaids", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlerts_donations(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlerts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlerts_donations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Donations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlertsDonations)
	fc.Result = res
	return ec.marshalOChatAlertsDonations2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsDonations(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlerts_donations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlerts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ChatAlertsDonations_enabled(ctx, field)
			case "messages":
				return ec.fieldContext_ChatAlertsDonations_messages(ctx, field)
			case "cooldown":
				return ec.fieldContext_ChatAlertsDonations_cooldown(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsDonations", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlerts_subscribers(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlerts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlerts_subscribers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscribers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlertsSubscribers)
	fc.Result = res
	return ec.marshalOChatAlertsSubscribers2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsSubscribers(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlerts_subscribers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlerts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ChatAlertsSubscribers_enabled(ctx, field)
			case "messages":
				return ec.fieldContext_ChatAlertsSubscribers_messages(ctx, field)
			case "cooldown":
				return ec.fieldContext_ChatAlertsSubscribers_cooldown(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsSubscribers", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlerts_cheers(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlerts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlerts_cheers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cheers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlertsCheers)
	fc.Result = res
	return ec.marshalOChatAlertsCheers2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCheers(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlerts_cheers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlerts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ChatAlertsCheers_enabled(ctx, field)
			case "messages":
				return ec.fieldContext_ChatAlertsCheers_messages(ctx, field)
			case "cooldown":
				return ec.fieldContext_ChatAlertsCheers_cooldown(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsCheers", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlerts_redemptions(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlerts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlerts_redemptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Redemptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlertsRedemptions)
	fc.Result = res
	return ec.marshalOChatAlertsRedemptions2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsRedemptions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlerts_redemptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlerts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ChatAlertsRedemptions_enabled(ctx, field)
			case "messages":
				return ec.fieldContext_ChatAlertsRedemptions_messages(ctx, field)
			case "cooldown":
				return ec.fieldContext_ChatAlertsRedemptions_cooldown(ctx, field)
			case "ignoredRewardsIds":
				return ec.fieldContext_ChatAlertsRedemptions_ignoredRewardsIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsRedemptions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlerts_firstUserMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlerts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlerts_firstUserMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstUserMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlertsFirstUserMessage)
	fc.Result = res
	return ec.marshalOChatAlertsFirstUserMessage2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsFirstUserMessage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlerts_firstUserMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlerts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ChatAlertsFirstUserMessage_enabled(ctx, field)
			case "messages":
				return ec.fieldContext_ChatAlertsFirstUserMessage_messages(ctx, field)
			case "cooldown":
				return ec.fieldContext_ChatAlertsFirstUserMessage_cooldown(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsFirstUserMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlerts_streamOnline(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlerts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlerts_streamOnline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreamOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlertsStreamOnline)
	fc.Result = res
	return ec.marshalOChatAlertsStreamOnline2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsStreamOnline(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlerts_streamOnline(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlerts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ChatAlertsStreamOnline_enabled(ctx, field)
			case "messages":
				return ec.fieldContext_ChatAlertsStreamOnline_messages(ctx, field)
			case "cooldown":
				return ec.fieldContext_ChatAlertsStreamOnline_cooldown(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsStreamOnline", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlerts_streamOffline(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlerts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlerts_streamOffline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreamOffline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlertsStreamOffline)
	fc.Result = res
	return ec.marshalOChatAlertsStreamOffline2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsStreamOffline(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlerts_streamOffline(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlerts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ChatAlertsStreamOffline_enabled(ctx, field)
			case "messages":
				return ec.fieldContext_ChatAlertsStreamOffline_messages(ctx, field)
			case "cooldown":
				return ec.fieldContext_ChatAlertsStreamOffline_cooldown(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsStreamOffline", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlerts_chatCleared(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlerts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlerts_chatCleared(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChatCleared, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlertsChatCleared)
	fc.Result = res
	return ec.marshalOChatAlertsChatCleared2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsChatCleared(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlerts_chatCleared(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlerts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ChatAlertsChatCleared_enabled(ctx, field)
			case "messages":
				return ec.fieldContext_ChatAlertsChatCleared_messages(ctx, field)
			case "cooldown":
				return ec.fieldContext_ChatAlertsChatCleared_cooldown(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsChatCleared", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlerts_ban(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlerts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlerts_ban(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ban, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlertsBan)
	fc.Result = res
	return ec.marshalOChatAlertsBan2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsBan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlerts_ban(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlerts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ChatAlertsBan_enabled(ctx, field)
			case "messages":
				return ec.fieldContext_ChatAlertsBan_messages(ctx, field)
			case "ignoreTimeoutFrom":
				return ec.fieldContext_ChatAlertsBan_ignoreTimeoutFrom(ctx, field)
			case "cooldown":
				return ec.fieldContext_ChatAlertsBan_cooldown(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsBan", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlerts_unbanRequestCreate(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlerts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlerts_unbanRequestCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnbanRequestCreate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlertsUnbanRequestCreate)
	fc.Result = res
	return ec.marshalOChatAlertsUnbanRequestCreate2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsUnbanRequestCreate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlerts_unbanRequestCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlerts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ChatAlertsUnbanRequestCreate_enabled(ctx, field)
			case "messages":
				return ec.fieldContext_ChatAlertsUnbanRequestCreate_messages(ctx, field)
			case "cooldown":
				return ec.fieldContext_ChatAlertsUnbanRequestCreate_cooldown(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsUnbanRequestCreate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlerts_unbanRequestResolve(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlerts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlerts_unbanRequestResolve(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnbanRequestResolve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlertsUnbanRequestResolve)
	fc.Result = res
	return ec.marshalOChatAlertsUnbanRequestResolve2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsUnbanRequestResolve(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlerts_unbanRequestResolve(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlerts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ChatAlertsUnbanRequestResolve_enabled(ctx, field)
			case "messages":
				return ec.fieldContext_ChatAlertsUnbanRequestResolve_messages(ctx, field)
			case "cooldown":
				return ec.fieldContext_ChatAlertsUnbanRequestResolve_cooldown(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsUnbanRequestResolve", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlerts_messageDelete(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlerts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlerts_messageDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlertsMessageDelete)
	fc.Result = res
	return ec.marshalOChatAlertsMessageDelete2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageDelete(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlerts_messageDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlerts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_ChatAlertsMessageDelete_enabled(ctx, field)
			case "messages":
				return ec.fieldContext_ChatAlertsMessageDelete_messages(ctx, field)
			case "cooldown":
				return ec.fieldContext_ChatAlertsMessageDelete_cooldown(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsMessageDelete", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsBan_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsBan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsBan_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsBan_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsBan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsBan_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsBan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsBan_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatAlertsCountedMessage)
	fc.Result = res
	return ec.marshalNChatAlertsCountedMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsBan_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsBan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ChatAlertsCountedMessage_count(ctx, field)
			case "text":
				return ec.fieldContext_ChatAlertsCountedMessage_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsCountedMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsBan_ignoreTimeoutFrom(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsBan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsBan_ignoreTimeoutFrom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IgnoreTimeoutFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsBan_ignoreTimeoutFrom(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsBan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsBan_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsBan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsBan_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsBan_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsBan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsChatCleared_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsChatCleared) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsChatCleared_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsChatCleared_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsChatCleared",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsChatCleared_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsChatCleared) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsChatCleared_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatAlertsMessage)
	fc.Result = res
	return ec.marshalNChatAlertsMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsChatCleared_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsChatCleared",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_ChatAlertsMessage_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsChatCleared_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsChatCleared) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsChatCleared_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsChatCleared_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsChatCleared",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsCheers_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsCheers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsCheers_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsCheers_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsCheers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsCheers_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsCheers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsCheers_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatAlertsCountedMessage)
	fc.Result = res
	return ec.marshalNChatAlertsCountedMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsCheers_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsCheers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ChatAlertsCountedMessage_count(ctx, field)
			case "text":
				return ec.fieldContext_ChatAlertsCountedMessage_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsCountedMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsCheers_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsCheers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsCheers_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsCheers_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsCheers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsCountedMessage_count(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsCountedMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsCountedMessage_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsCountedMessage_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsCountedMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsCountedMessage_text(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsCountedMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsCountedMessage_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsCountedMessage_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsCountedMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsDonations_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsDonations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsDonations_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsDonations_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsDonations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsDonations_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsDonations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsDonations_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatAlertsCountedMessage)
	fc.Result = res
	return ec.marshalNChatAlertsCountedMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsDonations_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsDonations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ChatAlertsCountedMessage_count(ctx, field)
			case "text":
				return ec.fieldContext_ChatAlertsCountedMessage_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsCountedMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsDonations_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsDonations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsDonations_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsDonations_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsDonations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsFirstUserMessage_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsFirstUserMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsFirstUserMessage_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsFirstUserMessage_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsFirstUserMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsFirstUserMessage_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsFirstUserMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsFirstUserMessage_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatAlertsMessage)
	fc.Result = res
	return ec.marshalNChatAlertsMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsFirstUserMessage_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsFirstUserMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_ChatAlertsMessage_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsFirstUserMessage_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsFirstUserMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsFirstUserMessage_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsFirstUserMessage_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsFirstUserMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsFollowersSettings_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsFollowersSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsFollowersSettings_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsFollowersSettings_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsFollowersSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsFollowersSettings_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsFollowersSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsFollowersSettings_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatAlertsMessage)
	fc.Result = res
	return ec.marshalNChatAlertsMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsFollowersSettings_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsFollowersSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_ChatAlertsMessage_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsFollowersSettings_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsFollowersSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsFollowersSettings_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsFollowersSettings_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsFollowersSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsMessage_text(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsMessage_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsMessage_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsMessageDelete_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsMessageDelete) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsMessageDelete_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsMessageDelete_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsMessageDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsMessageDelete_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsMessageDelete) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsMessageDelete_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatAlertsMessage)
	fc.Result = res
	return ec.marshalNChatAlertsMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsMessageDelete_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsMessageDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_ChatAlertsMessage_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsMessageDelete_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsMessageDelete) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsMessageDelete_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsMessageDelete_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsMessageDelete",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsRaids_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsRaids) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsRaids_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsRaids_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsRaids",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsRaids_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsRaids) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsRaids_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatAlertsCountedMessage)
	fc.Result = res
	return ec.marshalNChatAlertsCountedMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsRaids_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsRaids",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ChatAlertsCountedMessage_count(ctx, field)
			case "text":
				return ec.fieldContext_ChatAlertsCountedMessage_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsCountedMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsRaids_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsRaids) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsRaids_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsRaids_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsRaids",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsRedemptions_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsRedemptions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsRedemptions_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsRedemptions_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsRedemptions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsRedemptions_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsRedemptions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsRedemptions_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatAlertsMessage)
	fc.Result = res
	return ec.marshalNChatAlertsMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsRedemptions_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsRedemptions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_ChatAlertsMessage_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsRedemptions_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsRedemptions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsRedemptions_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsRedemptions_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsRedemptions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsRedemptions_ignoredRewardsIds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsRedemptions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsRedemptions_ignoredRewardsIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IgnoredRewardsIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsRedemptions_ignoredRewardsIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsRedemptions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsStreamOffline_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsStreamOffline) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsStreamOffline_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsStreamOffline_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsStreamOffline",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsStreamOffline_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsStreamOffline) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsStreamOffline_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatAlertsMessage)
	fc.Result = res
	return ec.marshalNChatAlertsMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsStreamOffline_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsStreamOffline",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_ChatAlertsMessage_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsStreamOffline_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsStreamOffline) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsStreamOffline_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsStreamOffline_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsStreamOffline",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsStreamOnline_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsStreamOnline) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsStreamOnline_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsStreamOnline_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsStreamOnline",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsStreamOnline_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsStreamOnline) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsStreamOnline_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatAlertsMessage)
	fc.Result = res
	return ec.marshalNChatAlertsMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsStreamOnline_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsStreamOnline",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_ChatAlertsMessage_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsStreamOnline_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsStreamOnline) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsStreamOnline_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsStreamOnline_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsStreamOnline",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsSubscribers_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsSubscribers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsSubscribers_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsSubscribers_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsSubscribers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsSubscribers_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsSubscribers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsSubscribers_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatAlertsCountedMessage)
	fc.Result = res
	return ec.marshalNChatAlertsCountedMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsSubscribers_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsSubscribers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ChatAlertsCountedMessage_count(ctx, field)
			case "text":
				return ec.fieldContext_ChatAlertsCountedMessage_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsCountedMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsSubscribers_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsSubscribers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsSubscribers_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsSubscribers_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsSubscribers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsUnbanRequestCreate_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsUnbanRequestCreate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsUnbanRequestCreate_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsUnbanRequestCreate_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsUnbanRequestCreate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsUnbanRequestCreate_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsUnbanRequestCreate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsUnbanRequestCreate_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatAlertsMessage)
	fc.Result = res
	return ec.marshalNChatAlertsMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsUnbanRequestCreate_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsUnbanRequestCreate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_ChatAlertsMessage_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsUnbanRequestCreate_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsUnbanRequestCreate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsUnbanRequestCreate_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsUnbanRequestCreate_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsUnbanRequestCreate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsUnbanRequestResolve_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsUnbanRequestResolve) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsUnbanRequestResolve_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsUnbanRequestResolve_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsUnbanRequestResolve",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsUnbanRequestResolve_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsUnbanRequestResolve) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsUnbanRequestResolve_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatAlertsMessage)
	fc.Result = res
	return ec.marshalNChatAlertsMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsUnbanRequestResolve_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsUnbanRequestResolve",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_ChatAlertsMessage_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlertsMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatAlertsUnbanRequestResolve_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatAlertsUnbanRequestResolve) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatAlertsUnbanRequestResolve_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatAlertsUnbanRequestResolve_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatAlertsUnbanRequestResolve",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_messageHideTimeout(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_messageHideTimeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageHideTimeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_messageHideTimeout(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_messageShowDelay(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_messageShowDelay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageShowDelay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_messageShowDelay(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_preset(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_preset(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Preset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_preset(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_fontSize(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_fontSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_fontSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_hideCommands(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_hideCommands(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HideCommands, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_hideCommands(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_hideBots(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_hideBots(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HideBots, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_hideBots(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_fontFamily(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_fontFamily(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontFamily, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_fontFamily(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_showBadges(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_showBadges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowBadges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_showBadges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_showAnnounceBadge(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_showAnnounceBadge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowAnnounceBadge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_showAnnounceBadge(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_textShadowColor(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_textShadowColor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TextShadowColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_textShadowColor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_textShadowSize(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_textShadowSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TextShadowSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_textShadowSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_chatBackgroundColor(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_chatBackgroundColor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChatBackgroundColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_chatBackgroundColor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_direction(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_direction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_direction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_fontWeight(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_fontWeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_fontWeight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_fontStyle(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_fontStyle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_fontStyle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_paddingContainer(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_paddingContainer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaddingContainer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_paddingContainer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChatOverlay_animation(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChatOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChatOverlay_animation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Animation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.ChatOverlayAnimation)
	fc.Result = res
	return ec.marshalNChatOverlayAnimation2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlayAnimation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChatOverlay_animation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChatOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ChatOverlayAnimation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_description(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_aliases(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_aliases(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aliases, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_aliases(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_responses(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_responses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Responses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.CommandResponse)
	fc.Result = res
	return ec.marshalNCommandResponse2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_responses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CommandResponse_id(ctx, field)
			case "commandId":
				return ec.fieldContext_CommandResponse_commandId(ctx, field)
			case "text":
				return ec.fieldContext_CommandResponse_text(ctx, field)
			case "twitchCategoriesIds":
				return ec.fieldContext_CommandResponse_twitchCategoriesIds(ctx, field)
			case "twitchCategories":
				return ec.fieldContext_CommandResponse_twitchCategories(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommandResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_cooldownType(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_cooldownType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CooldownType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_cooldownType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_visible(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_visible(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visible, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_visible(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_default(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_default(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_default(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_defaultName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_defaultName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_defaultName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_module(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_module(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_module(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_isReply(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_isReply(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReply, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_isReply(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_keepResponsesOrder(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_keepResponsesOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeepResponsesOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_keepResponsesOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_deniedUsersIds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_deniedUsersIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeniedUsersIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_deniedUsersIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_allowedUsersIds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_allowedUsersIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowedUsersIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_allowedUsersIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_rolesIds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_rolesIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RolesIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_rolesIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_onlineOnly(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_onlineOnly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnlineOnly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_onlineOnly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_cooldownRolesIds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_cooldownRolesIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CooldownRolesIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_cooldownRolesIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_enabledCategories(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_enabledCategories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnabledCategories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_enabledCategories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_requiredWatchTime(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_requiredWatchTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiredWatchTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_requiredWatchTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_requiredMessages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_requiredMessages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiredMessages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_requiredMessages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_requiredUsedChannelPoints(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_requiredUsedChannelPoints(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiredUsedChannelPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_requiredUsedChannelPoints(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_groupId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_groupId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_groupId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_group(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_group(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.CommandGroup)
	fc.Result = res
	return ec.marshalOCommandGroup2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_group(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CommandGroup_id(ctx, field)
			case "name":
				return ec.fieldContext_CommandGroup_name(ctx, field)
			case "color":
				return ec.fieldContext_CommandGroup_color(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommandGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_expiresAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_expiresAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_expiresAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Command_expiresType(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Command) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Command_expiresType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.CommandExpiresType)
	fc.Result = res
	return ec.marshalOCommandExpiresType2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandExpiresType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Command_expiresType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Command",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CommandExpiresType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandCreatePayload_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommandCreatePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandCreatePayload_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandCreatePayload_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandCreatePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandGroup_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommandGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandGroup_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandGroup_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandGroup_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommandGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandGroup_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandGroup_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandGroup_color(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommandGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandGroup_color(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Color, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandGroup_color(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandResponse_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommandResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandResponse_commandId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommandResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandResponse_commandId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommandID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandResponse_commandId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandResponse_text(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommandResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandResponse_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandResponse_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandResponse_twitchCategoriesIds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommandResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandResponse_twitchCategoriesIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TwitchCategoriesIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandResponse_twitchCategoriesIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandResponse_twitchCategories(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommandResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandResponse_twitchCategories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CommandResponse().TwitchCategories(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.TwitchCategory)
	fc.Result = res
	return ec.marshalNTwitchCategory2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandResponse_twitchCategories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandResponse",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwitchCategory_id(ctx, field)
			case "name":
				return ec.fieldContext_TwitchCategory_name(ctx, field)
			case "boxArtUrl":
				return ec.fieldContext_TwitchCategory_boxArtUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwitchCategory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityUser_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommunityUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityUser_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityUser_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityUser_twitchProfile(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommunityUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityUser_twitchProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CommunityUser().TwitchProfile(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalNTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityUser_twitchProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityUser",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityUser_watchedMs(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommunityUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityUser_watchedMs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WatchedMs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityUser_watchedMs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityUser_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommunityUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityUser_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityUser_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityUser_usedEmotes(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommunityUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityUser_usedEmotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsedEmotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityUser_usedEmotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityUser_usedChannelPoints(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommunityUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityUser_usedChannelPoints(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsedChannelPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityUser_usedChannelPoints(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityUsersResponse_users(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommunityUsersResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityUsersResponse_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.CommunityUser)
	fc.Result = res
	return ec.marshalNCommunityUser2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityUsersResponse_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityUsersResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CommunityUser_id(ctx, field)
			case "twitchProfile":
				return ec.fieldContext_CommunityUser_twitchProfile(ctx, field)
			case "watchedMs":
				return ec.fieldContext_CommunityUser_watchedMs(ctx, field)
			case "messages":
				return ec.fieldContext_CommunityUser_messages(ctx, field)
			case "usedEmotes":
				return ec.fieldContext_CommunityUser_usedEmotes(ctx, field)
			case "usedChannelPoints":
				return ec.fieldContext_CommunityUser_usedChannelPoints(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunityUser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityUsersResponse_total(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CommunityUsersResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityUsersResponse_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityUsersResponse_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityUsersResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Dashboard_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Dashboard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Dashboard_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Dashboard_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Dashboard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Dashboard_flags(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Dashboard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Dashboard_flags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Flags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChannelRolePermissionEnum)
	fc.Result = res
	return ec.marshalNChannelRolePermissionEnum2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Dashboard_flags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Dashboard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ChannelRolePermissionEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Dashboard_twitchProfile(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Dashboard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Dashboard_twitchProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Dashboard().TwitchProfile(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalNTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Dashboard_twitchProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Dashboard",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_donationAmount(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_donationAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DonationAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_donationAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_donationCurrency(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_donationCurrency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DonationCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_donationCurrency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_donationMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_donationMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DonationMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_donationMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_donationUserName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_donationUserName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DonationUserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_donationUserName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_raidedViewersCount(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_raidedViewersCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RaidedViewersCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_raidedViewersCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_raidedFromUserName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_raidedFromUserName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RaidedFromUserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_raidedFromUserName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_raidedFromDisplayName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_raidedFromDisplayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RaidedFromDisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_raidedFromDisplayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_followUserName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_followUserName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowUserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_followUserName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_followUserDisplayName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_followUserDisplayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowUserDisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_followUserDisplayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_redemptionTitle(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_redemptionTitle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedemptionTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_redemptionTitle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_redemptionInput(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_redemptionInput(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedemptionInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_redemptionInput(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_redemptionUserName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_redemptionUserName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedemptionUserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_redemptionUserName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_redemptionUserDisplayName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_redemptionUserDisplayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedemptionUserDisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_redemptionUserDisplayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_redemptionCost(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_redemptionCost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedemptionCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_redemptionCost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_subLevel(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_subLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_subLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_subUserName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_subUserName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubUserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_subUserName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_subUserDisplayName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_subUserDisplayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubUserDisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_subUserDisplayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_reSubLevel(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_reSubLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReSubLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_reSubLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_reSubUserName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_reSubUserName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReSubUserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_reSubUserName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_reSubUserDisplayName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_reSubUserDisplayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReSubUserDisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_reSubUserDisplayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_reSubMonths(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_reSubMonths(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReSubMonths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_reSubMonths(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_reSubStreak(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_reSubStreak(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReSubStreak, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_reSubStreak(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_subGiftLevel(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_subGiftLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubGiftLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_subGiftLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_subGiftUserName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_subGiftUserName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubGiftUserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_subGiftUserName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_subGiftUserDisplayName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_subGiftUserDisplayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubGiftUserDisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_subGiftUserDisplayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_subGiftTargetUserName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_subGiftTargetUserName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubGiftTargetUserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_subGiftTargetUserName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_subGiftTargetUserDisplayName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_subGiftTargetUserDisplayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubGiftTargetUserDisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_subGiftTargetUserDisplayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_firstUserMessageUserName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_firstUserMessageUserName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstUserMessageUserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_firstUserMessageUserName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_firstUserMessageUserDisplayName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_firstUserMessageUserDisplayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstUserMessageUserDisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_firstUserMessageUserDisplayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_firstUserMessageMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_firstUserMessageMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstUserMessageMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_firstUserMessageMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_banReason(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_banReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BanReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_banReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_banEndsInMinutes(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_banEndsInMinutes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BanEndsInMinutes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_banEndsInMinutes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_bannedUserName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_bannedUserName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BannedUserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_bannedUserName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_bannedUserLogin(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_bannedUserLogin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BannedUserLogin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_bannedUserLogin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_moderatorName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_moderatorName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModeratorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_moderatorName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_moderatorDisplayName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_moderatorDisplayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModeratorDisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_moderatorDisplayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_message(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_userLogin(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_userLogin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserLogin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_userLogin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventData_userName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventData_userName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventData_userName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventListPayload_events(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventListPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventListPayload_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.DashboardEventPayload)
	fc.Result = res
	return ec.marshalNDashboardEventPayload2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardEventPayloadᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventListPayload_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventListPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_DashboardEventPayload_userId(ctx, field)
			case "type":
				return ec.fieldContext_DashboardEventPayload_type(ctx, field)
			case "createdAt":
				return ec.fieldContext_DashboardEventPayload_createdAt(ctx, field)
			case "data":
				return ec.fieldContext_DashboardEventPayload_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardEventPayload", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventPayload_userId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventPayload_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventPayload_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventPayload_type(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventPayload_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.DashboardEventType)
	fc.Result = res
	return ec.marshalNDashboardEventType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardEventType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventPayload_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DashboardEventType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventPayload_createdAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventPayload_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventPayload_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardEventPayload_data(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardEventPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardEventPayload_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DashboardEventData)
	fc.Result = res
	return ec.marshalNDashboardEventData2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardEventData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardEventPayload_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardEventPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "donationAmount":
				return ec.fieldContext_DashboardEventData_donationAmount(ctx, field)
			case "donationCurrency":
				return ec.fieldContext_DashboardEventData_donationCurrency(ctx, field)
			case "donationMessage":
				return ec.fieldContext_DashboardEventData_donationMessage(ctx, field)
			case "donationUserName":
				return ec.fieldContext_DashboardEventData_donationUserName(ctx, field)
			case "raidedViewersCount":
				return ec.fieldContext_DashboardEventData_raidedViewersCount(ctx, field)
			case "raidedFromUserName":
				return ec.fieldContext_DashboardEventData_raidedFromUserName(ctx, field)
			case "raidedFromDisplayName":
				return ec.fieldContext_DashboardEventData_raidedFromDisplayName(ctx, field)
			case "followUserName":
				return ec.fieldContext_DashboardEventData_followUserName(ctx, field)
			case "followUserDisplayName":
				return ec.fieldContext_DashboardEventData_followUserDisplayName(ctx, field)
			case "redemptionTitle":
				return ec.fieldContext_DashboardEventData_redemptionTitle(ctx, field)
			case "redemptionInput":
				return ec.fieldContext_DashboardEventData_redemptionInput(ctx, field)
			case "redemptionUserName":
				return ec.fieldContext_DashboardEventData_redemptionUserName(ctx, field)
			case "redemptionUserDisplayName":
				return ec.fieldContext_DashboardEventData_redemptionUserDisplayName(ctx, field)
			case "redemptionCost":
				return ec.fieldContext_DashboardEventData_redemptionCost(ctx, field)
			case "subLevel":
				return ec.fieldContext_DashboardEventData_subLevel(ctx, field)
			case "subUserName":
				return ec.fieldContext_DashboardEventData_subUserName(ctx, field)
			case "subUserDisplayName":
				return ec.fieldContext_DashboardEventData_subUserDisplayName(ctx, field)
			case "reSubLevel":
				return ec.fieldContext_DashboardEventData_reSubLevel(ctx, field)
			case "reSubUserName":
				return ec.fieldContext_DashboardEventData_reSubUserName(ctx, field)
			case "reSubUserDisplayName":
				return ec.fieldContext_DashboardEventData_reSubUserDisplayName(ctx, field)
			case "reSubMonths":
				return ec.fieldContext_DashboardEventData_reSubMonths(ctx, field)
			case "reSubStreak":
				return ec.fieldContext_DashboardEventData_reSubStreak(ctx, field)
			case "subGiftLevel":
				return ec.fieldContext_DashboardEventData_subGiftLevel(ctx, field)
			case "subGiftUserName":
				return ec.fieldContext_DashboardEventData_subGiftUserName(ctx, field)
			case "subGiftUserDisplayName":
				return ec.fieldContext_DashboardEventData_subGiftUserDisplayName(ctx, field)
			case "subGiftTargetUserName":
				return ec.fieldContext_DashboardEventData_subGiftTargetUserName(ctx, field)
			case "subGiftTargetUserDisplayName":
				return ec.fieldContext_DashboardEventData_subGiftTargetUserDisplayName(ctx, field)
			case "firstUserMessageUserName":
				return ec.fieldContext_DashboardEventData_firstUserMessageUserName(ctx, field)
			case "firstUserMessageUserDisplayName":
				return ec.fieldContext_DashboardEventData_firstUserMessageUserDisplayName(ctx, field)
			case "firstUserMessageMessage":
				return ec.fieldContext_DashboardEventData_firstUserMessageMessage(ctx, field)
			case "banReason":
				return ec.fieldContext_DashboardEventData_banReason(ctx, field)
			case "banEndsInMinutes":
				return ec.fieldContext_DashboardEventData_banEndsInMinutes(ctx, field)
			case "bannedUserName":
				return ec.fieldContext_DashboardEventData_bannedUserName(ctx, field)
			case "bannedUserLogin":
				return ec.fieldContext_DashboardEventData_bannedUserLogin(ctx, field)
			case "moderatorName":
				return ec.fieldContext_DashboardEventData_moderatorName(ctx, field)
			case "moderatorDisplayName":
				return ec.fieldContext_DashboardEventData_moderatorDisplayName(ctx, field)
			case "message":
				return ec.fieldContext_DashboardEventData_message(ctx, field)
			case "userLogin":
				return ec.fieldContext_DashboardEventData_userLogin(ctx, field)
			case "userName":
				return ec.fieldContext_DashboardEventData_userName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardEventData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardStats_categoryId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardStats_categoryId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardStats_categoryId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardStats_categoryName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardStats_categoryName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardStats_categoryName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardStats_viewers(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardStats_viewers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Viewers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardStats_viewers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardStats_startedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardStats_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardStats_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardStats_title(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardStats_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardStats_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardStats_chatMessages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardStats_chatMessages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChatMessages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardStats_chatMessages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardStats_followers(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardStats_followers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Followers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardStats_followers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardStats_usedEmotes(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardStats_usedEmotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsedEmotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardStats_usedEmotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardStats_requestedSongs(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardStats_requestedSongs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestedSongs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardStats_requestedSongs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardStats_subs(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DashboardStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardStats_subs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardStats_subs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DuelGame_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DuelGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DuelGame_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DuelGame_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DuelGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DuelGame_userCooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DuelGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DuelGame_userCooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DuelGame_userCooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DuelGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DuelGame_globalCooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DuelGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DuelGame_globalCooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GlobalCooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DuelGame_globalCooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DuelGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DuelGame_timeoutSeconds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DuelGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DuelGame_timeoutSeconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeoutSeconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DuelGame_timeoutSeconds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DuelGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DuelGame_startMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DuelGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DuelGame_startMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DuelGame_startMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DuelGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DuelGame_resultMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DuelGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DuelGame_resultMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResultMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DuelGame_resultMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DuelGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DuelGame_secondsToAccept(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DuelGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DuelGame_secondsToAccept(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondsToAccept, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DuelGame_secondsToAccept(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DuelGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DuelGame_pointsPerWin(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DuelGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DuelGame_pointsPerWin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointsPerWin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DuelGame_pointsPerWin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DuelGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DuelGame_pointsPerLose(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DuelGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DuelGame_pointsPerLose(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointsPerLose, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DuelGame_pointsPerLose(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DuelGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DuelGame_bothDiePercent(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DuelGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DuelGame_bothDiePercent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BothDiePercent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DuelGame_bothDiePercent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DuelGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DuelGame_bothDieMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DuelGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DuelGame_bothDieMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BothDieMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DuelGame_bothDieMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DuelGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EightBallGame_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EightBallGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EightBallGame_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EightBallGame_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EightBallGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EightBallGame_answers(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EightBallGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EightBallGame_answers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EightBallGame_answers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EightBallGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmoteStatisticTopUser_userId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmoteStatisticTopUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmoteStatisticTopUser_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmoteStatisticTopUser_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmoteStatisticTopUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmoteStatisticTopUser_twitchProfile(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmoteStatisticTopUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmoteStatisticTopUser_twitchProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EmoteStatisticTopUser().TwitchProfile(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalNTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmoteStatisticTopUser_twitchProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmoteStatisticTopUser",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmoteStatisticTopUser_count(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmoteStatisticTopUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmoteStatisticTopUser_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmoteStatisticTopUser_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmoteStatisticTopUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmoteStatisticUsage_count(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmoteStatisticUsage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmoteStatisticUsage_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmoteStatisticUsage_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmoteStatisticUsage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmoteStatisticUsage_timestamp(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmoteStatisticUsage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmoteStatisticUsage_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmoteStatisticUsage_timestamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmoteStatisticUsage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmoteStatisticUserUsage_userId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmoteStatisticUserUsage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmoteStatisticUserUsage_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmoteStatisticUserUsage_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmoteStatisticUserUsage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmoteStatisticUserUsage_twitchProfile(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmoteStatisticUserUsage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmoteStatisticUserUsage_twitchProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EmoteStatisticUserUsage().TwitchProfile(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalNTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmoteStatisticUserUsage_twitchProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmoteStatisticUserUsage",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmoteStatisticUserUsage_date(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmoteStatisticUserUsage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmoteStatisticUserUsage_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmoteStatisticUserUsage_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmoteStatisticUserUsage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmotesStatistic_emoteName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmotesStatistic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmotesStatistic_emoteName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmoteName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmotesStatistic_emoteName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmotesStatistic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmotesStatistic_totalUsages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmotesStatistic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmotesStatistic_totalUsages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalUsages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmotesStatistic_totalUsages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmotesStatistic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmotesStatistic_lastUsedTimestamp(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmotesStatistic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmotesStatistic_lastUsedTimestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUsedTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmotesStatistic_lastUsedTimestamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmotesStatistic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmotesStatistic_graphicUsages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmotesStatistic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmotesStatistic_graphicUsages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GraphicUsages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.EmoteStatisticUsage)
	fc.Result = res
	return ec.marshalNEmoteStatisticUsage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticUsageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmotesStatistic_graphicUsages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmotesStatistic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_EmoteStatisticUsage_count(ctx, field)
			case "timestamp":
				return ec.fieldContext_EmoteStatisticUsage_timestamp(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmoteStatisticUsage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmotesStatisticEmoteDetailedResponse_emoteName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmotesStatisticEmoteDetailedResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmotesStatisticEmoteDetailedResponse_emoteName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmoteName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmotesStatisticEmoteDetailedResponse_emoteName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmotesStatisticEmoteDetailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmotesStatisticEmoteDetailedResponse_totalUsages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmotesStatisticEmoteDetailedResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmotesStatisticEmoteDetailedResponse_totalUsages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalUsages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmotesStatisticEmoteDetailedResponse_totalUsages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmotesStatisticEmoteDetailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmotesStatisticEmoteDetailedResponse_lastUsedTimestamp(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmotesStatisticEmoteDetailedResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmotesStatisticEmoteDetailedResponse_lastUsedTimestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUsedTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmotesStatisticEmoteDetailedResponse_lastUsedTimestamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmotesStatisticEmoteDetailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmotesStatisticEmoteDetailedResponse_graphicUsages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmotesStatisticEmoteDetailedResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmotesStatisticEmoteDetailedResponse_graphicUsages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GraphicUsages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.EmoteStatisticUsage)
	fc.Result = res
	return ec.marshalNEmoteStatisticUsage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticUsageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmotesStatisticEmoteDetailedResponse_graphicUsages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmotesStatisticEmoteDetailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_EmoteStatisticUsage_count(ctx, field)
			case "timestamp":
				return ec.fieldContext_EmoteStatisticUsage_timestamp(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmoteStatisticUsage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmotesStatisticEmoteDetailedResponse_usagesHistory(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmotesStatisticEmoteDetailedResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmotesStatisticEmoteDetailedResponse_usagesHistory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsagesHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.EmoteStatisticUserUsage)
	fc.Result = res
	return ec.marshalNEmoteStatisticUserUsage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticUserUsageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmotesStatisticEmoteDetailedResponse_usagesHistory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmotesStatisticEmoteDetailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_EmoteStatisticUserUsage_userId(ctx, field)
			case "twitchProfile":
				return ec.fieldContext_EmoteStatisticUserUsage_twitchProfile(ctx, field)
			case "date":
				return ec.fieldContext_EmoteStatisticUserUsage_date(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmoteStatisticUserUsage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmotesStatisticEmoteDetailedResponse_usagesByUsersTotal(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmotesStatisticEmoteDetailedResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmotesStatisticEmoteDetailedResponse_usagesByUsersTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsagesByUsersTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmotesStatisticEmoteDetailedResponse_usagesByUsersTotal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmotesStatisticEmoteDetailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmotesStatisticEmoteDetailedResponse_topUsers(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmotesStatisticEmoteDetailedResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmotesStatisticEmoteDetailedResponse_topUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopUsers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.EmoteStatisticTopUser)
	fc.Result = res
	return ec.marshalNEmoteStatisticTopUser2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticTopUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmotesStatisticEmoteDetailedResponse_topUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmotesStatisticEmoteDetailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_EmoteStatisticTopUser_userId(ctx, field)
			case "twitchProfile":
				return ec.fieldContext_EmoteStatisticTopUser_twitchProfile(ctx, field)
			case "count":
				return ec.fieldContext_EmoteStatisticTopUser_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmoteStatisticTopUser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmotesStatisticEmoteDetailedResponse_topUsersTotal(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmotesStatisticEmoteDetailedResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmotesStatisticEmoteDetailedResponse_topUsersTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TopUsersTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmotesStatisticEmoteDetailedResponse_topUsersTotal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmotesStatisticEmoteDetailedResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmotesStatisticResponse_emotes(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmotesStatisticResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmotesStatisticResponse_emotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Emotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.EmotesStatistic)
	fc.Result = res
	return ec.marshalNEmotesStatistic2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmotesStatisticResponse_emotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmotesStatisticResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emoteName":
				return ec.fieldContext_EmotesStatistic_emoteName(ctx, field)
			case "totalUsages":
				return ec.fieldContext_EmotesStatistic_totalUsages(ctx, field)
			case "lastUsedTimestamp":
				return ec.fieldContext_EmotesStatistic_lastUsedTimestamp(ctx, field)
			case "graphicUsages":
				return ec.fieldContext_EmotesStatistic_graphicUsages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmotesStatistic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmotesStatisticResponse_total(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.EmotesStatisticResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmotesStatisticResponse_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmotesStatisticResponse_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmotesStatisticResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Greeting_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Greeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Greeting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Greeting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Greeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Greeting_userId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Greeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Greeting_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Greeting_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Greeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Greeting_twitchProfile(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Greeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Greeting_twitchProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Greeting().TwitchProfile(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalNTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Greeting_twitchProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Greeting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Greeting_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Greeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Greeting_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Greeting_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Greeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Greeting_isReply(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Greeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Greeting_isReply(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReply, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Greeting_isReply(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Greeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Greeting_text(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Greeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Greeting_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Greeting_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Greeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Keyword_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Keyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Keyword_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Keyword_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Keyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Keyword_text(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Keyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Keyword_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Keyword_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Keyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Keyword_response(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Keyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Keyword_response(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Response, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Keyword_response(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Keyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Keyword_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Keyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Keyword_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Keyword_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Keyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Keyword_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Keyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Keyword_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Keyword_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Keyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Keyword_isReply(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Keyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Keyword_isReply(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReply, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Keyword_isReply(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Keyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Keyword_isRegularExpression(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Keyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Keyword_isRegularExpression(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRegularExpression, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Keyword_isRegularExpression(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Keyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Keyword_usageCount(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Keyword) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Keyword_usageCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsageCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Keyword_usageCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Keyword",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_dropAllAuthSessions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_dropAllAuthSessions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DropAllAuthSessions(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_dropAllAuthSessions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_eventsubSubscribe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_eventsubSubscribe(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EventsubSubscribe(rctx, fc.Args["opts"].(gqlmodel.EventsubSubscribeInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_eventsubSubscribe(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_eventsubSubscribe_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_badgesDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_badgesDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BadgesDelete(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_badgesDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_badgesDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_badgesUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_badgesUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BadgesUpdate(rctx, fc.Args["id"].(string), fc.Args["opts"].(gqlmodel.TwirBadgeUpdateOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.Badge); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Badge`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Badge)
	fc.Result = res
	return ec.marshalNBadge2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐBadge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_badgesUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Badge_id(ctx, field)
			case "name":
				return ec.fieldContext_Badge_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Badge_createdAt(ctx, field)
			case "fileUrl":
				return ec.fieldContext_Badge_fileUrl(ctx, field)
			case "enabled":
				return ec.fieldContext_Badge_enabled(ctx, field)
			case "users":
				return ec.fieldContext_Badge_users(ctx, field)
			case "ffzSlot":
				return ec.fieldContext_Badge_ffzSlot(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Badge", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_badgesUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_badgesCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_badgesCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BadgesCreate(rctx, fc.Args["opts"].(gqlmodel.TwirBadgeCreateOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.Badge); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Badge`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Badge)
	fc.Result = res
	return ec.marshalNBadge2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐBadge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_badgesCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Badge_id(ctx, field)
			case "name":
				return ec.fieldContext_Badge_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Badge_createdAt(ctx, field)
			case "fileUrl":
				return ec.fieldContext_Badge_fileUrl(ctx, field)
			case "enabled":
				return ec.fieldContext_Badge_enabled(ctx, field)
			case "users":
				return ec.fieldContext_Badge_users(ctx, field)
			case "ffzSlot":
				return ec.fieldContext_Badge_ffzSlot(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Badge", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_badgesCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_badgesAddUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_badgesAddUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BadgesAddUser(rctx, fc.Args["id"].(string), fc.Args["userId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_badgesAddUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_badgesAddUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_badgesRemoveUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_badgesRemoveUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BadgesRemoveUser(rctx, fc.Args["id"].(string), fc.Args["userId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_badgesRemoveUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_badgesRemoveUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_switchUserBan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_switchUserBan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SwitchUserBan(rctx, fc.Args["userId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_switchUserBan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_switchUserBan_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_switchUserAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_switchUserAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SwitchUserAdmin(rctx, fc.Args["userId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_switchUserAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_switchUserAdmin_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_channelAlertsCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_channelAlertsCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChannelAlertsCreate(rctx, fc.Args["input"].(gqlmodel.ChannelAlertCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_ALERTS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.ChannelAlert); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.ChannelAlert`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChannelAlert)
	fc.Result = res
	return ec.marshalNChannelAlert2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelAlert(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_channelAlertsCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelAlert_id(ctx, field)
			case "name":
				return ec.fieldContext_ChannelAlert_name(ctx, field)
			case "audioId":
				return ec.fieldContext_ChannelAlert_audioId(ctx, field)
			case "audioVolume":
				return ec.fieldContext_ChannelAlert_audioVolume(ctx, field)
			case "commandIds":
				return ec.fieldContext_ChannelAlert_commandIds(ctx, field)
			case "rewardIds":
				return ec.fieldContext_ChannelAlert_rewardIds(ctx, field)
			case "greetingsIds":
				return ec.fieldContext_ChannelAlert_greetingsIds(ctx, field)
			case "keywordsIds":
				return ec.fieldContext_ChannelAlert_keywordsIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelAlert", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_channelAlertsCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_channelAlertsUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_channelAlertsUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChannelAlertsUpdate(rctx, fc.Args["id"].(string), fc.Args["input"].(gqlmodel.ChannelAlertUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_ALERTS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.ChannelAlert); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.ChannelAlert`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChannelAlert)
	fc.Result = res
	return ec.marshalNChannelAlert2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelAlert(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_channelAlertsUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelAlert_id(ctx, field)
			case "name":
				return ec.fieldContext_ChannelAlert_name(ctx, field)
			case "audioId":
				return ec.fieldContext_ChannelAlert_audioId(ctx, field)
			case "audioVolume":
				return ec.fieldContext_ChannelAlert_audioVolume(ctx, field)
			case "commandIds":
				return ec.fieldContext_ChannelAlert_commandIds(ctx, field)
			case "rewardIds":
				return ec.fieldContext_ChannelAlert_rewardIds(ctx, field)
			case "greetingsIds":
				return ec.fieldContext_ChannelAlert_greetingsIds(ctx, field)
			case "keywordsIds":
				return ec.fieldContext_ChannelAlert_keywordsIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelAlert", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_channelAlertsUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_channelAlertsDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_channelAlertsDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChannelAlertsDelete(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_ALERTS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_channelAlertsDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_channelAlertsDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateChatAlerts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateChatAlerts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateChatAlerts(rctx, fc.Args["input"].(gqlmodel.ChatAlertsInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_ALERTS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.ChatAlerts); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.ChatAlerts`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlerts)
	fc.Result = res
	return ec.marshalNChatAlerts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlerts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateChatAlerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "followers":
				return ec.fieldContext_ChatAlerts_followers(ctx, field)
			case "raids":
				return ec.fieldContext_ChatAlerts_raids(ctx, field)
			case "donations":
				return ec.fieldContext_ChatAlerts_donations(ctx, field)
			case "subscribers":
				return ec.fieldContext_ChatAlerts_subscribers(ctx, field)
			case "cheers":
				return ec.fieldContext_ChatAlerts_cheers(ctx, field)
			case "redemptions":
				return ec.fieldContext_ChatAlerts_redemptions(ctx, field)
			case "firstUserMessage":
				return ec.fieldContext_ChatAlerts_firstUserMessage(ctx, field)
			case "streamOnline":
				return ec.fieldContext_ChatAlerts_streamOnline(ctx, field)
			case "streamOffline":
				return ec.fieldContext_ChatAlerts_streamOffline(ctx, field)
			case "chatCleared":
				return ec.fieldContext_ChatAlerts_chatCleared(ctx, field)
			case "ban":
				return ec.fieldContext_ChatAlerts_ban(ctx, field)
			case "unbanRequestCreate":
				return ec.fieldContext_ChatAlerts_unbanRequestCreate(ctx, field)
			case "unbanRequestResolve":
				return ec.fieldContext_ChatAlerts_unbanRequestResolve(ctx, field)
			case "messageDelete":
				return ec.fieldContext_ChatAlerts_messageDelete(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlerts", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateChatAlerts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_commandsGroupsCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_commandsGroupsCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CommandsGroupsCreate(rctx, fc.Args["opts"].(gqlmodel.CommandsGroupsCreateOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_COMMANDS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_commandsGroupsCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_commandsGroupsCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_commandsGroupsUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_commandsGroupsUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CommandsGroupsUpdate(rctx, fc.Args["id"].(string), fc.Args["opts"].(gqlmodel.CommandsGroupsUpdateOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_COMMANDS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_commandsGroupsUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_commandsGroupsUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_commandsGroupsRemove(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_commandsGroupsRemove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CommandsGroupsRemove(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_COMMANDS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_commandsGroupsRemove(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_commandsGroupsRemove_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_commandsCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_commandsCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CommandsCreate(rctx, fc.Args["opts"].(gqlmodel.CommandsCreateOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_COMMANDS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.CommandCreatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.CommandCreatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.CommandCreatePayload)
	fc.Result = res
	return ec.marshalNCommandCreatePayload2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandCreatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_commandsCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CommandCreatePayload_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommandCreatePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_commandsCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_commandsUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_commandsUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CommandsUpdate(rctx, fc.Args["id"].(string), fc.Args["opts"].(gqlmodel.CommandsUpdateOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_COMMANDS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_commandsUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_commandsUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_commandsRemove(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_commandsRemove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CommandsRemove(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_COMMANDS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_commandsRemove(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_commandsRemove_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_communityResetStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_communityResetStats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CommunityResetStats(rctx, fc.Args["type"].(gqlmodel.CommunityUsersResetType))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_communityResetStats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_communityResetStats_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_gamesEightBallUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_gamesEightBallUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().GamesEightBallUpdate(rctx, fc.Args["opts"].(gqlmodel.EightBallGameOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_GAMES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.EightBallGame); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.EightBallGame`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.EightBallGame)
	fc.Result = res
	return ec.marshalNEightBallGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEightBallGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_gamesEightBallUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_EightBallGame_enabled(ctx, field)
			case "answers":
				return ec.fieldContext_EightBallGame_answers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EightBallGame", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_gamesEightBallUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_gamesDuelUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_gamesDuelUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().GamesDuelUpdate(rctx, fc.Args["opts"].(gqlmodel.DuelGameOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_GAMES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.DuelGame); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.DuelGame`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DuelGame)
	fc.Result = res
	return ec.marshalNDuelGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDuelGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_gamesDuelUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_DuelGame_enabled(ctx, field)
			case "userCooldown":
				return ec.fieldContext_DuelGame_userCooldown(ctx, field)
			case "globalCooldown":
				return ec.fieldContext_DuelGame_globalCooldown(ctx, field)
			case "timeoutSeconds":
				return ec.fieldContext_DuelGame_timeoutSeconds(ctx, field)
			case "startMessage":
				return ec.fieldContext_DuelGame_startMessage(ctx, field)
			case "resultMessage":
				return ec.fieldContext_DuelGame_resultMessage(ctx, field)
			case "secondsToAccept":
				return ec.fieldContext_DuelGame_secondsToAccept(ctx, field)
			case "pointsPerWin":
				return ec.fieldContext_DuelGame_pointsPerWin(ctx, field)
			case "pointsPerLose":
				return ec.fieldContext_DuelGame_pointsPerLose(ctx, field)
			case "bothDiePercent":
				return ec.fieldContext_DuelGame_bothDiePercent(ctx, field)
			case "bothDieMessage":
				return ec.fieldContext_DuelGame_bothDieMessage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DuelGame", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_gamesDuelUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_gamesRussianRouletteUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_gamesRussianRouletteUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().GamesRussianRouletteUpdate(rctx, fc.Args["opts"].(gqlmodel.RussianRouletteGameOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_GAMES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RussianRouletteGame); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.RussianRouletteGame`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RussianRouletteGame)
	fc.Result = res
	return ec.marshalNRussianRouletteGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRussianRouletteGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_gamesRussianRouletteUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_RussianRouletteGame_enabled(ctx, field)
			case "canBeUsedByModerator":
				return ec.fieldContext_RussianRouletteGame_canBeUsedByModerator(ctx, field)
			case "timeoutSeconds":
				return ec.fieldContext_RussianRouletteGame_timeoutSeconds(ctx, field)
			case "decisionSeconds":
				return ec.fieldContext_RussianRouletteGame_decisionSeconds(ctx, field)
			case "initMessage":
				return ec.fieldContext_RussianRouletteGame_initMessage(ctx, field)
			case "surviveMessage":
				return ec.fieldContext_RussianRouletteGame_surviveMessage(ctx, field)
			case "deathMessage":
				return ec.fieldContext_RussianRouletteGame_deathMessage(ctx, field)
			case "chargedBullets":
				return ec.fieldContext_RussianRouletteGame_chargedBullets(ctx, field)
			case "tumberSize":
				return ec.fieldContext_RussianRouletteGame_tumberSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RussianRouletteGame", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_gamesRussianRouletteUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_gamesSeppukuUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_gamesSeppukuUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().GamesSeppukuUpdate(rctx, fc.Args["opts"].(gqlmodel.SeppukuGameOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_GAMES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.SeppukuGame); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.SeppukuGame`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.SeppukuGame)
	fc.Result = res
	return ec.marshalNSeppukuGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSeppukuGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_gamesSeppukuUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_SeppukuGame_enabled(ctx, field)
			case "timeoutSeconds":
				return ec.fieldContext_SeppukuGame_timeoutSeconds(ctx, field)
			case "timeoutModerators":
				return ec.fieldContext_SeppukuGame_timeoutModerators(ctx, field)
			case "message":
				return ec.fieldContext_SeppukuGame_message(ctx, field)
			case "messageModerators":
				return ec.fieldContext_SeppukuGame_messageModerators(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SeppukuGame", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_gamesSeppukuUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_gamesVotebanUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_gamesVotebanUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().GamesVotebanUpdate(rctx, fc.Args["opts"].(gqlmodel.VotebanGameOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_GAMES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.VotebanGame); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.VotebanGame`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.VotebanGame)
	fc.Result = res
	return ec.marshalNVotebanGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVotebanGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_gamesVotebanUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_VotebanGame_enabled(ctx, field)
			case "timeoutSeconds":
				return ec.fieldContext_VotebanGame_timeoutSeconds(ctx, field)
			case "timeoutModerators":
				return ec.fieldContext_VotebanGame_timeoutModerators(ctx, field)
			case "initMessage":
				return ec.fieldContext_VotebanGame_initMessage(ctx, field)
			case "banMessage":
				return ec.fieldContext_VotebanGame_banMessage(ctx, field)
			case "banMessageModerators":
				return ec.fieldContext_VotebanGame_banMessageModerators(ctx, field)
			case "surviveMessage":
				return ec.fieldContext_VotebanGame_surviveMessage(ctx, field)
			case "surviveMessageModerators":
				return ec.fieldContext_VotebanGame_surviveMessageModerators(ctx, field)
			case "neededVotes":
				return ec.fieldContext_VotebanGame_neededVotes(ctx, field)
			case "voteDuration":
				return ec.fieldContext_VotebanGame_voteDuration(ctx, field)
			case "votingMode":
				return ec.fieldContext_VotebanGame_votingMode(ctx, field)
			case "chatVotesWordsPositive":
				return ec.fieldContext_VotebanGame_chatVotesWordsPositive(ctx, field)
			case "chatVotesWordsNegative":
				return ec.fieldContext_VotebanGame_chatVotesWordsNegative(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VotebanGame", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_gamesVotebanUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_greetingsCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_greetingsCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().GreetingsCreate(rctx, fc.Args["opts"].(gqlmodel.GreetingsCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_GREETINGS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.Greeting); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Greeting`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Greeting)
	fc.Result = res
	return ec.marshalNGreeting2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐGreeting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_greetingsCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Greeting_id(ctx, field)
			case "userId":
				return ec.fieldContext_Greeting_userId(ctx, field)
			case "twitchProfile":
				return ec.fieldContext_Greeting_twitchProfile(ctx, field)
			case "enabled":
				return ec.fieldContext_Greeting_enabled(ctx, field)
			case "isReply":
				return ec.fieldContext_Greeting_isReply(ctx, field)
			case "text":
				return ec.fieldContext_Greeting_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Greeting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_greetingsCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_greetingsUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_greetingsUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().GreetingsUpdate(rctx, fc.Args["id"].(string), fc.Args["opts"].(gqlmodel.GreetingsUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_GREETINGS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.Greeting); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Greeting`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Greeting)
	fc.Result = res
	return ec.marshalNGreeting2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐGreeting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_greetingsUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Greeting_id(ctx, field)
			case "userId":
				return ec.fieldContext_Greeting_userId(ctx, field)
			case "twitchProfile":
				return ec.fieldContext_Greeting_twitchProfile(ctx, field)
			case "enabled":
				return ec.fieldContext_Greeting_enabled(ctx, field)
			case "isReply":
				return ec.fieldContext_Greeting_isReply(ctx, field)
			case "text":
				return ec.fieldContext_Greeting_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Greeting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_greetingsUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_greetingsRemove(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_greetingsRemove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().GreetingsRemove(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_GREETINGS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_greetingsRemove(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_greetingsRemove_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_keywordCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_keywordCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().KeywordCreate(rctx, fc.Args["opts"].(gqlmodel.KeywordCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_KEYWORDS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.Keyword); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Keyword`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Keyword)
	fc.Result = res
	return ec.marshalNKeyword2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_keywordCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Keyword_id(ctx, field)
			case "text":
				return ec.fieldContext_Keyword_text(ctx, field)
			case "response":
				return ec.fieldContext_Keyword_response(ctx, field)
			case "enabled":
				return ec.fieldContext_Keyword_enabled(ctx, field)
			case "cooldown":
				return ec.fieldContext_Keyword_cooldown(ctx, field)
			case "isReply":
				return ec.fieldContext_Keyword_isReply(ctx, field)
			case "isRegularExpression":
				return ec.fieldContext_Keyword_isRegularExpression(ctx, field)
			case "usageCount":
				return ec.fieldContext_Keyword_usageCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Keyword", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_keywordCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_keywordUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_keywordUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().KeywordUpdate(rctx, fc.Args["id"].(string), fc.Args["opts"].(gqlmodel.KeywordUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_KEYWORDS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.Keyword); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Keyword`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Keyword)
	fc.Result = res
	return ec.marshalNKeyword2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐKeyword(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_keywordUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Keyword_id(ctx, field)
			case "text":
				return ec.fieldContext_Keyword_text(ctx, field)
			case "response":
				return ec.fieldContext_Keyword_response(ctx, field)
			case "enabled":
				return ec.fieldContext_Keyword_enabled(ctx, field)
			case "cooldown":
				return ec.fieldContext_Keyword_cooldown(ctx, field)
			case "isReply":
				return ec.fieldContext_Keyword_isReply(ctx, field)
			case "isRegularExpression":
				return ec.fieldContext_Keyword_isRegularExpression(ctx, field)
			case "usageCount":
				return ec.fieldContext_Keyword_usageCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Keyword", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_keywordUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_keywordRemove(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_keywordRemove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().KeywordRemove(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_KEYWORDS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_keywordRemove(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_keywordRemove_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_notificationsCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_notificationsCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().NotificationsCreate(rctx, fc.Args["text"].(*string), fc.Args["editorJsJson"].(*string), fc.Args["userId"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.AdminNotification); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.AdminNotification`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.AdminNotification)
	fc.Result = res
	return ec.marshalNAdminNotification2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminNotification(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_notificationsCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AdminNotification_id(ctx, field)
			case "text":
				return ec.fieldContext_AdminNotification_text(ctx, field)
			case "userId":
				return ec.fieldContext_AdminNotification_userId(ctx, field)
			case "twitchProfile":
				return ec.fieldContext_AdminNotification_twitchProfile(ctx, field)
			case "createdAt":
				return ec.fieldContext_AdminNotification_createdAt(ctx, field)
			case "editorJsJson":
				return ec.fieldContext_AdminNotification_editorJsJson(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminNotification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_notificationsCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_notificationsUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_notificationsUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().NotificationsUpdate(rctx, fc.Args["id"].(string), fc.Args["opts"].(gqlmodel.NotificationUpdateOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.AdminNotification); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.AdminNotification`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.AdminNotification)
	fc.Result = res
	return ec.marshalNAdminNotification2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminNotification(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_notificationsUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AdminNotification_id(ctx, field)
			case "text":
				return ec.fieldContext_AdminNotification_text(ctx, field)
			case "userId":
				return ec.fieldContext_AdminNotification_userId(ctx, field)
			case "twitchProfile":
				return ec.fieldContext_AdminNotification_twitchProfile(ctx, field)
			case "createdAt":
				return ec.fieldContext_AdminNotification_createdAt(ctx, field)
			case "editorJsJson":
				return ec.fieldContext_AdminNotification_editorJsJson(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminNotification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_notificationsUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_notificationsDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_notificationsDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().NotificationsDelete(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_notificationsDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_notificationsDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_chatOverlayUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_chatOverlayUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChatOverlayUpdate(rctx, fc.Args["id"].(string), fc.Args["opts"].(gqlmodel.ChatOverlayMutateOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_OVERLAYS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_chatOverlayUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_chatOverlayUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_chatOverlayCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_chatOverlayCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChatOverlayCreate(rctx, fc.Args["opts"].(gqlmodel.ChatOverlayMutateOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_OVERLAYS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_chatOverlayCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_chatOverlayCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_chatOverlayDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_chatOverlayDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChatOverlayDelete(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_OVERLAYS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_chatOverlayDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_chatOverlayDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_nowPlayingOverlayUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_nowPlayingOverlayUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().NowPlayingOverlayUpdate(rctx, fc.Args["id"].(string), fc.Args["opts"].(gqlmodel.NowPlayingOverlayMutateOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_OVERLAYS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_nowPlayingOverlayUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_nowPlayingOverlayUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_nowPlayingOverlayCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_nowPlayingOverlayCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().NowPlayingOverlayCreate(rctx, fc.Args["opts"].(gqlmodel.NowPlayingOverlayMutateOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_OVERLAYS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_nowPlayingOverlayCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_nowPlayingOverlayCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_nowPlayingOverlayDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_nowPlayingOverlayDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().NowPlayingOverlayDelete(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_OVERLAYS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_nowPlayingOverlayDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_nowPlayingOverlayDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rolesCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rolesCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RolesCreate(rctx, fc.Args["opts"].(gqlmodel.RolesCreateOrUpdateOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_ROLES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rolesCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rolesCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rolesUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rolesUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RolesUpdate(rctx, fc.Args["id"].(string), fc.Args["opts"].(gqlmodel.RolesCreateOrUpdateOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_ROLES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rolesUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rolesUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rolesRemove(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rolesRemove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RolesRemove(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_ROLES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rolesRemove(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rolesRemove_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_songRequestsUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_songRequestsUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SongRequestsUpdate(rctx, fc.Args["opts"].(gqlmodel.SongRequestsSettingsOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_SONG_REQUESTS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_songRequestsUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_songRequestsUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_timersCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_timersCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().TimersCreate(rctx, fc.Args["opts"].(gqlmodel.TimerCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_TIMERS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.Timer); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Timer`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Timer)
	fc.Result = res
	return ec.marshalNTimer2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_timersCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Timer_id(ctx, field)
			case "name":
				return ec.fieldContext_Timer_name(ctx, field)
			case "enabled":
				return ec.fieldContext_Timer_enabled(ctx, field)
			case "timeInterval":
				return ec.fieldContext_Timer_timeInterval(ctx, field)
			case "messageInterval":
				return ec.fieldContext_Timer_messageInterval(ctx, field)
			case "responses":
				return ec.fieldContext_Timer_responses(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Timer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_timersCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_timersUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_timersUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().TimersUpdate(rctx, fc.Args["id"].(string), fc.Args["opts"].(gqlmodel.TimerUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_TIMERS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.Timer); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Timer`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Timer)
	fc.Result = res
	return ec.marshalNTimer2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_timersUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Timer_id(ctx, field)
			case "name":
				return ec.fieldContext_Timer_name(ctx, field)
			case "enabled":
				return ec.fieldContext_Timer_enabled(ctx, field)
			case "timeInterval":
				return ec.fieldContext_Timer_timeInterval(ctx, field)
			case "messageInterval":
				return ec.fieldContext_Timer_messageInterval(ctx, field)
			case "responses":
				return ec.fieldContext_Timer_responses(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Timer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_timersUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_timersRemove(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_timersRemove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().TimersRemove(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_TIMERS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_timersRemove(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_timersRemove_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_authenticatedUserSelectDashboard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_authenticatedUserSelectDashboard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AuthenticatedUserSelectDashboard(rctx, fc.Args["dashboardId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_authenticatedUserSelectDashboard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_authenticatedUserSelectDashboard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_authenticatedUserUpdateSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_authenticatedUserUpdateSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AuthenticatedUserUpdateSettings(rctx, fc.Args["opts"].(gqlmodel.UserUpdateSettingsInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_authenticatedUserUpdateSettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_authenticatedUserUpdateSettings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_authenticatedUserRegenerateApiKey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_authenticatedUserRegenerateApiKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AuthenticatedUserRegenerateAPIKey(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_authenticatedUserRegenerateApiKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_authenticatedUserUpdatePublicPage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_authenticatedUserUpdatePublicPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AuthenticatedUserUpdatePublicPage(rctx, fc.Args["opts"].(gqlmodel.UserUpdatePublicSettingsInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_authenticatedUserUpdatePublicPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_authenticatedUserUpdatePublicPage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_logout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_logout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().Logout(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_logout(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_variablesCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_variablesCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().VariablesCreate(rctx, fc.Args["opts"].(gqlmodel.VariableCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_VARIABLES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.Variable); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Variable`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Variable)
	fc.Result = res
	return ec.marshalNVariable2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariable(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_variablesCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Variable_id(ctx, field)
			case "name":
				return ec.fieldContext_Variable_name(ctx, field)
			case "description":
				return ec.fieldContext_Variable_description(ctx, field)
			case "type":
				return ec.fieldContext_Variable_type(ctx, field)
			case "evalValue":
				return ec.fieldContext_Variable_evalValue(ctx, field)
			case "response":
				return ec.fieldContext_Variable_response(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Variable", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_variablesCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_variablesUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_variablesUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().VariablesUpdate(rctx, fc.Args["id"].(string), fc.Args["opts"].(gqlmodel.VariableUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_VARIABLES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.Variable); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Variable`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Variable)
	fc.Result = res
	return ec.marshalNVariable2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariable(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_variablesUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Variable_id(ctx, field)
			case "name":
				return ec.fieldContext_Variable_name(ctx, field)
			case "description":
				return ec.fieldContext_Variable_description(ctx, field)
			case "type":
				return ec.fieldContext_Variable_type(ctx, field)
			case "evalValue":
				return ec.fieldContext_Variable_evalValue(ctx, field)
			case "response":
				return ec.fieldContext_Variable_response(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Variable", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_variablesUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_variablesDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_variablesDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().VariablesDelete(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "MANAGE_VARIABLES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_variablesDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_variablesDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_executeScript(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_executeScript(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ExecuteScript(rctx, fc.Args["script"].(string), fc.Args["testAsUserName"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_executeScript(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_executeScript_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _NowPlayingOverlay_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.NowPlayingOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NowPlayingOverlay_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NowPlayingOverlay_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NowPlayingOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NowPlayingOverlay_preset(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.NowPlayingOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NowPlayingOverlay_preset(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Preset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.NowPlayingOverlayPreset)
	fc.Result = res
	return ec.marshalNNowPlayingOverlayPreset2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlayPreset(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NowPlayingOverlay_preset(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NowPlayingOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NowPlayingOverlayPreset does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NowPlayingOverlay_channelId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.NowPlayingOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NowPlayingOverlay_channelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NowPlayingOverlay_channelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NowPlayingOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NowPlayingOverlay_fontFamily(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.NowPlayingOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NowPlayingOverlay_fontFamily(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontFamily, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NowPlayingOverlay_fontFamily(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NowPlayingOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NowPlayingOverlay_fontWeight(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.NowPlayingOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NowPlayingOverlay_fontWeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FontWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NowPlayingOverlay_fontWeight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NowPlayingOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NowPlayingOverlay_backgroundColor(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.NowPlayingOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NowPlayingOverlay_backgroundColor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackgroundColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NowPlayingOverlay_backgroundColor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NowPlayingOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NowPlayingOverlay_showImage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.NowPlayingOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NowPlayingOverlay_showImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NowPlayingOverlay_showImage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NowPlayingOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NowPlayingOverlay_hideTimeout(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.NowPlayingOverlay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NowPlayingOverlay_hideTimeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HideTimeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NowPlayingOverlay_hideTimeout(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NowPlayingOverlay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NowPlayingOverlayTrack_artist(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.NowPlayingOverlayTrack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NowPlayingOverlayTrack_artist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Artist, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NowPlayingOverlayTrack_artist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NowPlayingOverlayTrack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NowPlayingOverlayTrack_title(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.NowPlayingOverlayTrack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NowPlayingOverlayTrack_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NowPlayingOverlayTrack_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NowPlayingOverlayTrack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NowPlayingOverlayTrack_imageUrl(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.NowPlayingOverlayTrack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NowPlayingOverlayTrack_imageUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NowPlayingOverlayTrack_imageUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NowPlayingOverlayTrack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCommand_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PublicCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCommand_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCommand_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCommand_description(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PublicCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCommand_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCommand_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCommand_aliases(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PublicCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCommand_aliases(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aliases, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCommand_aliases(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCommand_responses(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PublicCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCommand_responses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Responses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCommand_responses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCommand_cooldown(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PublicCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCommand_cooldown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cooldown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCommand_cooldown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCommand_cooldownType(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PublicCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCommand_cooldownType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CooldownType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCommand_cooldownType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCommand_module(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PublicCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCommand_module(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCommand_module(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCommand_permissions(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PublicCommand) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCommand_permissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.PublicCommandPermission)
	fc.Result = res
	return ec.marshalNPublicCommandPermission2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐPublicCommandPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCommand_permissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCommand",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_PublicCommandPermission_name(ctx, field)
			case "type":
				return ec.fieldContext_PublicCommandPermission_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PublicCommandPermission", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCommandPermission_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PublicCommandPermission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCommandPermission_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCommandPermission_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCommandPermission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCommandPermission_type(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PublicCommandPermission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCommandPermission_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCommandPermission_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCommandPermission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicSettings_description(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PublicSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicSettings_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicSettings_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicSettings_socialLinks(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PublicSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicSettings_socialLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SocialLinks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.SocialLink)
	fc.Result = res
	return ec.marshalNSocialLink2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSocialLinkᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicSettings_socialLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "title":
				return ec.fieldContext_SocialLink_title(ctx, field)
			case "href":
				return ec.fieldContext_SocialLink_href(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SocialLink", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_adminAuditLogs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_adminAuditLogs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AdminAuditLogs(rctx, fc.Args["input"].(gqlmodel.AdminAuditLogsInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.AdminAuditLogResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.AdminAuditLogResponse`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.AdminAuditLogResponse)
	fc.Result = res
	return ec.marshalNAdminAuditLogResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminAuditLogResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_adminAuditLogs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "logs":
				return ec.fieldContext_AdminAuditLogResponse_logs(ctx, field)
			case "total":
				return ec.fieldContext_AdminAuditLogResponse_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminAuditLogResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_adminAuditLogs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_twirBadges(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_twirBadges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TwirBadges(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.Badge)
	fc.Result = res
	return ec.marshalNBadge2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐBadgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_twirBadges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Badge_id(ctx, field)
			case "name":
				return ec.fieldContext_Badge_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Badge_createdAt(ctx, field)
			case "fileUrl":
				return ec.fieldContext_Badge_fileUrl(ctx, field)
			case "enabled":
				return ec.fieldContext_Badge_enabled(ctx, field)
			case "users":
				return ec.fieldContext_Badge_users(ctx, field)
			case "ffzSlot":
				return ec.fieldContext_Badge_ffzSlot(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Badge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_twirUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_twirUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().TwirUsers(rctx, fc.Args["opts"].(gqlmodel.TwirUsersSearchParams))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.TwirUsersResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.TwirUsersResponse`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUsersResponse)
	fc.Result = res
	return ec.marshalNTwirUsersResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUsersResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_twirUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "users":
				return ec.fieldContext_TwirUsersResponse_users(ctx, field)
			case "total":
				return ec.fieldContext_TwirUsersResponse_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUsersResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_twirUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_channelAlerts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_channelAlerts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ChannelAlerts(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_ALERTS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]gqlmodel.ChannelAlert); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.ChannelAlert`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChannelAlert)
	fc.Result = res
	return ec.marshalNChannelAlert2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelAlertᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_channelAlerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelAlert_id(ctx, field)
			case "name":
				return ec.fieldContext_ChannelAlert_name(ctx, field)
			case "audioId":
				return ec.fieldContext_ChannelAlert_audioId(ctx, field)
			case "audioVolume":
				return ec.fieldContext_ChannelAlert_audioVolume(ctx, field)
			case "commandIds":
				return ec.fieldContext_ChannelAlert_commandIds(ctx, field)
			case "rewardIds":
				return ec.fieldContext_ChannelAlert_rewardIds(ctx, field)
			case "greetingsIds":
				return ec.fieldContext_ChannelAlert_greetingsIds(ctx, field)
			case "keywordsIds":
				return ec.fieldContext_ChannelAlert_keywordsIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelAlert", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_chatAlerts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_chatAlerts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ChatAlerts(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_ALERTS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.ChatAlerts); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.ChatAlerts`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatAlerts)
	fc.Result = res
	return ec.marshalOChatAlerts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlerts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_chatAlerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "followers":
				return ec.fieldContext_ChatAlerts_followers(ctx, field)
			case "raids":
				return ec.fieldContext_ChatAlerts_raids(ctx, field)
			case "donations":
				return ec.fieldContext_ChatAlerts_donations(ctx, field)
			case "subscribers":
				return ec.fieldContext_ChatAlerts_subscribers(ctx, field)
			case "cheers":
				return ec.fieldContext_ChatAlerts_cheers(ctx, field)
			case "redemptions":
				return ec.fieldContext_ChatAlerts_redemptions(ctx, field)
			case "firstUserMessage":
				return ec.fieldContext_ChatAlerts_firstUserMessage(ctx, field)
			case "streamOnline":
				return ec.fieldContext_ChatAlerts_streamOnline(ctx, field)
			case "streamOffline":
				return ec.fieldContext_ChatAlerts_streamOffline(ctx, field)
			case "chatCleared":
				return ec.fieldContext_ChatAlerts_chatCleared(ctx, field)
			case "ban":
				return ec.fieldContext_ChatAlerts_ban(ctx, field)
			case "unbanRequestCreate":
				return ec.fieldContext_ChatAlerts_unbanRequestCreate(ctx, field)
			case "unbanRequestResolve":
				return ec.fieldContext_ChatAlerts_unbanRequestResolve(ctx, field)
			case "messageDelete":
				return ec.fieldContext_ChatAlerts_messageDelete(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatAlerts", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_commandsGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_commandsGroups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().CommandsGroups(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_COMMANDS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]gqlmodel.CommandGroup); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.CommandGroup`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.CommandGroup)
	fc.Result = res
	return ec.marshalNCommandGroup2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_commandsGroups(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CommandGroup_id(ctx, field)
			case "name":
				return ec.fieldContext_CommandGroup_name(ctx, field)
			case "color":
				return ec.fieldContext_CommandGroup_color(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommandGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_commands(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_commands(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Commands(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_COMMANDS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]gqlmodel.Command); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Command`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.Command)
	fc.Result = res
	return ec.marshalNCommand2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_commands(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Command_id(ctx, field)
			case "name":
				return ec.fieldContext_Command_name(ctx, field)
			case "description":
				return ec.fieldContext_Command_description(ctx, field)
			case "aliases":
				return ec.fieldContext_Command_aliases(ctx, field)
			case "responses":
				return ec.fieldContext_Command_responses(ctx, field)
			case "cooldown":
				return ec.fieldContext_Command_cooldown(ctx, field)
			case "cooldownType":
				return ec.fieldContext_Command_cooldownType(ctx, field)
			case "enabled":
				return ec.fieldContext_Command_enabled(ctx, field)
			case "visible":
				return ec.fieldContext_Command_visible(ctx, field)
			case "default":
				return ec.fieldContext_Command_default(ctx, field)
			case "defaultName":
				return ec.fieldContext_Command_defaultName(ctx, field)
			case "module":
				return ec.fieldContext_Command_module(ctx, field)
			case "isReply":
				return ec.fieldContext_Command_isReply(ctx, field)
			case "keepResponsesOrder":
				return ec.fieldContext_Command_keepResponsesOrder(ctx, field)
			case "deniedUsersIds":
				return ec.fieldContext_Command_deniedUsersIds(ctx, field)
			case "allowedUsersIds":
				return ec.fieldContext_Command_allowedUsersIds(ctx, field)
			case "rolesIds":
				return ec.fieldContext_Command_rolesIds(ctx, field)
			case "onlineOnly":
				return ec.fieldContext_Command_onlineOnly(ctx, field)
			case "cooldownRolesIds":
				return ec.fieldContext_Command_cooldownRolesIds(ctx, field)
			case "enabledCategories":
				return ec.fieldContext_Command_enabledCategories(ctx, field)
			case "requiredWatchTime":
				return ec.fieldContext_Command_requiredWatchTime(ctx, field)
			case "requiredMessages":
				return ec.fieldContext_Command_requiredMessages(ctx, field)
			case "requiredUsedChannelPoints":
				return ec.fieldContext_Command_requiredUsedChannelPoints(ctx, field)
			case "groupId":
				return ec.fieldContext_Command_groupId(ctx, field)
			case "group":
				return ec.fieldContext_Command_group(ctx, field)
			case "expiresAt":
				return ec.fieldContext_Command_expiresAt(ctx, field)
			case "expiresType":
				return ec.fieldContext_Command_expiresType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Command", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_commandsPublic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_commandsPublic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommandsPublic(rctx, fc.Args["channelId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.PublicCommand)
	fc.Result = res
	return ec.marshalNPublicCommand2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐPublicCommandᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_commandsPublic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_PublicCommand_name(ctx, field)
			case "description":
				return ec.fieldContext_PublicCommand_description(ctx, field)
			case "aliases":
				return ec.fieldContext_PublicCommand_aliases(ctx, field)
			case "responses":
				return ec.fieldContext_PublicCommand_responses(ctx, field)
			case "cooldown":
				return ec.fieldContext_PublicCommand_cooldown(ctx, field)
			case "cooldownType":
				return ec.fieldContext_PublicCommand_cooldownType(ctx, field)
			case "module":
				return ec.fieldContext_PublicCommand_module(ctx, field)
			case "permissions":
				return ec.fieldContext_PublicCommand_permissions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PublicCommand", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_commandsPublic_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_rewardsRedemptionsHistory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_rewardsRedemptionsHistory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RewardsRedemptionsHistory(rctx, fc.Args["opts"].(gqlmodel.TwitchRedemptionsOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.TwitchRedemptionResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.TwitchRedemptionResponse`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwitchRedemptionResponse)
	fc.Result = res
	return ec.marshalNTwitchRedemptionResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchRedemptionResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_rewardsRedemptionsHistory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "redemptions":
				return ec.fieldContext_TwitchRedemptionResponse_redemptions(ctx, field)
			case "total":
				return ec.fieldContext_TwitchRedemptionResponse_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwitchRedemptionResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_rewardsRedemptionsHistory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_communityUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_communityUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommunityUsers(rctx, fc.Args["opts"].(gqlmodel.CommunityUsersOpts))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.CommunityUsersResponse)
	fc.Result = res
	return ec.marshalNCommunityUsersResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUsersResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_communityUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "users":
				return ec.fieldContext_CommunityUsersResponse_users(ctx, field)
			case "total":
				return ec.fieldContext_CommunityUsersResponse_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunityUsersResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_communityUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_emotesStatistics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_emotesStatistics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().EmotesStatistics(rctx, fc.Args["opts"].(gqlmodel.EmotesStatisticsOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.EmotesStatisticResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.EmotesStatisticResponse`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.EmotesStatisticResponse)
	fc.Result = res
	return ec.marshalNEmotesStatisticResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_emotesStatistics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emotes":
				return ec.fieldContext_EmotesStatisticResponse_emotes(ctx, field)
			case "total":
				return ec.fieldContext_EmotesStatisticResponse_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmotesStatisticResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_emotesStatistics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_emotesStatisticEmoteDetailedInformation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_emotesStatisticEmoteDetailedInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().EmotesStatisticEmoteDetailedInformation(rctx, fc.Args["opts"].(gqlmodel.EmotesStatisticEmoteDetailedOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.EmotesStatisticEmoteDetailedResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.EmotesStatisticEmoteDetailedResponse`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.EmotesStatisticEmoteDetailedResponse)
	fc.Result = res
	return ec.marshalNEmotesStatisticEmoteDetailedResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticEmoteDetailedResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_emotesStatisticEmoteDetailedInformation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "emoteName":
				return ec.fieldContext_EmotesStatisticEmoteDetailedResponse_emoteName(ctx, field)
			case "totalUsages":
				return ec.fieldContext_EmotesStatisticEmoteDetailedResponse_totalUsages(ctx, field)
			case "lastUsedTimestamp":
				return ec.fieldContext_EmotesStatisticEmoteDetailedResponse_lastUsedTimestamp(ctx, field)
			case "graphicUsages":
				return ec.fieldContext_EmotesStatisticEmoteDetailedResponse_graphicUsages(ctx, field)
			case "usagesHistory":
				return ec.fieldContext_EmotesStatisticEmoteDetailedResponse_usagesHistory(ctx, field)
			case "usagesByUsersTotal":
				return ec.fieldContext_EmotesStatisticEmoteDetailedResponse_usagesByUsersTotal(ctx, field)
			case "topUsers":
				return ec.fieldContext_EmotesStatisticEmoteDetailedResponse_topUsers(ctx, field)
			case "topUsersTotal":
				return ec.fieldContext_EmotesStatisticEmoteDetailedResponse_topUsersTotal(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmotesStatisticEmoteDetailedResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_emotesStatisticEmoteDetailedInformation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_gamesEightBall(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gamesEightBall(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GamesEightBall(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_GAMES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.EightBallGame); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.EightBallGame`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.EightBallGame)
	fc.Result = res
	return ec.marshalNEightBallGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEightBallGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gamesEightBall(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_EightBallGame_enabled(ctx, field)
			case "answers":
				return ec.fieldContext_EightBallGame_answers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EightBallGame", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_gamesDuel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gamesDuel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GamesDuel(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_GAMES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.DuelGame); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.DuelGame`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DuelGame)
	fc.Result = res
	return ec.marshalNDuelGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDuelGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gamesDuel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_DuelGame_enabled(ctx, field)
			case "userCooldown":
				return ec.fieldContext_DuelGame_userCooldown(ctx, field)
			case "globalCooldown":
				return ec.fieldContext_DuelGame_globalCooldown(ctx, field)
			case "timeoutSeconds":
				return ec.fieldContext_DuelGame_timeoutSeconds(ctx, field)
			case "startMessage":
				return ec.fieldContext_DuelGame_startMessage(ctx, field)
			case "resultMessage":
				return ec.fieldContext_DuelGame_resultMessage(ctx, field)
			case "secondsToAccept":
				return ec.fieldContext_DuelGame_secondsToAccept(ctx, field)
			case "pointsPerWin":
				return ec.fieldContext_DuelGame_pointsPerWin(ctx, field)
			case "pointsPerLose":
				return ec.fieldContext_DuelGame_pointsPerLose(ctx, field)
			case "bothDiePercent":
				return ec.fieldContext_DuelGame_bothDiePercent(ctx, field)
			case "bothDieMessage":
				return ec.fieldContext_DuelGame_bothDieMessage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DuelGame", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_gamesRussianRoulette(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gamesRussianRoulette(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GamesRussianRoulette(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_GAMES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RussianRouletteGame); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.RussianRouletteGame`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RussianRouletteGame)
	fc.Result = res
	return ec.marshalNRussianRouletteGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRussianRouletteGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gamesRussianRoulette(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_RussianRouletteGame_enabled(ctx, field)
			case "canBeUsedByModerator":
				return ec.fieldContext_RussianRouletteGame_canBeUsedByModerator(ctx, field)
			case "timeoutSeconds":
				return ec.fieldContext_RussianRouletteGame_timeoutSeconds(ctx, field)
			case "decisionSeconds":
				return ec.fieldContext_RussianRouletteGame_decisionSeconds(ctx, field)
			case "initMessage":
				return ec.fieldContext_RussianRouletteGame_initMessage(ctx, field)
			case "surviveMessage":
				return ec.fieldContext_RussianRouletteGame_surviveMessage(ctx, field)
			case "deathMessage":
				return ec.fieldContext_RussianRouletteGame_deathMessage(ctx, field)
			case "chargedBullets":
				return ec.fieldContext_RussianRouletteGame_chargedBullets(ctx, field)
			case "tumberSize":
				return ec.fieldContext_RussianRouletteGame_tumberSize(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RussianRouletteGame", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_gamesSeppuku(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gamesSeppuku(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GamesSeppuku(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_GAMES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.SeppukuGame); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.SeppukuGame`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.SeppukuGame)
	fc.Result = res
	return ec.marshalNSeppukuGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSeppukuGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gamesSeppuku(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_SeppukuGame_enabled(ctx, field)
			case "timeoutSeconds":
				return ec.fieldContext_SeppukuGame_timeoutSeconds(ctx, field)
			case "timeoutModerators":
				return ec.fieldContext_SeppukuGame_timeoutModerators(ctx, field)
			case "message":
				return ec.fieldContext_SeppukuGame_message(ctx, field)
			case "messageModerators":
				return ec.fieldContext_SeppukuGame_messageModerators(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SeppukuGame", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_gamesVoteban(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gamesVoteban(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().GamesVoteban(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_GAMES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.VotebanGame); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.VotebanGame`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.VotebanGame)
	fc.Result = res
	return ec.marshalNVotebanGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVotebanGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gamesVoteban(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_VotebanGame_enabled(ctx, field)
			case "timeoutSeconds":
				return ec.fieldContext_VotebanGame_timeoutSeconds(ctx, field)
			case "timeoutModerators":
				return ec.fieldContext_VotebanGame_timeoutModerators(ctx, field)
			case "initMessage":
				return ec.fieldContext_VotebanGame_initMessage(ctx, field)
			case "banMessage":
				return ec.fieldContext_VotebanGame_banMessage(ctx, field)
			case "banMessageModerators":
				return ec.fieldContext_VotebanGame_banMessageModerators(ctx, field)
			case "surviveMessage":
				return ec.fieldContext_VotebanGame_surviveMessage(ctx, field)
			case "surviveMessageModerators":
				return ec.fieldContext_VotebanGame_surviveMessageModerators(ctx, field)
			case "neededVotes":
				return ec.fieldContext_VotebanGame_neededVotes(ctx, field)
			case "voteDuration":
				return ec.fieldContext_VotebanGame_voteDuration(ctx, field)
			case "votingMode":
				return ec.fieldContext_VotebanGame_votingMode(ctx, field)
			case "chatVotesWordsPositive":
				return ec.fieldContext_VotebanGame_chatVotesWordsPositive(ctx, field)
			case "chatVotesWordsNegative":
				return ec.fieldContext_VotebanGame_chatVotesWordsNegative(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VotebanGame", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_greetings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_greetings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Greetings(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_GREETINGS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]gqlmodel.Greeting); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Greeting`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.Greeting)
	fc.Result = res
	return ec.marshalNGreeting2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐGreetingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_greetings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Greeting_id(ctx, field)
			case "userId":
				return ec.fieldContext_Greeting_userId(ctx, field)
			case "twitchProfile":
				return ec.fieldContext_Greeting_twitchProfile(ctx, field)
			case "enabled":
				return ec.fieldContext_Greeting_enabled(ctx, field)
			case "isReply":
				return ec.fieldContext_Greeting_isReply(ctx, field)
			case "text":
				return ec.fieldContext_Greeting_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Greeting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_keywords(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_keywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Keywords(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_KEYWORDS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]gqlmodel.Keyword); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Keyword`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.Keyword)
	fc.Result = res
	return ec.marshalNKeyword2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐKeywordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_keywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Keyword_id(ctx, field)
			case "text":
				return ec.fieldContext_Keyword_text(ctx, field)
			case "response":
				return ec.fieldContext_Keyword_response(ctx, field)
			case "enabled":
				return ec.fieldContext_Keyword_enabled(ctx, field)
			case "cooldown":
				return ec.fieldContext_Keyword_cooldown(ctx, field)
			case "isReply":
				return ec.fieldContext_Keyword_isReply(ctx, field)
			case "isRegularExpression":
				return ec.fieldContext_Keyword_isRegularExpression(ctx, field)
			case "usageCount":
				return ec.fieldContext_Keyword_usageCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Keyword", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_notificationsByUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_notificationsByUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().NotificationsByUser(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]gqlmodel.UserNotification); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.UserNotification`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.UserNotification)
	fc.Result = res
	return ec.marshalNUserNotification2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐUserNotificationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_notificationsByUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserNotification_id(ctx, field)
			case "userId":
				return ec.fieldContext_UserNotification_userId(ctx, field)
			case "text":
				return ec.fieldContext_UserNotification_text(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserNotification_createdAt(ctx, field)
			case "editorJsJson":
				return ec.fieldContext_UserNotification_editorJsJson(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserNotification", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_notificationsByAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_notificationsByAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().NotificationsByAdmin(rctx, fc.Args["opts"].(gqlmodel.AdminNotificationsParams))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAdmin == nil {
				return nil, errors.New("directive isAdmin is not implemented")
			}
			return ec.directives.IsAdmin(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.AdminNotificationsResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.AdminNotificationsResponse`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.AdminNotificationsResponse)
	fc.Result = res
	return ec.marshalNAdminNotificationsResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminNotificationsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_notificationsByAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "notifications":
				return ec.fieldContext_AdminNotificationsResponse_notifications(ctx, field)
			case "total":
				return ec.fieldContext_AdminNotificationsResponse_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminNotificationsResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_notificationsByAdmin_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_chatOverlays(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_chatOverlays(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ChatOverlays(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_OVERLAYS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]gqlmodel.ChatOverlay); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.ChatOverlay`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChatOverlay)
	fc.Result = res
	return ec.marshalNChatOverlay2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlayᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_chatOverlays(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChatOverlay_id(ctx, field)
			case "messageHideTimeout":
				return ec.fieldContext_ChatOverlay_messageHideTimeout(ctx, field)
			case "messageShowDelay":
				return ec.fieldContext_ChatOverlay_messageShowDelay(ctx, field)
			case "preset":
				return ec.fieldContext_ChatOverlay_preset(ctx, field)
			case "fontSize":
				return ec.fieldContext_ChatOverlay_fontSize(ctx, field)
			case "hideCommands":
				return ec.fieldContext_ChatOverlay_hideCommands(ctx, field)
			case "hideBots":
				return ec.fieldContext_ChatOverlay_hideBots(ctx, field)
			case "fontFamily":
				return ec.fieldContext_ChatOverlay_fontFamily(ctx, field)
			case "showBadges":
				return ec.fieldContext_ChatOverlay_showBadges(ctx, field)
			case "showAnnounceBadge":
				return ec.fieldContext_ChatOverlay_showAnnounceBadge(ctx, field)
			case "textShadowColor":
				return ec.fieldContext_ChatOverlay_textShadowColor(ctx, field)
			case "textShadowSize":
				return ec.fieldContext_ChatOverlay_textShadowSize(ctx, field)
			case "chatBackgroundColor":
				return ec.fieldContext_ChatOverlay_chatBackgroundColor(ctx, field)
			case "direction":
				return ec.fieldContext_ChatOverlay_direction(ctx, field)
			case "fontWeight":
				return ec.fieldContext_ChatOverlay_fontWeight(ctx, field)
			case "fontStyle":
				return ec.fieldContext_ChatOverlay_fontStyle(ctx, field)
			case "paddingContainer":
				return ec.fieldContext_ChatOverlay_paddingContainer(ctx, field)
			case "animation":
				return ec.fieldContext_ChatOverlay_animation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatOverlay", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_chatOverlaysById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_chatOverlaysById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ChatOverlaysByID(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_OVERLAYS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.ChatOverlay); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.ChatOverlay`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChatOverlay)
	fc.Result = res
	return ec.marshalOChatOverlay2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlay(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_chatOverlaysById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChatOverlay_id(ctx, field)
			case "messageHideTimeout":
				return ec.fieldContext_ChatOverlay_messageHideTimeout(ctx, field)
			case "messageShowDelay":
				return ec.fieldContext_ChatOverlay_messageShowDelay(ctx, field)
			case "preset":
				return ec.fieldContext_ChatOverlay_preset(ctx, field)
			case "fontSize":
				return ec.fieldContext_ChatOverlay_fontSize(ctx, field)
			case "hideCommands":
				return ec.fieldContext_ChatOverlay_hideCommands(ctx, field)
			case "hideBots":
				return ec.fieldContext_ChatOverlay_hideBots(ctx, field)
			case "fontFamily":
				return ec.fieldContext_ChatOverlay_fontFamily(ctx, field)
			case "showBadges":
				return ec.fieldContext_ChatOverlay_showBadges(ctx, field)
			case "showAnnounceBadge":
				return ec.fieldContext_ChatOverlay_showAnnounceBadge(ctx, field)
			case "textShadowColor":
				return ec.fieldContext_ChatOverlay_textShadowColor(ctx, field)
			case "textShadowSize":
				return ec.fieldContext_ChatOverlay_textShadowSize(ctx, field)
			case "chatBackgroundColor":
				return ec.fieldContext_ChatOverlay_chatBackgroundColor(ctx, field)
			case "direction":
				return ec.fieldContext_ChatOverlay_direction(ctx, field)
			case "fontWeight":
				return ec.fieldContext_ChatOverlay_fontWeight(ctx, field)
			case "fontStyle":
				return ec.fieldContext_ChatOverlay_fontStyle(ctx, field)
			case "paddingContainer":
				return ec.fieldContext_ChatOverlay_paddingContainer(ctx, field)
			case "animation":
				return ec.fieldContext_ChatOverlay_animation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatOverlay", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_chatOverlaysById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_nowPlayingOverlays(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_nowPlayingOverlays(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().NowPlayingOverlays(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_OVERLAYS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]gqlmodel.NowPlayingOverlay); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.NowPlayingOverlay`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.NowPlayingOverlay)
	fc.Result = res
	return ec.marshalNNowPlayingOverlay2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlayᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_nowPlayingOverlays(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NowPlayingOverlay_id(ctx, field)
			case "preset":
				return ec.fieldContext_NowPlayingOverlay_preset(ctx, field)
			case "channelId":
				return ec.fieldContext_NowPlayingOverlay_channelId(ctx, field)
			case "fontFamily":
				return ec.fieldContext_NowPlayingOverlay_fontFamily(ctx, field)
			case "fontWeight":
				return ec.fieldContext_NowPlayingOverlay_fontWeight(ctx, field)
			case "backgroundColor":
				return ec.fieldContext_NowPlayingOverlay_backgroundColor(ctx, field)
			case "showImage":
				return ec.fieldContext_NowPlayingOverlay_showImage(ctx, field)
			case "hideTimeout":
				return ec.fieldContext_NowPlayingOverlay_hideTimeout(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NowPlayingOverlay", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_nowPlayingOverlaysById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_nowPlayingOverlaysById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().NowPlayingOverlaysByID(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_OVERLAYS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.NowPlayingOverlay); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.NowPlayingOverlay`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.NowPlayingOverlay)
	fc.Result = res
	return ec.marshalONowPlayingOverlay2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlay(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_nowPlayingOverlaysById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NowPlayingOverlay_id(ctx, field)
			case "preset":
				return ec.fieldContext_NowPlayingOverlay_preset(ctx, field)
			case "channelId":
				return ec.fieldContext_NowPlayingOverlay_channelId(ctx, field)
			case "fontFamily":
				return ec.fieldContext_NowPlayingOverlay_fontFamily(ctx, field)
			case "fontWeight":
				return ec.fieldContext_NowPlayingOverlay_fontWeight(ctx, field)
			case "backgroundColor":
				return ec.fieldContext_NowPlayingOverlay_backgroundColor(ctx, field)
			case "showImage":
				return ec.fieldContext_NowPlayingOverlay_showImage(ctx, field)
			case "hideTimeout":
				return ec.fieldContext_NowPlayingOverlay_hideTimeout(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NowPlayingOverlay", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_nowPlayingOverlaysById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_twitchRewards(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_twitchRewards(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().TwitchRewards(rctx, fc.Args["channelId"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]gqlmodel.TwitchReward); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.TwitchReward`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.TwitchReward)
	fc.Result = res
	return ec.marshalNTwitchReward2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchRewardᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_twitchRewards(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwitchReward_id(ctx, field)
			case "title":
				return ec.fieldContext_TwitchReward_title(ctx, field)
			case "cost":
				return ec.fieldContext_TwitchReward_cost(ctx, field)
			case "imageUrls":
				return ec.fieldContext_TwitchReward_imageUrls(ctx, field)
			case "backgroundColor":
				return ec.fieldContext_TwitchReward_backgroundColor(ctx, field)
			case "enabled":
				return ec.fieldContext_TwitchReward_enabled(ctx, field)
			case "usedTimes":
				return ec.fieldContext_TwitchReward_usedTimes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwitchReward", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_twitchRewards_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_roles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Roles(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_ROLES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]gqlmodel.Role); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Role`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.Role)
	fc.Result = res
	return ec.marshalNRole2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Role_id(ctx, field)
			case "channelId":
				return ec.fieldContext_Role_channelId(ctx, field)
			case "name":
				return ec.fieldContext_Role_name(ctx, field)
			case "type":
				return ec.fieldContext_Role_type(ctx, field)
			case "permissions":
				return ec.fieldContext_Role_permissions(ctx, field)
			case "settings":
				return ec.fieldContext_Role_settings(ctx, field)
			case "users":
				return ec.fieldContext_Role_users(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Role", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_songRequests(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_songRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SongRequests(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_SONG_REQUESTS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive1, permission)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.SongRequestsSettings); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.SongRequestsSettings`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.SongRequestsSettings)
	fc.Result = res
	return ec.marshalOSongRequestsSettings2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_songRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enabled":
				return ec.fieldContext_SongRequestsSettings_enabled(ctx, field)
			case "acceptOnlyWhenOnline":
				return ec.fieldContext_SongRequestsSettings_acceptOnlyWhenOnline(ctx, field)
			case "maxRequests":
				return ec.fieldContext_SongRequestsSettings_maxRequests(ctx, field)
			case "channelPointsRewardId":
				return ec.fieldContext_SongRequestsSettings_channelPointsRewardId(ctx, field)
			case "announcePlay":
				return ec.fieldContext_SongRequestsSettings_announcePlay(ctx, field)
			case "neededVotesForSkip":
				return ec.fieldContext_SongRequestsSettings_neededVotesForSkip(ctx, field)
			case "user":
				return ec.fieldContext_SongRequestsSettings_user(ctx, field)
			case "song":
				return ec.fieldContext_SongRequestsSettings_song(ctx, field)
			case "denyList":
				return ec.fieldContext_SongRequestsSettings_denyList(ctx, field)
			case "translations":
				return ec.fieldContext_SongRequestsSettings_translations(ctx, field)
			case "takeSongFromDonationMessages":
				return ec.fieldContext_SongRequestsSettings_takeSongFromDonationMessages(ctx, field)
			case "playerNoCookieMode":
				return ec.fieldContext_SongRequestsSettings_playerNoCookieMode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SongRequestsSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_songRequestsSearchChannelOrVideo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_songRequestsSearchChannelOrVideo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SongRequestsSearchChannelOrVideo(rctx, fc.Args["opts"].(gqlmodel.SongRequestsSearchChannelOrVideoOpts))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.SongRequestsSearchChannelOrVideoResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.SongRequestsSearchChannelOrVideoResponse`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.SongRequestsSearchChannelOrVideoResponse)
	fc.Result = res
	return ec.marshalNSongRequestsSearchChannelOrVideoResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSearchChannelOrVideoResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_songRequestsSearchChannelOrVideo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_SongRequestsSearchChannelOrVideoResponse_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SongRequestsSearchChannelOrVideoResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_songRequestsSearchChannelOrVideo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_twirStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_twirStats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TwirStats(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirStats)
	fc.Result = res
	return ec.marshalNTwirStats2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirStats(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_twirStats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "channels":
				return ec.fieldContext_TwirStats_channels(ctx, field)
			case "createdCommands":
				return ec.fieldContext_TwirStats_createdCommands(ctx, field)
			case "viewers":
				return ec.fieldContext_TwirStats_viewers(ctx, field)
			case "messages":
				return ec.fieldContext_TwirStats_messages(ctx, field)
			case "usedEmotes":
				return ec.fieldContext_TwirStats_usedEmotes(ctx, field)
			case "usedCommands":
				return ec.fieldContext_TwirStats_usedCommands(ctx, field)
			case "streamers":
				return ec.fieldContext_TwirStats_streamers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirStats", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_timers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_timers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Timers(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_TIMERS")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]gqlmodel.Timer); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Timer`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.Timer)
	fc.Result = res
	return ec.marshalNTimer2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_timers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Timer_id(ctx, field)
			case "name":
				return ec.fieldContext_Timer_name(ctx, field)
			case "enabled":
				return ec.fieldContext_Timer_enabled(ctx, field)
			case "timeInterval":
				return ec.fieldContext_Timer_timeInterval(ctx, field)
			case "messageInterval":
				return ec.fieldContext_Timer_messageInterval(ctx, field)
			case "responses":
				return ec.fieldContext_Timer_responses(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Timer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_twitchGetUserById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_twitchGetUserById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TwitchGetUserByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalOTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_twitchGetUserById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_twitchGetUserById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_twitchGetUserByName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_twitchGetUserByName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TwitchGetUserByName(rctx, fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalOTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_twitchGetUserByName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_twitchGetUserByName_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_twitchGetChannelRewards(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_twitchGetChannelRewards(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TwitchGetChannelRewards(rctx, fc.Args["channelId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirTwitchChannelRewardResponse)
	fc.Result = res
	return ec.marshalNTwirTwitchChannelRewardResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelRewardResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_twitchGetChannelRewards(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "partnerOrAffiliate":
				return ec.fieldContext_TwirTwitchChannelRewardResponse_partnerOrAffiliate(ctx, field)
			case "rewards":
				return ec.fieldContext_TwirTwitchChannelRewardResponse_rewards(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirTwitchChannelRewardResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_twitchGetChannelRewards_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_twitchGetChannelBadges(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_twitchGetChannelBadges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TwitchGetChannelBadges(rctx, fc.Args["channelId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirTwitchChannelBadgeResponse)
	fc.Result = res
	return ec.marshalNTwirTwitchChannelBadgeResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelBadgeResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_twitchGetChannelBadges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "badges":
				return ec.fieldContext_TwirTwitchChannelBadgeResponse_badges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirTwitchChannelBadgeResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_twitchGetChannelBadges_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_twitchGetGlobalBadges(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_twitchGetGlobalBadges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TwitchGetGlobalBadges(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirTwitchGlobalBadgeResponse)
	fc.Result = res
	return ec.marshalNTwirTwitchGlobalBadgeResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchGlobalBadgeResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_twitchGetGlobalBadges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "badges":
				return ec.fieldContext_TwirTwitchGlobalBadgeResponse_badges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirTwitchGlobalBadgeResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_auditLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_auditLog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuditLog(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]gqlmodel.AuditLog); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.AuditLog`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.AuditLog)
	fc.Result = res
	return ec.marshalNAuditLog2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_auditLog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AuditLog_id(ctx, field)
			case "system":
				return ec.fieldContext_AuditLog_system(ctx, field)
			case "operationType":
				return ec.fieldContext_AuditLog_operationType(ctx, field)
			case "oldValue":
				return ec.fieldContext_AuditLog_oldValue(ctx, field)
			case "newValue":
				return ec.fieldContext_AuditLog_newValue(ctx, field)
			case "objectId":
				return ec.fieldContext_AuditLog_objectId(ctx, field)
			case "userId":
				return ec.fieldContext_AuditLog_userId(ctx, field)
			case "createdAt":
				return ec.fieldContext_AuditLog_createdAt(ctx, field)
			case "user":
				return ec.fieldContext_AuditLog_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuditLog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_authenticatedUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_authenticatedUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuthenticatedUser(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.AuthenticatedUser); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.AuthenticatedUser`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.AuthenticatedUser)
	fc.Result = res
	return ec.marshalNAuthenticatedUser2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuthenticatedUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_authenticatedUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AuthenticatedUser_id(ctx, field)
			case "isBotAdmin":
				return ec.fieldContext_AuthenticatedUser_isBotAdmin(ctx, field)
			case "isBanned":
				return ec.fieldContext_AuthenticatedUser_isBanned(ctx, field)
			case "isEnabled":
				return ec.fieldContext_AuthenticatedUser_isEnabled(ctx, field)
			case "isBotModerator":
				return ec.fieldContext_AuthenticatedUser_isBotModerator(ctx, field)
			case "apiKey":
				return ec.fieldContext_AuthenticatedUser_apiKey(ctx, field)
			case "hideOnLandingPage":
				return ec.fieldContext_AuthenticatedUser_hideOnLandingPage(ctx, field)
			case "botId":
				return ec.fieldContext_AuthenticatedUser_botId(ctx, field)
			case "twitchProfile":
				return ec.fieldContext_AuthenticatedUser_twitchProfile(ctx, field)
			case "selectedDashboardId":
				return ec.fieldContext_AuthenticatedUser_selectedDashboardId(ctx, field)
			case "selectedDashboardTwitchUser":
				return ec.fieldContext_AuthenticatedUser_selectedDashboardTwitchUser(ctx, field)
			case "availableDashboards":
				return ec.fieldContext_AuthenticatedUser_availableDashboards(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthenticatedUser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_userPublicSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_userPublicSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserPublicSettings(rctx, fc.Args["userId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.PublicSettings)
	fc.Result = res
	return ec.marshalNPublicSettings2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐPublicSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_userPublicSettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext_PublicSettings_description(ctx, field)
			case "socialLinks":
				return ec.fieldContext_PublicSettings_socialLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PublicSettings", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_userPublicSettings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_authLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_authLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AuthLink(rctx, fc.Args["redirectTo"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_authLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_authLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_variables(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_variables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Variables(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}
		directive3 := func(ctx context.Context) (interface{}, error) {
			permission, err := ec.unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, "VIEW_VARIABLES")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasChannelRolesDashboardPermission == nil {
				return nil, errors.New("directive hasChannelRolesDashboardPermission is not implemented")
			}
			return ec.directives.HasChannelRolesDashboardPermission(ctx, nil, directive2, permission)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]gqlmodel.Variable); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.Variable`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.Variable)
	fc.Result = res
	return ec.marshalNVariable2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_variables(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Variable_id(ctx, field)
			case "name":
				return ec.fieldContext_Variable_name(ctx, field)
			case "description":
				return ec.fieldContext_Variable_description(ctx, field)
			case "type":
				return ec.fieldContext_Variable_type(ctx, field)
			case "evalValue":
				return ec.fieldContext_Variable_evalValue(ctx, field)
			case "response":
				return ec.fieldContext_Variable_response(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Variable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_variablesBuiltIn(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_variablesBuiltIn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().VariablesBuiltIn(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]gqlmodel.BuiltInVariable); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.BuiltInVariable`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.BuiltInVariable)
	fc.Result = res
	return ec.marshalNBuiltInVariable2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐBuiltInVariableᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_variablesBuiltIn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_BuiltInVariable_name(ctx, field)
			case "example":
				return ec.fieldContext_BuiltInVariable_example(ctx, field)
			case "description":
				return ec.fieldContext_BuiltInVariable_description(ctx, field)
			case "visible":
				return ec.fieldContext_BuiltInVariable_visible(ctx, field)
			case "canBeUsedInRegistry":
				return ec.fieldContext_BuiltInVariable_canBeUsedInRegistry(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BuiltInVariable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_channelId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_channelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_channelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_type(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.RoleTypeEnum)
	fc.Result = res
	return ec.marshalNRoleTypeEnum2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRoleTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RoleTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_permissions(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_permissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.ChannelRolePermissionEnum)
	fc.Result = res
	return ec.marshalNChannelRolePermissionEnum2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_permissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ChannelRolePermissionEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_settings(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_settings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RoleSettings)
	fc.Result = res
	return ec.marshalNRoleSettings2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRoleSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_settings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "requiredWatchTime":
				return ec.fieldContext_RoleSettings_requiredWatchTime(ctx, field)
			case "requiredMessages":
				return ec.fieldContext_RoleSettings_requiredMessages(ctx, field)
			case "requiredUserChannelPoints":
				return ec.fieldContext_RoleSettings_requiredUserChannelPoints(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RoleSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Role_users(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Role) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Role_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Role().Users(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalNTwirUserTwitchInfo2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Role_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleSettings_requiredWatchTime(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RoleSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleSettings_requiredWatchTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiredWatchTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleSettings_requiredWatchTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleSettings_requiredMessages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RoleSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleSettings_requiredMessages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiredMessages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleSettings_requiredMessages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RoleSettings_requiredUserChannelPoints(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RoleSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RoleSettings_requiredUserChannelPoints(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiredUserChannelPoints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RoleSettings_requiredUserChannelPoints(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RoleSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RussianRouletteGame_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RussianRouletteGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RussianRouletteGame_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RussianRouletteGame_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RussianRouletteGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RussianRouletteGame_canBeUsedByModerator(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RussianRouletteGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RussianRouletteGame_canBeUsedByModerator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanBeUsedByModerator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RussianRouletteGame_canBeUsedByModerator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RussianRouletteGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RussianRouletteGame_timeoutSeconds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RussianRouletteGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RussianRouletteGame_timeoutSeconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeoutSeconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RussianRouletteGame_timeoutSeconds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RussianRouletteGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RussianRouletteGame_decisionSeconds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RussianRouletteGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RussianRouletteGame_decisionSeconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecisionSeconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RussianRouletteGame_decisionSeconds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RussianRouletteGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RussianRouletteGame_initMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RussianRouletteGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RussianRouletteGame_initMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RussianRouletteGame_initMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RussianRouletteGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RussianRouletteGame_surviveMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RussianRouletteGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RussianRouletteGame_surviveMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SurviveMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RussianRouletteGame_surviveMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RussianRouletteGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RussianRouletteGame_deathMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RussianRouletteGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RussianRouletteGame_deathMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeathMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RussianRouletteGame_deathMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RussianRouletteGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RussianRouletteGame_chargedBullets(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RussianRouletteGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RussianRouletteGame_chargedBullets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargedBullets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RussianRouletteGame_chargedBullets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RussianRouletteGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RussianRouletteGame_tumberSize(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RussianRouletteGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RussianRouletteGame_tumberSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TumberSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RussianRouletteGame_tumberSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RussianRouletteGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SeppukuGame_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SeppukuGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SeppukuGame_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SeppukuGame_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SeppukuGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SeppukuGame_timeoutSeconds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SeppukuGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SeppukuGame_timeoutSeconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeoutSeconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SeppukuGame_timeoutSeconds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SeppukuGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SeppukuGame_timeoutModerators(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SeppukuGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SeppukuGame_timeoutModerators(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeoutModerators, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SeppukuGame_timeoutModerators(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SeppukuGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SeppukuGame_message(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SeppukuGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SeppukuGame_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SeppukuGame_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SeppukuGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SeppukuGame_messageModerators(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SeppukuGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SeppukuGame_messageModerators(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageModerators, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SeppukuGame_messageModerators(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SeppukuGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialLink_title(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SocialLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialLink_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialLink_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocialLink_href(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SocialLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocialLink_href(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Href, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocialLink_href(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocialLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsChannelTranslations_denied(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsChannelTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsChannelTranslations_denied(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Denied, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsChannelTranslations_denied(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsChannelTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsDenyList_users(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsDenyList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsDenyList_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsDenyList_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsDenyList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsDenyList_songs(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsDenyList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsDenyList_songs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Songs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsDenyList_songs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsDenyList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsDenyList_channels(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsDenyList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsDenyList_channels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Channels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsDenyList_channels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsDenyList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsDenyList_artistsNames(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsDenyList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsDenyList_artistsNames(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArtistsNames, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsDenyList_artistsNames(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsDenyList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsDenyList_words(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsDenyList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsDenyList_words(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Words, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsDenyList_words(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsDenyList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSearchChannelOrVideoItem_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSearchChannelOrVideoItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSearchChannelOrVideoItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSearchChannelOrVideoItem_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSearchChannelOrVideoItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSearchChannelOrVideoItem_title(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSearchChannelOrVideoItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSearchChannelOrVideoItem_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSearchChannelOrVideoItem_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSearchChannelOrVideoItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSearchChannelOrVideoItem_thumbnail(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSearchChannelOrVideoItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSearchChannelOrVideoItem_thumbnail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSearchChannelOrVideoItem_thumbnail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSearchChannelOrVideoItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSearchChannelOrVideoResponse_items(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSearchChannelOrVideoResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSearchChannelOrVideoResponse_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.SongRequestsSearchChannelOrVideoItem)
	fc.Result = res
	return ec.marshalNSongRequestsSearchChannelOrVideoItem2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSearchChannelOrVideoItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSearchChannelOrVideoResponse_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSearchChannelOrVideoResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SongRequestsSearchChannelOrVideoItem_id(ctx, field)
			case "title":
				return ec.fieldContext_SongRequestsSearchChannelOrVideoItem_title(ctx, field)
			case "thumbnail":
				return ec.fieldContext_SongRequestsSearchChannelOrVideoItem_thumbnail(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SongRequestsSearchChannelOrVideoItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSettings_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSettings_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSettings_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSettings_acceptOnlyWhenOnline(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSettings_acceptOnlyWhenOnline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AcceptOnlyWhenOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSettings_acceptOnlyWhenOnline(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSettings_maxRequests(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSettings_maxRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxRequests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSettings_maxRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSettings_channelPointsRewardId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSettings_channelPointsRewardId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelPointsRewardID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSettings_channelPointsRewardId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSettings_announcePlay(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSettings_announcePlay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnouncePlay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSettings_announcePlay(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSettings_neededVotesForSkip(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSettings_neededVotesForSkip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeededVotesForSkip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSettings_neededVotesForSkip(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSettings_user(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSettings_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.SongRequestsUserSettings)
	fc.Result = res
	return ec.marshalNSongRequestsUserSettings2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsUserSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSettings_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "maxRequests":
				return ec.fieldContext_SongRequestsUserSettings_maxRequests(ctx, field)
			case "minWatchTime":
				return ec.fieldContext_SongRequestsUserSettings_minWatchTime(ctx, field)
			case "minMessages":
				return ec.fieldContext_SongRequestsUserSettings_minMessages(ctx, field)
			case "minFollowTime":
				return ec.fieldContext_SongRequestsUserSettings_minFollowTime(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SongRequestsUserSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSettings_song(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSettings_song(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Song, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.SongRequestsSongSettings)
	fc.Result = res
	return ec.marshalNSongRequestsSongSettings2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSongSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSettings_song(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "minLength":
				return ec.fieldContext_SongRequestsSongSettings_minLength(ctx, field)
			case "maxLength":
				return ec.fieldContext_SongRequestsSongSettings_maxLength(ctx, field)
			case "minViews":
				return ec.fieldContext_SongRequestsSongSettings_minViews(ctx, field)
			case "acceptedCategories":
				return ec.fieldContext_SongRequestsSongSettings_acceptedCategories(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SongRequestsSongSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSettings_denyList(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSettings_denyList(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DenyList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.SongRequestsDenyList)
	fc.Result = res
	return ec.marshalNSongRequestsDenyList2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsDenyList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSettings_denyList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "users":
				return ec.fieldContext_SongRequestsDenyList_users(ctx, field)
			case "songs":
				return ec.fieldContext_SongRequestsDenyList_songs(ctx, field)
			case "channels":
				return ec.fieldContext_SongRequestsDenyList_channels(ctx, field)
			case "artistsNames":
				return ec.fieldContext_SongRequestsDenyList_artistsNames(ctx, field)
			case "words":
				return ec.fieldContext_SongRequestsDenyList_words(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SongRequestsDenyList", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSettings_translations(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSettings_translations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Translations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.SongRequestsTranslations)
	fc.Result = res
	return ec.marshalNSongRequestsTranslations2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsTranslations(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSettings_translations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "nowPlaying":
				return ec.fieldContext_SongRequestsTranslations_nowPlaying(ctx, field)
			case "notEnabled":
				return ec.fieldContext_SongRequestsTranslations_notEnabled(ctx, field)
			case "noText":
				return ec.fieldContext_SongRequestsTranslations_noText(ctx, field)
			case "acceptOnlyWhenOnline":
				return ec.fieldContext_SongRequestsTranslations_acceptOnlyWhenOnline(ctx, field)
			case "user":
				return ec.fieldContext_SongRequestsTranslations_user(ctx, field)
			case "song":
				return ec.fieldContext_SongRequestsTranslations_song(ctx, field)
			case "channel":
				return ec.fieldContext_SongRequestsTranslations_channel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SongRequestsTranslations", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSettings_takeSongFromDonationMessages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSettings_takeSongFromDonationMessages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TakeSongFromDonationMessages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSettings_takeSongFromDonationMessages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSettings_playerNoCookieMode(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSettings_playerNoCookieMode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlayerNoCookieMode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSettings_playerNoCookieMode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongSettings_minLength(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongSettings_minLength(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongSettings_minLength(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongSettings_maxLength(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongSettings_maxLength(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongSettings_maxLength(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongSettings_minViews(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongSettings_minViews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinViews, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongSettings_minViews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongSettings_acceptedCategories(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongSettings_acceptedCategories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AcceptedCategories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongSettings_acceptedCategories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongTranslations_denied(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongTranslations_denied(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Denied, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongTranslations_denied(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongTranslations_notFound(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongTranslations_notFound(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotFound, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongTranslations_notFound(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongTranslations_alreadyInQueue(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongTranslations_alreadyInQueue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlreadyInQueue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongTranslations_alreadyInQueue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongTranslations_ageRestrictions(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongTranslations_ageRestrictions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgeRestrictions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongTranslations_ageRestrictions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongTranslations_cannotGetInformation(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongTranslations_cannotGetInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CannotGetInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongTranslations_cannotGetInformation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongTranslations_live(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongTranslations_live(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Live, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongTranslations_live(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongTranslations_maxLength(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongTranslations_maxLength(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongTranslations_maxLength(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongTranslations_minLength(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongTranslations_minLength(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongTranslations_minLength(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongTranslations_requestedMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongTranslations_requestedMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestedMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongTranslations_requestedMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongTranslations_maximumOrdered(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongTranslations_maximumOrdered(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumOrdered, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongTranslations_maximumOrdered(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsSongTranslations_minViews(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsSongTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsSongTranslations_minViews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinViews, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsSongTranslations_minViews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsSongTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsTranslations_nowPlaying(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsTranslations_nowPlaying(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NowPlaying, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsTranslations_nowPlaying(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsTranslations_notEnabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsTranslations_notEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsTranslations_notEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsTranslations_noText(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsTranslations_noText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsTranslations_noText(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsTranslations_acceptOnlyWhenOnline(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsTranslations_acceptOnlyWhenOnline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AcceptOnlyWhenOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsTranslations_acceptOnlyWhenOnline(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsTranslations_user(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsTranslations_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.SongRequestsUserTranslations)
	fc.Result = res
	return ec.marshalNSongRequestsUserTranslations2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsUserTranslations(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsTranslations_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "denied":
				return ec.fieldContext_SongRequestsUserTranslations_denied(ctx, field)
			case "maxRequests":
				return ec.fieldContext_SongRequestsUserTranslations_maxRequests(ctx, field)
			case "minMessages":
				return ec.fieldContext_SongRequestsUserTranslations_minMessages(ctx, field)
			case "minWatched":
				return ec.fieldContext_SongRequestsUserTranslations_minWatched(ctx, field)
			case "minFollow":
				return ec.fieldContext_SongRequestsUserTranslations_minFollow(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SongRequestsUserTranslations", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsTranslations_song(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsTranslations_song(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Song, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.SongRequestsSongTranslations)
	fc.Result = res
	return ec.marshalNSongRequestsSongTranslations2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSongTranslations(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsTranslations_song(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "denied":
				return ec.fieldContext_SongRequestsSongTranslations_denied(ctx, field)
			case "notFound":
				return ec.fieldContext_SongRequestsSongTranslations_notFound(ctx, field)
			case "alreadyInQueue":
				return ec.fieldContext_SongRequestsSongTranslations_alreadyInQueue(ctx, field)
			case "ageRestrictions":
				return ec.fieldContext_SongRequestsSongTranslations_ageRestrictions(ctx, field)
			case "cannotGetInformation":
				return ec.fieldContext_SongRequestsSongTranslations_cannotGetInformation(ctx, field)
			case "live":
				return ec.fieldContext_SongRequestsSongTranslations_live(ctx, field)
			case "maxLength":
				return ec.fieldContext_SongRequestsSongTranslations_maxLength(ctx, field)
			case "minLength":
				return ec.fieldContext_SongRequestsSongTranslations_minLength(ctx, field)
			case "requestedMessage":
				return ec.fieldContext_SongRequestsSongTranslations_requestedMessage(ctx, field)
			case "maximumOrdered":
				return ec.fieldContext_SongRequestsSongTranslations_maximumOrdered(ctx, field)
			case "minViews":
				return ec.fieldContext_SongRequestsSongTranslations_minViews(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SongRequestsSongTranslations", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsTranslations_channel(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsTranslations_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Channel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.SongRequestsChannelTranslations)
	fc.Result = res
	return ec.marshalNSongRequestsChannelTranslations2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsChannelTranslations(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsTranslations_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "denied":
				return ec.fieldContext_SongRequestsChannelTranslations_denied(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SongRequestsChannelTranslations", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsUserSettings_maxRequests(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsUserSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsUserSettings_maxRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxRequests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsUserSettings_maxRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsUserSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsUserSettings_minWatchTime(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsUserSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsUserSettings_minWatchTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinWatchTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsUserSettings_minWatchTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsUserSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsUserSettings_minMessages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsUserSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsUserSettings_minMessages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinMessages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsUserSettings_minMessages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsUserSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsUserSettings_minFollowTime(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsUserSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsUserSettings_minFollowTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinFollowTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsUserSettings_minFollowTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsUserSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsUserTranslations_denied(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsUserTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsUserTranslations_denied(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Denied, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsUserTranslations_denied(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsUserTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsUserTranslations_maxRequests(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsUserTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsUserTranslations_maxRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxRequests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsUserTranslations_maxRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsUserTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsUserTranslations_minMessages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsUserTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsUserTranslations_minMessages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinMessages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsUserTranslations_minMessages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsUserTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsUserTranslations_minWatched(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsUserTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsUserTranslations_minWatched(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinWatched, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsUserTranslations_minWatched(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsUserTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SongRequestsUserTranslations_minFollow(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SongRequestsUserTranslations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SongRequestsUserTranslations_minFollow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinFollow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SongRequestsUserTranslations_minFollow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SongRequestsUserTranslations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_dashboardWidgetsEvents(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_dashboardWidgetsEvents(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().DashboardWidgetsEvents(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *gqlmodel.DashboardEventListPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.DashboardEventListPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *gqlmodel.DashboardEventListPayload):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNDashboardEventListPayload2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardEventListPayload(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_dashboardWidgetsEvents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "events":
				return ec.fieldContext_DashboardEventListPayload_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardEventListPayload", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_dashboardStats(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_dashboardStats(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().DashboardStats(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *gqlmodel.DashboardStats); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.DashboardStats`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *gqlmodel.DashboardStats):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNDashboardStats2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardStats(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_dashboardStats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "categoryId":
				return ec.fieldContext_DashboardStats_categoryId(ctx, field)
			case "categoryName":
				return ec.fieldContext_DashboardStats_categoryName(ctx, field)
			case "viewers":
				return ec.fieldContext_DashboardStats_viewers(ctx, field)
			case "startedAt":
				return ec.fieldContext_DashboardStats_startedAt(ctx, field)
			case "title":
				return ec.fieldContext_DashboardStats_title(ctx, field)
			case "chatMessages":
				return ec.fieldContext_DashboardStats_chatMessages(ctx, field)
			case "followers":
				return ec.fieldContext_DashboardStats_followers(ctx, field)
			case "usedEmotes":
				return ec.fieldContext_DashboardStats_usedEmotes(ctx, field)
			case "requestedSongs":
				return ec.fieldContext_DashboardStats_requestedSongs(ctx, field)
			case "subs":
				return ec.fieldContext_DashboardStats_subs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardStats", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_newNotification(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_newNotification(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().NewNotification(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *gqlmodel.UserNotification); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.UserNotification`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *gqlmodel.UserNotification):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNUserNotification2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐUserNotification(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_newNotification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserNotification_id(ctx, field)
			case "userId":
				return ec.fieldContext_UserNotification_userId(ctx, field)
			case "text":
				return ec.fieldContext_UserNotification_text(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserNotification_createdAt(ctx, field)
			case "editorJsJson":
				return ec.fieldContext_UserNotification_editorJsJson(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserNotification", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_chatOverlaySettings(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_chatOverlaySettings(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ChatOverlaySettings(rctx, fc.Args["id"].(string), fc.Args["apiKey"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *gqlmodel.ChatOverlay):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOChatOverlay2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlay(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_chatOverlaySettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChatOverlay_id(ctx, field)
			case "messageHideTimeout":
				return ec.fieldContext_ChatOverlay_messageHideTimeout(ctx, field)
			case "messageShowDelay":
				return ec.fieldContext_ChatOverlay_messageShowDelay(ctx, field)
			case "preset":
				return ec.fieldContext_ChatOverlay_preset(ctx, field)
			case "fontSize":
				return ec.fieldContext_ChatOverlay_fontSize(ctx, field)
			case "hideCommands":
				return ec.fieldContext_ChatOverlay_hideCommands(ctx, field)
			case "hideBots":
				return ec.fieldContext_ChatOverlay_hideBots(ctx, field)
			case "fontFamily":
				return ec.fieldContext_ChatOverlay_fontFamily(ctx, field)
			case "showBadges":
				return ec.fieldContext_ChatOverlay_showBadges(ctx, field)
			case "showAnnounceBadge":
				return ec.fieldContext_ChatOverlay_showAnnounceBadge(ctx, field)
			case "textShadowColor":
				return ec.fieldContext_ChatOverlay_textShadowColor(ctx, field)
			case "textShadowSize":
				return ec.fieldContext_ChatOverlay_textShadowSize(ctx, field)
			case "chatBackgroundColor":
				return ec.fieldContext_ChatOverlay_chatBackgroundColor(ctx, field)
			case "direction":
				return ec.fieldContext_ChatOverlay_direction(ctx, field)
			case "fontWeight":
				return ec.fieldContext_ChatOverlay_fontWeight(ctx, field)
			case "fontStyle":
				return ec.fieldContext_ChatOverlay_fontStyle(ctx, field)
			case "paddingContainer":
				return ec.fieldContext_ChatOverlay_paddingContainer(ctx, field)
			case "animation":
				return ec.fieldContext_ChatOverlay_animation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChatOverlay", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_chatOverlaySettings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_nowPlayingOverlaySettings(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_nowPlayingOverlaySettings(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().NowPlayingOverlaySettings(rctx, fc.Args["id"].(string), fc.Args["apiKey"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *gqlmodel.NowPlayingOverlay):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalONowPlayingOverlay2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlay(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_nowPlayingOverlaySettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NowPlayingOverlay_id(ctx, field)
			case "preset":
				return ec.fieldContext_NowPlayingOverlay_preset(ctx, field)
			case "channelId":
				return ec.fieldContext_NowPlayingOverlay_channelId(ctx, field)
			case "fontFamily":
				return ec.fieldContext_NowPlayingOverlay_fontFamily(ctx, field)
			case "fontWeight":
				return ec.fieldContext_NowPlayingOverlay_fontWeight(ctx, field)
			case "backgroundColor":
				return ec.fieldContext_NowPlayingOverlay_backgroundColor(ctx, field)
			case "showImage":
				return ec.fieldContext_NowPlayingOverlay_showImage(ctx, field)
			case "hideTimeout":
				return ec.fieldContext_NowPlayingOverlay_hideTimeout(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NowPlayingOverlay", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_nowPlayingOverlaySettings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_nowPlayingCurrentTrack(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_nowPlayingCurrentTrack(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().NowPlayingCurrentTrack(rctx, fc.Args["apiKey"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *gqlmodel.NowPlayingOverlayTrack):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalONowPlayingOverlayTrack2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlayTrack(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_nowPlayingCurrentTrack(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "artist":
				return ec.fieldContext_NowPlayingOverlayTrack_artist(ctx, field)
			case "title":
				return ec.fieldContext_NowPlayingOverlayTrack_title(ctx, field)
			case "imageUrl":
				return ec.fieldContext_NowPlayingOverlayTrack_imageUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NowPlayingOverlayTrack", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_nowPlayingCurrentTrack_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_auditLog(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_auditLog(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().AuditLog(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasAccessToSelectedDashboard == nil {
				return nil, errors.New("directive hasAccessToSelectedDashboard is not implemented")
			}
			return ec.directives.HasAccessToSelectedDashboard(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *gqlmodel.AuditLog); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.AuditLog`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *gqlmodel.AuditLog):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNAuditLog2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLog(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_auditLog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AuditLog_id(ctx, field)
			case "system":
				return ec.fieldContext_AuditLog_system(ctx, field)
			case "operationType":
				return ec.fieldContext_AuditLog_operationType(ctx, field)
			case "oldValue":
				return ec.fieldContext_AuditLog_oldValue(ctx, field)
			case "newValue":
				return ec.fieldContext_AuditLog_newValue(ctx, field)
			case "objectId":
				return ec.fieldContext_AuditLog_objectId(ctx, field)
			case "userId":
				return ec.fieldContext_AuditLog_userId(ctx, field)
			case "createdAt":
				return ec.fieldContext_AuditLog_createdAt(ctx, field)
			case "user":
				return ec.fieldContext_AuditLog_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuditLog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Timer_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Timer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Timer_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Timer_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Timer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Timer_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Timer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Timer_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Timer_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Timer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Timer_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Timer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Timer_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Timer_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Timer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Timer_timeInterval(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Timer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Timer_timeInterval(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeInterval, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Timer_timeInterval(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Timer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Timer_messageInterval(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Timer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Timer_messageInterval(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageInterval, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Timer_messageInterval(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Timer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Timer_responses(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Timer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Timer_responses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Responses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.TimerResponse)
	fc.Result = res
	return ec.marshalNTimerResponse2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Timer_responses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Timer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TimerResponse_id(ctx, field)
			case "text":
				return ec.fieldContext_TimerResponse_text(ctx, field)
			case "isAnnounce":
				return ec.fieldContext_TimerResponse_isAnnounce(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimerResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimerResponse_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TimerResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimerResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimerResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimerResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimerResponse_text(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TimerResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimerResponse_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimerResponse_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimerResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimerResponse_isAnnounce(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TimerResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimerResponse_isAnnounce(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAnnounce, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimerResponse_isAnnounce(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimerResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirAdminUser_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirAdminUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirAdminUser_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirAdminUser_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirAdminUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirAdminUser_twitchProfile(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirAdminUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirAdminUser_twitchProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TwirAdminUser().TwitchProfile(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalNTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirAdminUser_twitchProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirAdminUser",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirAdminUser_isBotAdmin(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirAdminUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirAdminUser_isBotAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBotAdmin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirAdminUser_isBotAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirAdminUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirAdminUser_isBanned(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirAdminUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirAdminUser_isBanned(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBanned, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirAdminUser_isBanned(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirAdminUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirAdminUser_isBotModerator(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirAdminUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirAdminUser_isBotModerator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBotModerator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirAdminUser_isBotModerator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirAdminUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirAdminUser_isBotEnabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirAdminUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirAdminUser_isBotEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBotEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirAdminUser_isBotEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirAdminUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirAdminUser_apiKey(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirAdminUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirAdminUser_apiKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirAdminUser_apiKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirAdminUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirStats_channels(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirStats_channels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Channels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirStats_channels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirStats_createdCommands(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirStats_createdCommands(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedCommands, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirStats_createdCommands(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirStats_viewers(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirStats_viewers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Viewers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirStats_viewers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirStats_messages(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirStats_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirStats_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirStats_usedEmotes(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirStats_usedEmotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsedEmotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirStats_usedEmotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirStats_usedCommands(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirStats_usedCommands(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsedCommands, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirStats_usedCommands(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirStats_streamers(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirStats_streamers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Streamers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.TwirStatsStreamer)
	fc.Result = res
	return ec.marshalNTwirStatsStreamer2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirStatsStreamerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirStats_streamers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirStatsStreamer_id(ctx, field)
			case "twitchProfile":
				return ec.fieldContext_TwirStatsStreamer_twitchProfile(ctx, field)
			case "isLive":
				return ec.fieldContext_TwirStatsStreamer_isLive(ctx, field)
			case "isPartner":
				return ec.fieldContext_TwirStatsStreamer_isPartner(ctx, field)
			case "followersCount":
				return ec.fieldContext_TwirStatsStreamer_followersCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirStatsStreamer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirStatsStreamer_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirStatsStreamer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirStatsStreamer_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirStatsStreamer_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirStatsStreamer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirStatsStreamer_twitchProfile(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirStatsStreamer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirStatsStreamer_twitchProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TwitchProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalNTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirStatsStreamer_twitchProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirStatsStreamer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirStatsStreamer_isLive(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirStatsStreamer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirStatsStreamer_isLive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirStatsStreamer_isLive(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirStatsStreamer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirStatsStreamer_isPartner(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirStatsStreamer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirStatsStreamer_isPartner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPartner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirStatsStreamer_isPartner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirStatsStreamer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirStatsStreamer_followersCount(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirStatsStreamer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirStatsStreamer_followersCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowersCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirStatsStreamer_followersCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirStatsStreamer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelBadgeResponse_badges(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelBadgeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelBadgeResponse_badges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Badges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.TwitchBadge)
	fc.Result = res
	return ec.marshalNTwitchBadge2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchBadgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelBadgeResponse_badges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelBadgeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "set_id":
				return ec.fieldContext_TwitchBadge_set_id(ctx, field)
			case "versions":
				return ec.fieldContext_TwitchBadge_versions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwitchBadge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_broadcaster_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_broadcaster_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BroadcasterName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_broadcaster_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_broadcaster_login(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_broadcaster_login(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BroadcasterLogin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_broadcaster_login(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_broadcaster_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_broadcaster_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BroadcasterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_broadcaster_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_image(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirTwitchChannelRewardImage)
	fc.Result = res
	return ec.marshalNTwirTwitchChannelRewardImage2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelRewardImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_image(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url_1x":
				return ec.fieldContext_TwirTwitchChannelRewardImage_url_1x(ctx, field)
			case "url_2x":
				return ec.fieldContext_TwirTwitchChannelRewardImage_url_2x(ctx, field)
			case "url_4x":
				return ec.fieldContext_TwirTwitchChannelRewardImage_url_4x(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirTwitchChannelRewardImage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_background_color(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_background_color(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackgroundColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_background_color(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_is_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_is_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_is_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_cost(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_cost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_cost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_title(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_prompt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_prompt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prompt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_prompt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_is_user_input_required(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_is_user_input_required(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUserInputRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_is_user_input_required(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_max_per_stream_setting(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_max_per_stream_setting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPerStreamSetting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirTwitchChannelRewardMaxPerStreamSetting)
	fc.Result = res
	return ec.marshalNTwirTwitchChannelRewardMaxPerStreamSetting2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelRewardMaxPerStreamSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_max_per_stream_setting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "is_enabled":
				return ec.fieldContext_TwirTwitchChannelRewardMaxPerStreamSetting_is_enabled(ctx, field)
			case "max_per_stream":
				return ec.fieldContext_TwirTwitchChannelRewardMaxPerStreamSetting_max_per_stream(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirTwitchChannelRewardMaxPerStreamSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_max_per_user_per_stream_setting(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_max_per_user_per_stream_setting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPerUserPerStreamSetting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirTwitchChannelRewardMaxPerUserPerStreamSetting)
	fc.Result = res
	return ec.marshalNTwirTwitchChannelRewardMaxPerUserPerStreamSetting2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelRewardMaxPerUserPerStreamSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_max_per_user_per_stream_setting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "is_enabled":
				return ec.fieldContext_TwirTwitchChannelRewardMaxPerUserPerStreamSetting_is_enabled(ctx, field)
			case "max_per_user_per_stream":
				return ec.fieldContext_TwirTwitchChannelRewardMaxPerUserPerStreamSetting_max_per_user_per_stream(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirTwitchChannelRewardMaxPerUserPerStreamSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_global_cooldown_setting(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_global_cooldown_setting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GlobalCooldownSetting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirTwitchChannelRewardGlobalCooldownSetting)
	fc.Result = res
	return ec.marshalNTwirTwitchChannelRewardGlobalCooldownSetting2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelRewardGlobalCooldownSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_global_cooldown_setting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "is_enabled":
				return ec.fieldContext_TwirTwitchChannelRewardGlobalCooldownSetting_is_enabled(ctx, field)
			case "global_cooldown_seconds":
				return ec.fieldContext_TwirTwitchChannelRewardGlobalCooldownSetting_global_cooldown_seconds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirTwitchChannelRewardGlobalCooldownSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_is_paused(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_is_paused(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPaused, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_is_paused(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_is_in_stock(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_is_in_stock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInStock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_is_in_stock(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_should_redemptions_skip_request_queue(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_should_redemptions_skip_request_queue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldRedemptionsSkipRequestQueue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_should_redemptions_skip_request_queue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_redemptions_redeemed_current_stream(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_redemptions_redeemed_current_stream(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedemptionsRedeemedCurrentStream, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_redemptions_redeemed_current_stream(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelReward_cooldown_expires_at(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelReward_cooldown_expires_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CooldownExpiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelReward_cooldown_expires_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelRewardGlobalCooldownSetting_is_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelRewardGlobalCooldownSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelRewardGlobalCooldownSetting_is_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelRewardGlobalCooldownSetting_is_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelRewardGlobalCooldownSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelRewardGlobalCooldownSetting_global_cooldown_seconds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelRewardGlobalCooldownSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelRewardGlobalCooldownSetting_global_cooldown_seconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GlobalCooldownSeconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelRewardGlobalCooldownSetting_global_cooldown_seconds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelRewardGlobalCooldownSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelRewardImage_url_1x(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelRewardImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelRewardImage_url_1x(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL1x, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelRewardImage_url_1x(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelRewardImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelRewardImage_url_2x(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelRewardImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelRewardImage_url_2x(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL2x, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelRewardImage_url_2x(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelRewardImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelRewardImage_url_4x(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelRewardImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelRewardImage_url_4x(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL4x, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelRewardImage_url_4x(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelRewardImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelRewardMaxPerStreamSetting_is_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelRewardMaxPerStreamSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelRewardMaxPerStreamSetting_is_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelRewardMaxPerStreamSetting_is_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelRewardMaxPerStreamSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelRewardMaxPerStreamSetting_max_per_stream(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelRewardMaxPerStreamSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelRewardMaxPerStreamSetting_max_per_stream(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPerStream, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelRewardMaxPerStreamSetting_max_per_stream(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelRewardMaxPerStreamSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelRewardMaxPerUserPerStreamSetting_is_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelRewardMaxPerUserPerStreamSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelRewardMaxPerUserPerStreamSetting_is_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelRewardMaxPerUserPerStreamSetting_is_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelRewardMaxPerUserPerStreamSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelRewardMaxPerUserPerStreamSetting_max_per_user_per_stream(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelRewardMaxPerUserPerStreamSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelRewardMaxPerUserPerStreamSetting_max_per_user_per_stream(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPerUserPerStream, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelRewardMaxPerUserPerStreamSetting_max_per_user_per_stream(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelRewardMaxPerUserPerStreamSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelRewardResponse_partnerOrAffiliate(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelRewardResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelRewardResponse_partnerOrAffiliate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartnerOrAffiliate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelRewardResponse_partnerOrAffiliate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelRewardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchChannelRewardResponse_rewards(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchChannelRewardResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchChannelRewardResponse_rewards(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rewards, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.TwirTwitchChannelReward)
	fc.Result = res
	return ec.marshalNTwirTwitchChannelReward2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelRewardᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchChannelRewardResponse_rewards(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchChannelRewardResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirTwitchChannelReward_id(ctx, field)
			case "broadcaster_name":
				return ec.fieldContext_TwirTwitchChannelReward_broadcaster_name(ctx, field)
			case "broadcaster_login":
				return ec.fieldContext_TwirTwitchChannelReward_broadcaster_login(ctx, field)
			case "broadcaster_id":
				return ec.fieldContext_TwirTwitchChannelReward_broadcaster_id(ctx, field)
			case "image":
				return ec.fieldContext_TwirTwitchChannelReward_image(ctx, field)
			case "background_color":
				return ec.fieldContext_TwirTwitchChannelReward_background_color(ctx, field)
			case "is_enabled":
				return ec.fieldContext_TwirTwitchChannelReward_is_enabled(ctx, field)
			case "cost":
				return ec.fieldContext_TwirTwitchChannelReward_cost(ctx, field)
			case "title":
				return ec.fieldContext_TwirTwitchChannelReward_title(ctx, field)
			case "prompt":
				return ec.fieldContext_TwirTwitchChannelReward_prompt(ctx, field)
			case "is_user_input_required":
				return ec.fieldContext_TwirTwitchChannelReward_is_user_input_required(ctx, field)
			case "max_per_stream_setting":
				return ec.fieldContext_TwirTwitchChannelReward_max_per_stream_setting(ctx, field)
			case "max_per_user_per_stream_setting":
				return ec.fieldContext_TwirTwitchChannelReward_max_per_user_per_stream_setting(ctx, field)
			case "global_cooldown_setting":
				return ec.fieldContext_TwirTwitchChannelReward_global_cooldown_setting(ctx, field)
			case "is_paused":
				return ec.fieldContext_TwirTwitchChannelReward_is_paused(ctx, field)
			case "is_in_stock":
				return ec.fieldContext_TwirTwitchChannelReward_is_in_stock(ctx, field)
			case "should_redemptions_skip_request_queue":
				return ec.fieldContext_TwirTwitchChannelReward_should_redemptions_skip_request_queue(ctx, field)
			case "redemptions_redeemed_current_stream":
				return ec.fieldContext_TwirTwitchChannelReward_redemptions_redeemed_current_stream(ctx, field)
			case "cooldown_expires_at":
				return ec.fieldContext_TwirTwitchChannelReward_cooldown_expires_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirTwitchChannelReward", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirTwitchGlobalBadgeResponse_badges(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirTwitchGlobalBadgeResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirTwitchGlobalBadgeResponse_badges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Badges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.TwitchBadge)
	fc.Result = res
	return ec.marshalNTwitchBadge2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchBadgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirTwitchGlobalBadgeResponse_badges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirTwitchGlobalBadgeResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "set_id":
				return ec.fieldContext_TwitchBadge_set_id(ctx, field)
			case "versions":
				return ec.fieldContext_TwitchBadge_versions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwitchBadge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirUserTwitchInfo_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirUserTwitchInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirUserTwitchInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirUserTwitchInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirUserTwitchInfo_login(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirUserTwitchInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Login, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirUserTwitchInfo_login(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirUserTwitchInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirUserTwitchInfo_displayName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirUserTwitchInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirUserTwitchInfo_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirUserTwitchInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirUserTwitchInfo_profileImageUrl(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirUserTwitchInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileImageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirUserTwitchInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirUserTwitchInfo_description(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirUserTwitchInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirUserTwitchInfo_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirUserTwitchInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirUserTwitchInfo_notFound(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirUserTwitchInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotFound, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirUserTwitchInfo_notFound(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirUserTwitchInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirUsersResponse_users(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirUsersResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirUsersResponse_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.TwirAdminUser)
	fc.Result = res
	return ec.marshalNTwirAdminUser2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirAdminUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirUsersResponse_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirUsersResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirAdminUser_id(ctx, field)
			case "twitchProfile":
				return ec.fieldContext_TwirAdminUser_twitchProfile(ctx, field)
			case "isBotAdmin":
				return ec.fieldContext_TwirAdminUser_isBotAdmin(ctx, field)
			case "isBanned":
				return ec.fieldContext_TwirAdminUser_isBanned(ctx, field)
			case "isBotModerator":
				return ec.fieldContext_TwirAdminUser_isBotModerator(ctx, field)
			case "isBotEnabled":
				return ec.fieldContext_TwirAdminUser_isBotEnabled(ctx, field)
			case "apiKey":
				return ec.fieldContext_TwirAdminUser_apiKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirAdminUser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwirUsersResponse_total(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwirUsersResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwirUsersResponse_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwirUsersResponse_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwirUsersResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchBadge_set_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchBadge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchBadge_set_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchBadge_set_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchBadge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchBadge_versions(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchBadge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchBadge_versions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Versions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.TwitchBadgeVersion)
	fc.Result = res
	return ec.marshalNTwitchBadgeVersion2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchBadgeVersionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchBadge_versions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchBadge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwitchBadgeVersion_id(ctx, field)
			case "image_url_1x":
				return ec.fieldContext_TwitchBadgeVersion_image_url_1x(ctx, field)
			case "image_url_2x":
				return ec.fieldContext_TwitchBadgeVersion_image_url_2x(ctx, field)
			case "image_url_4x":
				return ec.fieldContext_TwitchBadgeVersion_image_url_4x(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwitchBadgeVersion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchBadgeVersion_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchBadgeVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchBadgeVersion_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchBadgeVersion_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchBadgeVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchBadgeVersion_image_url_1x(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchBadgeVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchBadgeVersion_image_url_1x(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageURL1x, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchBadgeVersion_image_url_1x(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchBadgeVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchBadgeVersion_image_url_2x(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchBadgeVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchBadgeVersion_image_url_2x(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageURL2x, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchBadgeVersion_image_url_2x(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchBadgeVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchBadgeVersion_image_url_4x(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchBadgeVersion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchBadgeVersion_image_url_4x(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageURL4x, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchBadgeVersion_image_url_4x(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchBadgeVersion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchCategory_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchCategory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchCategory_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchCategory_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchCategory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchCategory_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchCategory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchCategory_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchCategory_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchCategory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchCategory_boxArtUrl(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchCategory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchCategory_boxArtUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoxArtURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchCategory_boxArtUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchCategory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchRedemption_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchRedemption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchRedemption_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchRedemption_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchRedemption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchRedemption_channelId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchRedemption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchRedemption_channelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchRedemption_channelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchRedemption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchRedemption_user(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchRedemption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchRedemption_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TwitchRedemption().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwirUserTwitchInfo)
	fc.Result = res
	return ec.marshalNTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchRedemption_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchRedemption",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwirUserTwitchInfo_id(ctx, field)
			case "login":
				return ec.fieldContext_TwirUserTwitchInfo_login(ctx, field)
			case "displayName":
				return ec.fieldContext_TwirUserTwitchInfo_displayName(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_TwirUserTwitchInfo_profileImageUrl(ctx, field)
			case "description":
				return ec.fieldContext_TwirUserTwitchInfo_description(ctx, field)
			case "notFound":
				return ec.fieldContext_TwirUserTwitchInfo_notFound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwirUserTwitchInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchRedemption_reward(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchRedemption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchRedemption_reward(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reward, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.TwitchReward)
	fc.Result = res
	return ec.marshalNTwitchReward2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchReward(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchRedemption_reward(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchRedemption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwitchReward_id(ctx, field)
			case "title":
				return ec.fieldContext_TwitchReward_title(ctx, field)
			case "cost":
				return ec.fieldContext_TwitchReward_cost(ctx, field)
			case "imageUrls":
				return ec.fieldContext_TwitchReward_imageUrls(ctx, field)
			case "backgroundColor":
				return ec.fieldContext_TwitchReward_backgroundColor(ctx, field)
			case "enabled":
				return ec.fieldContext_TwitchReward_enabled(ctx, field)
			case "usedTimes":
				return ec.fieldContext_TwitchReward_usedTimes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwitchReward", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchRedemption_redeemedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchRedemption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchRedemption_redeemedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedeemedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchRedemption_redeemedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchRedemption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchRedemption_prompt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchRedemption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchRedemption_prompt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prompt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchRedemption_prompt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchRedemption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchRedemptionResponse_redemptions(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchRedemptionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchRedemptionResponse_redemptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Redemptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]gqlmodel.TwitchRedemption)
	fc.Result = res
	return ec.marshalNTwitchRedemption2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchRedemptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchRedemptionResponse_redemptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchRedemptionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TwitchRedemption_id(ctx, field)
			case "channelId":
				return ec.fieldContext_TwitchRedemption_channelId(ctx, field)
			case "user":
				return ec.fieldContext_TwitchRedemption_user(ctx, field)
			case "reward":
				return ec.fieldContext_TwitchRedemption_reward(ctx, field)
			case "redeemedAt":
				return ec.fieldContext_TwitchRedemption_redeemedAt(ctx, field)
			case "prompt":
				return ec.fieldContext_TwitchRedemption_prompt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TwitchRedemption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchRedemptionResponse_total(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchRedemptionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchRedemptionResponse_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchRedemptionResponse_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchRedemptionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchReward_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchReward_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchReward_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchReward_title(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchReward_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchReward_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchReward_cost(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchReward_cost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchReward_cost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchReward_imageUrls(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchReward_imageUrls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageUrls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchReward_imageUrls(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchReward_backgroundColor(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchReward_backgroundColor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackgroundColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchReward_backgroundColor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchReward_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchReward_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchReward_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TwitchReward_usedTimes(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.TwitchReward) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TwitchReward_usedTimes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsedTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TwitchReward_usedTimes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TwitchReward",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotification_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UserNotification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotification_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotification_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotification_userId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UserNotification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotification_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotification_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotification_text(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UserNotification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotification_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotification_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotification_createdAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UserNotification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotification_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotification_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserNotification_editorJsJson(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UserNotification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserNotification_editorJsJson(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EditorJsJSON, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserNotification_editorJsJson(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserNotification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Variable_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Variable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Variable_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Variable_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Variable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Variable_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Variable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Variable_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Variable_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Variable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Variable_description(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Variable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Variable_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Variable_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Variable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Variable_type(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Variable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Variable_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.VariableType)
	fc.Result = res
	return ec.marshalNVariableType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariableType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Variable_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Variable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VariableType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Variable_evalValue(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Variable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Variable_evalValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvalValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Variable_evalValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Variable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Variable_response(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Variable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Variable_response(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Response, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Variable_response(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Variable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VotebanGame_enabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.VotebanGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VotebanGame_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VotebanGame_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VotebanGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VotebanGame_timeoutSeconds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.VotebanGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VotebanGame_timeoutSeconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeoutSeconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VotebanGame_timeoutSeconds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VotebanGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VotebanGame_timeoutModerators(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.VotebanGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VotebanGame_timeoutModerators(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeoutModerators, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VotebanGame_timeoutModerators(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VotebanGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VotebanGame_initMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.VotebanGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VotebanGame_initMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VotebanGame_initMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VotebanGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VotebanGame_banMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.VotebanGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VotebanGame_banMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BanMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VotebanGame_banMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VotebanGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VotebanGame_banMessageModerators(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.VotebanGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VotebanGame_banMessageModerators(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BanMessageModerators, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VotebanGame_banMessageModerators(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VotebanGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VotebanGame_surviveMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.VotebanGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VotebanGame_surviveMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SurviveMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VotebanGame_surviveMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VotebanGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VotebanGame_surviveMessageModerators(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.VotebanGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VotebanGame_surviveMessageModerators(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SurviveMessageModerators, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VotebanGame_surviveMessageModerators(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VotebanGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VotebanGame_neededVotes(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.VotebanGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VotebanGame_neededVotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeededVotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VotebanGame_neededVotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VotebanGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VotebanGame_voteDuration(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.VotebanGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VotebanGame_voteDuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VotebanGame_voteDuration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VotebanGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VotebanGame_votingMode(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.VotebanGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VotebanGame_votingMode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VotingMode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.VoteBanGameVotingMode)
	fc.Result = res
	return ec.marshalNVoteBanGameVotingMode2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVoteBanGameVotingMode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VotebanGame_votingMode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VotebanGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VoteBanGameVotingMode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VotebanGame_chatVotesWordsPositive(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.VotebanGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VotebanGame_chatVotesWordsPositive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChatVotesWordsPositive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VotebanGame_chatVotesWordsPositive(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VotebanGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VotebanGame_chatVotesWordsNegative(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.VotebanGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VotebanGame_chatVotesWordsNegative(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChatVotesWordsNegative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VotebanGame_chatVotesWordsNegative(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VotebanGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAdminAuditLogsInput(ctx context.Context, obj interface{}) (gqlmodel.AdminAuditLogsInput, error) {
	var it gqlmodel.AdminAuditLogsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"system", "objectId", "userId", "channelId", "operationType", "page", "perPage"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "system":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("system"))
			data, err := ec.unmarshalOAuditLogSystem2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLogSystemᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.System = graphql.OmittableOf(data)
		case "objectId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objectId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ObjectID = graphql.OmittableOf(data)
		case "userId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = graphql.OmittableOf(data)
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = graphql.OmittableOf(data)
		case "operationType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operationType"))
			data, err := ec.unmarshalOAuditOperationType2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditOperationTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OperationType = graphql.OmittableOf(data)
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = graphql.OmittableOf(data)
		case "perPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PerPage = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdminNotificationsParams(ctx context.Context, obj interface{}) (gqlmodel.AdminNotificationsParams, error) {
	var it gqlmodel.AdminNotificationsParams
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"search", "page", "perPage", "type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = graphql.OmittableOf(data)
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = graphql.OmittableOf(data)
		case "perPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PerPage = graphql.OmittableOf(data)
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalONotificationType2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNotificationType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChannelAlertCreateInput(ctx context.Context, obj interface{}) (gqlmodel.ChannelAlertCreateInput, error) {
	var it gqlmodel.ChannelAlertCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "audioId", "audioVolume", "commandIds", "rewardIds", "greetingsIds", "keywordsIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "audioId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audioId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AudioID = graphql.OmittableOf(data)
		case "audioVolume":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audioVolume"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "min=0,max=100")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.AudioVolume = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.AudioVolume = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "commandIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commandIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.CommandIds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.CommandIds = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "rewardIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rewardIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.RewardIds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.RewardIds = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "greetingsIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("greetingsIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.GreetingsIds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.GreetingsIds = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "keywordsIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywordsIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.KeywordsIds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.KeywordsIds = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChannelAlertUpdateInput(ctx context.Context, obj interface{}) (gqlmodel.ChannelAlertUpdateInput, error) {
	var it gqlmodel.ChannelAlertUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "audioId", "audioVolume", "commandIds", "rewardIds", "greetingsIds", "keywordsIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = graphql.OmittableOf(data)
		case "audioId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audioId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AudioID = graphql.OmittableOf(data)
		case "audioVolume":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audioVolume"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "min=0,max=100")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.AudioVolume = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.AudioVolume = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "commandIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commandIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.CommandIds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.CommandIds = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "rewardIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rewardIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.RewardIds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.RewardIds = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "greetingsIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("greetingsIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.GreetingsIds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.GreetingsIds = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "keywordsIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywordsIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOID2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.KeywordsIds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.KeywordsIds = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsBanInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsBanInput, error) {
	var it gqlmodel.ChatAlertsBanInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "messages", "ignoreTimeoutFrom", "cooldown"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "messages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messages"))
			data, err := ec.unmarshalOChatAlertsCountedMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Messages = graphql.OmittableOf(data)
		case "ignoreTimeoutFrom":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignoreTimeoutFrom"))
			data, err := ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IgnoreTimeoutFrom = graphql.OmittableOf(data)
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsChatClearedInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsChatClearedInput, error) {
	var it gqlmodel.ChatAlertsChatClearedInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "messages", "cooldown"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "messages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messages"))
			data, err := ec.unmarshalOChatAlertsMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Messages = graphql.OmittableOf(data)
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsCheersInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsCheersInput, error) {
	var it gqlmodel.ChatAlertsCheersInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "messages", "cooldown"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "messages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messages"))
			data, err := ec.unmarshalOChatAlertsCountedMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Messages = graphql.OmittableOf(data)
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsCountedMessageInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsCountedMessageInput, error) {
	var it gqlmodel.ChatAlertsCountedMessageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"count", "text"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "count":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Count = graphql.OmittableOf(data)
		case "text":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Text = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Text = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsDonationsInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsDonationsInput, error) {
	var it gqlmodel.ChatAlertsDonationsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "messages", "cooldown"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "messages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messages"))
			data, err := ec.unmarshalOChatAlertsCountedMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Messages = graphql.OmittableOf(data)
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsFirstUserMessageInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsFirstUserMessageInput, error) {
	var it gqlmodel.ChatAlertsFirstUserMessageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "messages", "cooldown"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "messages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messages"))
			data, err := ec.unmarshalOChatAlertsMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Messages = graphql.OmittableOf(data)
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsFollowersSettingsInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsFollowersSettingsInput, error) {
	var it gqlmodel.ChatAlertsFollowersSettingsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "messages", "cooldown"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "messages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messages"))
			data, err := ec.unmarshalOChatAlertsMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Messages = graphql.OmittableOf(data)
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsInput, error) {
	var it gqlmodel.ChatAlertsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"followers", "raids", "donations", "subscribers", "cheers", "redemptions", "firstUserMessage", "streamOnline", "streamOffline", "chatCleared", "ban", "unbanRequestCreate", "unbanRequestResolve", "messageDelete"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "followers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("followers"))
			data, err := ec.unmarshalOChatAlertsFollowersSettingsInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsFollowersSettingsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Followers = graphql.OmittableOf(data)
		case "raids":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("raids"))
			data, err := ec.unmarshalOChatAlertsRaidsInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsRaidsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Raids = graphql.OmittableOf(data)
		case "donations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("donations"))
			data, err := ec.unmarshalOChatAlertsDonationsInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsDonationsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Donations = graphql.OmittableOf(data)
		case "subscribers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscribers"))
			data, err := ec.unmarshalOChatAlertsSubscribersInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsSubscribersInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Subscribers = graphql.OmittableOf(data)
		case "cheers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cheers"))
			data, err := ec.unmarshalOChatAlertsCheersInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCheersInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cheers = graphql.OmittableOf(data)
		case "redemptions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("redemptions"))
			data, err := ec.unmarshalOChatAlertsRedemptionsInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsRedemptionsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Redemptions = graphql.OmittableOf(data)
		case "firstUserMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstUserMessage"))
			data, err := ec.unmarshalOChatAlertsFirstUserMessageInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsFirstUserMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstUserMessage = graphql.OmittableOf(data)
		case "streamOnline":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streamOnline"))
			data, err := ec.unmarshalOChatAlertsStreamOnlineInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsStreamOnlineInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreamOnline = graphql.OmittableOf(data)
		case "streamOffline":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streamOffline"))
			data, err := ec.unmarshalOChatAlertsStreamOfflineInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsStreamOfflineInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreamOffline = graphql.OmittableOf(data)
		case "chatCleared":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chatCleared"))
			data, err := ec.unmarshalOChatAlertsChatClearedInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsChatClearedInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChatCleared = graphql.OmittableOf(data)
		case "ban":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ban"))
			data, err := ec.unmarshalOChatAlertsBanInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsBanInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ban = graphql.OmittableOf(data)
		case "unbanRequestCreate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unbanRequestCreate"))
			data, err := ec.unmarshalOChatAlertsUnbanRequestCreateInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsUnbanRequestCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnbanRequestCreate = graphql.OmittableOf(data)
		case "unbanRequestResolve":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unbanRequestResolve"))
			data, err := ec.unmarshalOChatAlertsUnbanRequestResolveInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsUnbanRequestResolveInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnbanRequestResolve = graphql.OmittableOf(data)
		case "messageDelete":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageDelete"))
			data, err := ec.unmarshalOChatAlertsMessageDeleteInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageDeleteInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageDelete = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsMessageDeleteInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsMessageDeleteInput, error) {
	var it gqlmodel.ChatAlertsMessageDeleteInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "messages", "cooldown"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "messages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messages"))
			data, err := ec.unmarshalOChatAlertsMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Messages = graphql.OmittableOf(data)
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsMessageInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsMessageInput, error) {
	var it gqlmodel.ChatAlertsMessageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"text"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "text":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Text = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Text = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsRaidsInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsRaidsInput, error) {
	var it gqlmodel.ChatAlertsRaidsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "messages", "cooldown"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "messages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messages"))
			data, err := ec.unmarshalOChatAlertsCountedMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Messages = graphql.OmittableOf(data)
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsRedemptionsInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsRedemptionsInput, error) {
	var it gqlmodel.ChatAlertsRedemptionsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "messages", "cooldown", "ignoredRewardsIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "messages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messages"))
			data, err := ec.unmarshalOChatAlertsMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Messages = graphql.OmittableOf(data)
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		case "ignoredRewardsIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ignoredRewardsIds"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IgnoredRewardsIds = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsStreamOfflineInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsStreamOfflineInput, error) {
	var it gqlmodel.ChatAlertsStreamOfflineInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "messages", "cooldown"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "messages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messages"))
			data, err := ec.unmarshalOChatAlertsMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Messages = graphql.OmittableOf(data)
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsStreamOnlineInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsStreamOnlineInput, error) {
	var it gqlmodel.ChatAlertsStreamOnlineInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "messages", "cooldown"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "messages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messages"))
			data, err := ec.unmarshalOChatAlertsMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Messages = graphql.OmittableOf(data)
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsSubscribersInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsSubscribersInput, error) {
	var it gqlmodel.ChatAlertsSubscribersInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "messages", "cooldown"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "messages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messages"))
			data, err := ec.unmarshalOChatAlertsCountedMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Messages = graphql.OmittableOf(data)
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsUnbanRequestCreateInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsUnbanRequestCreateInput, error) {
	var it gqlmodel.ChatAlertsUnbanRequestCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "messages", "cooldown"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "messages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messages"))
			data, err := ec.unmarshalOChatAlertsMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Messages = graphql.OmittableOf(data)
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatAlertsUnbanRequestResolveInput(ctx context.Context, obj interface{}) (gqlmodel.ChatAlertsUnbanRequestResolveInput, error) {
	var it gqlmodel.ChatAlertsUnbanRequestResolveInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "messages", "cooldown"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "messages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messages"))
			data, err := ec.unmarshalOChatAlertsMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Messages = graphql.OmittableOf(data)
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChatOverlayMutateOpts(ctx context.Context, obj interface{}) (gqlmodel.ChatOverlayMutateOpts, error) {
	var it gqlmodel.ChatOverlayMutateOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"messageHideTimeout", "messageShowDelay", "preset", "fontSize", "hideCommands", "hideBots", "fontFamily", "showBadges", "showAnnounceBadge", "textShadowColor", "textShadowSize", "chatBackgroundColor", "direction", "fontWeight", "fontStyle", "paddingContainer", "animation"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "messageHideTimeout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageHideTimeout"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageHideTimeout = graphql.OmittableOf(data)
		case "messageShowDelay":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageShowDelay"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageShowDelay = graphql.OmittableOf(data)
		case "preset":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preset"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Preset = graphql.OmittableOf(data)
		case "fontSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fontSize"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.FontSize = graphql.OmittableOf(data)
		case "hideCommands":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hideCommands"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HideCommands = graphql.OmittableOf(data)
		case "hideBots":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hideBots"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HideBots = graphql.OmittableOf(data)
		case "fontFamily":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fontFamily"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FontFamily = graphql.OmittableOf(data)
		case "showBadges":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showBadges"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShowBadges = graphql.OmittableOf(data)
		case "showAnnounceBadge":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showAnnounceBadge"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShowAnnounceBadge = graphql.OmittableOf(data)
		case "textShadowColor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("textShadowColor"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TextShadowColor = graphql.OmittableOf(data)
		case "textShadowSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("textShadowSize"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TextShadowSize = graphql.OmittableOf(data)
		case "chatBackgroundColor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chatBackgroundColor"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChatBackgroundColor = graphql.OmittableOf(data)
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = graphql.OmittableOf(data)
		case "fontWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fontWeight"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.FontWeight = graphql.OmittableOf(data)
		case "fontStyle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fontStyle"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FontStyle = graphql.OmittableOf(data)
		case "paddingContainer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paddingContainer"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PaddingContainer = graphql.OmittableOf(data)
		case "animation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("animation"))
			data, err := ec.unmarshalOChatOverlayAnimation2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlayAnimation(ctx, v)
			if err != nil {
				return it, err
			}
			it.Animation = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommandsCreateOpts(ctx context.Context, obj interface{}) (gqlmodel.CommandsCreateOpts, error) {
	var it gqlmodel.CommandsCreateOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "aliases", "responses", "cooldown", "cooldownType", "enabled", "visible", "isReply", "keepResponsesOrder", "deniedUsersIds", "allowedUsersIds", "rolesIds", "onlineOnly", "cooldownRolesIds", "enabledCategories", "requiredWatchTime", "requiredMessages", "requiredUsedChannelPoints", "groupId", "expiresAt", "expiresType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=50")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Description = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "aliases":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=50,min=1")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Aliases = data
			} else if tmp == nil {
				it.Aliases = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "responses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("responses"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNCreateOrUpdateCommandResponseInput2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCreateOrUpdateCommandResponseInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]gqlmodel.CreateOrUpdateCommandResponseInput); ok {
				it.Responses = data
			} else if tmp == nil {
				it.Responses = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.CreateOrUpdateCommandResponseInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=90000")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.Cooldown = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cooldownType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldownType"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CooldownType = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "visible":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visible"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Visible = data
		case "isReply":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isReply"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsReply = data
		case "keepResponsesOrder":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keepResponsesOrder"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeepResponsesOrder = data
		case "deniedUsersIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deniedUsersIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.DeniedUsersIds = data
			} else if tmp == nil {
				it.DeniedUsersIds = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "allowedUsersIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowedUsersIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.AllowedUsersIds = data
			} else if tmp == nil {
				it.AllowedUsersIds = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "rolesIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rolesIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.RolesIds = data
			} else if tmp == nil {
				it.RolesIds = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "onlineOnly":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("onlineOnly"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OnlineOnly = data
		case "cooldownRolesIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldownRolesIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.CooldownRolesIds = data
			} else if tmp == nil {
				it.CooldownRolesIds = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "enabledCategories":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabledCategories"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.EnabledCategories = data
			} else if tmp == nil {
				it.EnabledCategories = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "requiredWatchTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredWatchTime"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequiredWatchTime = data
		case "requiredMessages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredMessages"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequiredMessages = data
		case "requiredUsedChannelPoints":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredUsedChannelPoints"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequiredUsedChannelPoints = data
		case "groupId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupId"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.GroupID = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.GroupID = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "expiresAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAt"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAt = graphql.OmittableOf(data)
		case "expiresType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresType"))
			data, err := ec.unmarshalOCommandExpiresType2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandExpiresType(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresType = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommandsGroupsCreateOpts(ctx context.Context, obj interface{}) (gqlmodel.CommandsGroupsCreateOpts, error) {
	var it gqlmodel.CommandsGroupsCreateOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "color"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=50")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "color":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=50")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Color = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommandsGroupsUpdateOpts(ctx context.Context, obj interface{}) (gqlmodel.CommandsGroupsUpdateOpts, error) {
	var it gqlmodel.CommandsGroupsUpdateOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "color"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=50")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Name = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "color":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=50")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Color = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Color = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommandsUpdateOpts(ctx context.Context, obj interface{}) (gqlmodel.CommandsUpdateOpts, error) {
	var it gqlmodel.CommandsUpdateOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "aliases", "responses", "cooldown", "cooldownType", "enabled", "visible", "isReply", "keepResponsesOrder", "deniedUsersIds", "allowedUsersIds", "rolesIds", "onlineOnly", "cooldownRolesIds", "enabledCategories", "requiredWatchTime", "requiredMessages", "requiredUsedChannelPoints", "groupId", "expiresAt", "expiresType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=50")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Name = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Description = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "aliases":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aliases"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=50,min=1")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Aliases = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Aliases = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "responses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("responses"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOCreateOrUpdateCommandResponseInput2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCreateOrUpdateCommandResponseInputᚄ(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=3")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]gqlmodel.CreateOrUpdateCommandResponseInput); ok {
				it.Responses = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Responses = graphql.OmittableOf[[]gqlmodel.CreateOrUpdateCommandResponseInput](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.CreateOrUpdateCommandResponseInput`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cooldown = graphql.OmittableOf(data)
		case "cooldownType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldownType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CooldownType = graphql.OmittableOf(data)
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "visible":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visible"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Visible = graphql.OmittableOf(data)
		case "isReply":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isReply"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsReply = graphql.OmittableOf(data)
		case "keepResponsesOrder":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keepResponsesOrder"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeepResponsesOrder = graphql.OmittableOf(data)
		case "deniedUsersIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deniedUsersIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.DeniedUsersIds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.DeniedUsersIds = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "allowedUsersIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowedUsersIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.AllowedUsersIds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.AllowedUsersIds = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "rolesIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rolesIds"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RolesIds = graphql.OmittableOf(data)
		case "onlineOnly":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("onlineOnly"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.OnlineOnly = graphql.OmittableOf(data)
		case "cooldownRolesIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldownRolesIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.CooldownRolesIds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.CooldownRolesIds = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "enabledCategories":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabledCategories"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.EnabledCategories = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.EnabledCategories = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "requiredWatchTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredWatchTime"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequiredWatchTime = graphql.OmittableOf(data)
		case "requiredMessages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredMessages"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequiredMessages = graphql.OmittableOf(data)
		case "requiredUsedChannelPoints":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredUsedChannelPoints"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequiredUsedChannelPoints = graphql.OmittableOf(data)
		case "groupId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groupId"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.GroupID = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.GroupID = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "expiresAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAt"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAt = graphql.OmittableOf(data)
		case "expiresType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresType"))
			data, err := ec.unmarshalOCommandExpiresType2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandExpiresType(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresType = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommunityUsersOpts(ctx context.Context, obj interface{}) (gqlmodel.CommunityUsersOpts, error) {
	var it gqlmodel.CommunityUsersOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"channelId", "page", "perPage", "sortBy", "order", "search"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = graphql.OmittableOf(data)
		case "perPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PerPage = graphql.OmittableOf(data)
		case "sortBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			data, err := ec.unmarshalOCommunityUsersSortBy2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUsersSortBy(ctx, v)
			if err != nil {
				return it, err
			}
			it.SortBy = graphql.OmittableOf(data)
		case "order":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			data, err := ec.unmarshalOCommunityUsersOrder2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUsersOrder(ctx, v)
			if err != nil {
				return it, err
			}
			it.Order = graphql.OmittableOf(data)
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateOrUpdateCommandResponseInput(ctx context.Context, obj interface{}) (gqlmodel.CreateOrUpdateCommandResponseInput, error) {
	var it gqlmodel.CreateOrUpdateCommandResponseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"text", "twitchCategoriesIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "text":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Text = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "twitchCategoriesIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("twitchCategoriesIds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.TwitchCategoriesIds = data
			} else if tmp == nil {
				it.TwitchCategoriesIds = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateOrUpdateRoleSettingsInput(ctx context.Context, obj interface{}) (gqlmodel.CreateOrUpdateRoleSettingsInput, error) {
	var it gqlmodel.CreateOrUpdateRoleSettingsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"requiredWatchTime", "requiredMessages", "requiredUserChannelPoints"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "requiredWatchTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredWatchTime"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=99999999999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.RequiredWatchTime = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "requiredMessages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredMessages"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=99999999999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.RequiredMessages = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "requiredUserChannelPoints":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredUserChannelPoints"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=99999999999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.RequiredUserChannelPoints = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDuelGameOpts(ctx context.Context, obj interface{}) (gqlmodel.DuelGameOpts, error) {
	var it gqlmodel.DuelGameOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "userCooldown", "globalCooldown", "timeoutSeconds", "startMessage", "resultMessage", "secondsToAccept", "pointsPerWin", "pointsPerLose", "bothDiePercent", "bothDieMessage"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "userCooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userCooldown"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.UserCooldown = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.UserCooldown = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "globalCooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("globalCooldown"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.GlobalCooldown = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.GlobalCooldown = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "timeoutSeconds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutSeconds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.TimeoutSeconds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.TimeoutSeconds = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "startMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startMessage"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.StartMessage = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.StartMessage = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "resultMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resultMessage"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.ResultMessage = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.ResultMessage = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "secondsToAccept":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secondsToAccept"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=600")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.SecondsToAccept = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.SecondsToAccept = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "pointsPerWin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pointsPerWin"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.PointsPerWin = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.PointsPerWin = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "pointsPerLose":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pointsPerLose"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.PointsPerLose = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.PointsPerLose = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "bothDiePercent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bothDiePercent"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "min=0,max=100")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.BothDiePercent = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.BothDiePercent = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "bothDieMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bothDieMessage"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.BothDieMessage = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.BothDieMessage = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEightBallGameOpts(ctx context.Context, obj interface{}) (gqlmodel.EightBallGameOpts, error) {
	var it gqlmodel.EightBallGameOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "answers"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "answers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answers"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Answers = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Answers = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmotesStatisticEmoteDetailedOpts(ctx context.Context, obj interface{}) (gqlmodel.EmotesStatisticEmoteDetailedOpts, error) {
	var it gqlmodel.EmotesStatisticEmoteDetailedOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"emoteName", "range", "usagesByUsersPage", "usagesByUsersPerPage", "topUsersPage", "topUsersPerPage"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "emoteName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emoteName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmoteName = data
		case "range":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("range"))
			data, err := ec.unmarshalNEmoteStatisticRange2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticRange(ctx, v)
			if err != nil {
				return it, err
			}
			it.Range = data
		case "usagesByUsersPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usagesByUsersPage"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsagesByUsersPage = graphql.OmittableOf(data)
		case "usagesByUsersPerPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usagesByUsersPerPage"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsagesByUsersPerPage = graphql.OmittableOf(data)
		case "topUsersPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topUsersPage"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopUsersPage = graphql.OmittableOf(data)
		case "topUsersPerPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("topUsersPerPage"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TopUsersPerPage = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmotesStatisticsOpts(ctx context.Context, obj interface{}) (gqlmodel.EmotesStatisticsOpts, error) {
	var it gqlmodel.EmotesStatisticsOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"search", "page", "perPage", "graphicRange", "order"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = graphql.OmittableOf(data)
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = graphql.OmittableOf(data)
		case "perPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PerPage = graphql.OmittableOf(data)
		case "graphicRange":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("graphicRange"))
			data, err := ec.unmarshalOEmoteStatisticRange2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticRange(ctx, v)
			if err != nil {
				return it, err
			}
			it.GraphicRange = graphql.OmittableOf(data)
		case "order":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			data, err := ec.unmarshalOEmotesStatisticsOptsOrder2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticsOptsOrder(ctx, v)
			if err != nil {
				return it, err
			}
			it.Order = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventsubSubscribeInput(ctx context.Context, obj interface{}) (gqlmodel.EventsubSubscribeInput, error) {
	var it gqlmodel.EventsubSubscribeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "version", "condition"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=50")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Type = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=50")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Version = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "condition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("condition"))
			data, err := ec.unmarshalNEventsubSubscribeConditionInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEventsubSubscribeConditionInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Condition = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGreetingsCreateInput(ctx context.Context, obj interface{}) (gqlmodel.GreetingsCreateInput, error) {
	var it gqlmodel.GreetingsCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "isReply", "userId", "text"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "isReply":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isReply"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsReply = data
		case "userId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "text":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Text = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGreetingsUpdateInput(ctx context.Context, obj interface{}) (gqlmodel.GreetingsUpdateInput, error) {
	var it gqlmodel.GreetingsUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "isReply", "userId", "text"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "isReply":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isReply"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsReply = graphql.OmittableOf(data)
		case "userId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = graphql.OmittableOf(data)
		case "text":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Text = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Text = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKeywordCreateInput(ctx context.Context, obj interface{}) (gqlmodel.KeywordCreateInput, error) {
	var it gqlmodel.KeywordCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"text", "response", "cooldown", "enabled", "usageCount", "isRegularExpression", "isReply"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "text":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=5000")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Text = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "response":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("response"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Response = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Response = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.Cooldown = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Cooldown = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "usageCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usageCount"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999999999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.UsageCount = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.UsageCount = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isRegularExpression":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRegularExpression"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsRegularExpression = graphql.OmittableOf(data)
		case "isReply":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isReply"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsReply = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKeywordUpdateInput(ctx context.Context, obj interface{}) (gqlmodel.KeywordUpdateInput, error) {
	var it gqlmodel.KeywordUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"text", "response", "cooldown", "enabled", "usageCount", "isRegularExpression", "isReply"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "text":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=5000")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Text = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Text = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "response":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("response"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500,omitempty")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Response = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Response = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cooldown":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cooldown"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.Cooldown = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Cooldown = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "usageCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usageCount"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999999999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.UsageCount = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.UsageCount = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isRegularExpression":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRegularExpression"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsRegularExpression = graphql.OmittableOf(data)
		case "isReply":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isReply"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsReply = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNotificationUpdateOpts(ctx context.Context, obj interface{}) (gqlmodel.NotificationUpdateOpts, error) {
	var it gqlmodel.NotificationUpdateOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"text", "editorJsJson"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "text":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=10000")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Text = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Text = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "editorJsJson":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("editorJsJson"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=10000")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.EditorJsJSON = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.EditorJsJSON = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNowPlayingOverlayMutateOpts(ctx context.Context, obj interface{}) (gqlmodel.NowPlayingOverlayMutateOpts, error) {
	var it gqlmodel.NowPlayingOverlayMutateOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"preset", "fontFamily", "fontWeight", "backgroundColor", "showImage", "hideTimeout"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "preset":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("preset"))
			data, err := ec.unmarshalONowPlayingOverlayPreset2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlayPreset(ctx, v)
			if err != nil {
				return it, err
			}
			it.Preset = graphql.OmittableOf(data)
		case "fontFamily":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fontFamily"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FontFamily = graphql.OmittableOf(data)
		case "fontWeight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fontWeight"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.FontWeight = graphql.OmittableOf(data)
		case "backgroundColor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("backgroundColor"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BackgroundColor = graphql.OmittableOf(data)
		case "showImage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showImage"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShowImage = graphql.OmittableOf(data)
		case "hideTimeout":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hideTimeout"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.HideTimeout = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRolesCreateOrUpdateOpts(ctx context.Context, obj interface{}) (gqlmodel.RolesCreateOrUpdateOpts, error) {
	var it gqlmodel.RolesCreateOrUpdateOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "permissions", "settings", "users"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=50")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "permissions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
			data, err := ec.unmarshalNChannelRolePermissionEnum2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnumᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Permissions = data
		case "settings":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settings"))
			data, err := ec.unmarshalNCreateOrUpdateRoleSettingsInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCreateOrUpdateRoleSettingsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Settings = data
		case "users":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("users"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Users = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRussianRouletteGameOpts(ctx context.Context, obj interface{}) (gqlmodel.RussianRouletteGameOpts, error) {
	var it gqlmodel.RussianRouletteGameOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "canBeUsedByModerator", "timeoutSeconds", "decisionSeconds", "initMessage", "surviveMessage", "deathMessage", "chargedBullets", "tumberSize"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "canBeUsedByModerator":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canBeUsedByModerator"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanBeUsedByModerator = graphql.OmittableOf(data)
		case "timeoutSeconds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutSeconds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.TimeoutSeconds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.TimeoutSeconds = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "decisionSeconds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("decisionSeconds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.DecisionSeconds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.DecisionSeconds = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "initMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initMessage"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.InitMessage = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.InitMessage = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "surviveMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surviveMessage"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SurviveMessage = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.SurviveMessage = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "deathMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deathMessage"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.DeathMessage = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.DeathMessage = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "chargedBullets":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chargedBullets"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.ChargedBullets = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.ChargedBullets = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "tumberSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tumberSize"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.TumberSize = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.TumberSize = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSeppukuGameOpts(ctx context.Context, obj interface{}) (gqlmodel.SeppukuGameOpts, error) {
	var it gqlmodel.SeppukuGameOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "timeoutSeconds", "timeoutModerators", "message", "messageModerators"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "timeoutSeconds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutSeconds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=86400,min=1")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.TimeoutSeconds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.TimeoutSeconds = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "timeoutModerators":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutModerators"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeoutModerators = graphql.OmittableOf(data)
		case "message":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Message = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Message = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "messageModerators":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageModerators"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.MessageModerators = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.MessageModerators = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSocialLinkInput(ctx context.Context, obj interface{}) (gqlmodel.SocialLinkInput, error) {
	var it gqlmodel.SocialLinkInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "href"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=50")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Title = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "href":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("href"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Href = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSongRequestsChannelTranslationsOpts(ctx context.Context, obj interface{}) (gqlmodel.SongRequestsChannelTranslationsOpts, error) {
	var it gqlmodel.SongRequestsChannelTranslationsOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"denied"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "denied":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denied"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Denied = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSongRequestsDenyListOpts(ctx context.Context, obj interface{}) (gqlmodel.SongRequestsDenyListOpts, error) {
	var it gqlmodel.SongRequestsDenyListOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"users", "songs", "channels", "artistsNames", "words"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "users":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("users"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Users = data
			} else if tmp == nil {
				it.Users = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "songs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("songs"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Songs = data
			} else if tmp == nil {
				it.Songs = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "channels":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channels"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Channels = data
			} else if tmp == nil {
				it.Channels = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "artistsNames":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("artistsNames"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.ArtistsNames = data
			} else if tmp == nil {
				it.ArtistsNames = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "words":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("words"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.Words = data
			} else if tmp == nil {
				it.Words = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSongRequestsSearchChannelOrVideoOpts(ctx context.Context, obj interface{}) (gqlmodel.SongRequestsSearchChannelOrVideoOpts, error) {
	var it gqlmodel.SongRequestsSearchChannelOrVideoOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "query"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNSongRequestsSearchChannelOrVideoOptsType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSearchChannelOrVideoOptsType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "query":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Query = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSongRequestsSettingsOpts(ctx context.Context, obj interface{}) (gqlmodel.SongRequestsSettingsOpts, error) {
	var it gqlmodel.SongRequestsSettingsOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "acceptOnlyWhenOnline", "maxRequests", "channelPointsRewardId", "announcePlay", "neededVotesForSkip", "user", "song", "denyList", "translations", "takeSongFromDonationMessages", "playerNoCookieMode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "acceptOnlyWhenOnline":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceptOnlyWhenOnline"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AcceptOnlyWhenOnline = data
		case "maxRequests":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxRequests"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.MaxRequests = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "channelPointsRewardId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelPointsRewardId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelPointsRewardID = graphql.OmittableOf(data)
		case "announcePlay":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announcePlay"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnnouncePlay = data
		case "neededVotesForSkip":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("neededVotesForSkip"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "min=0,max=100")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.NeededVotesForSkip = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "user":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			data, err := ec.unmarshalNSongRequestsUserSettingsOpts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsUserSettingsOpts(ctx, v)
			if err != nil {
				return it, err
			}
			it.User = data
		case "song":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("song"))
			data, err := ec.unmarshalNSongRequestsSongSettingsOpts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSongSettingsOpts(ctx, v)
			if err != nil {
				return it, err
			}
			it.Song = data
		case "denyList":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyList"))
			data, err := ec.unmarshalNSongRequestsDenyListOpts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsDenyListOpts(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyList = data
		case "translations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("translations"))
			data, err := ec.unmarshalNSongRequestsTranslationsOpts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsTranslationsOpts(ctx, v)
			if err != nil {
				return it, err
			}
			it.Translations = data
		case "takeSongFromDonationMessages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("takeSongFromDonationMessages"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TakeSongFromDonationMessages = data
		case "playerNoCookieMode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("playerNoCookieMode"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlayerNoCookieMode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSongRequestsSongSettingsOpts(ctx context.Context, obj interface{}) (gqlmodel.SongRequestsSongSettingsOpts, error) {
	var it gqlmodel.SongRequestsSongSettingsOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"minLength", "maxLength", "minViews", "acceptedCategories"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "minLength":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minLength"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=86399")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.MinLength = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxLength":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxLength"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=86400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.MaxLength = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minViews":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minViews"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=10000000000000")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.MinViews = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "acceptedCategories":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceptedCategories"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.AcceptedCategories = data
			} else if tmp == nil {
				it.AcceptedCategories = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSongRequestsSongTranslationsOpts(ctx context.Context, obj interface{}) (gqlmodel.SongRequestsSongTranslationsOpts, error) {
	var it gqlmodel.SongRequestsSongTranslationsOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"denied", "notFound", "alreadyInQueue", "ageRestrictions", "cannotGetInformation", "live", "maxLength", "minLength", "requestedMessage", "maximumOrdered", "minViews"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "denied":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denied"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Denied = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "notFound":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notFound"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.NotFound = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "alreadyInQueue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alreadyInQueue"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.AlreadyInQueue = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "ageRestrictions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ageRestrictions"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.AgeRestrictions = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "cannotGetInformation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cannotGetInformation"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.CannotGetInformation = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "live":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("live"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Live = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxLength":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxLength"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.MaxLength = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minLength":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minLength"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.MinLength = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "requestedMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestedMessage"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.RequestedMessage = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maximumOrdered":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximumOrdered"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.MaximumOrdered = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minViews":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minViews"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.MinViews = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSongRequestsTranslationsOpts(ctx context.Context, obj interface{}) (gqlmodel.SongRequestsTranslationsOpts, error) {
	var it gqlmodel.SongRequestsTranslationsOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"nowPlaying", "notEnabled", "noText", "acceptOnlyWhenOnline", "user", "song", "channel"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "nowPlaying":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nowPlaying"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.NowPlaying = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "notEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEnabled"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.NotEnabled = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "noText":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noText"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.NoText = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "acceptOnlyWhenOnline":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acceptOnlyWhenOnline"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.AcceptOnlyWhenOnline = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "user":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNSongRequestsUserTranslationsOpts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsUserTranslationsOpts(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*gqlmodel.SongRequestsUserTranslationsOpts); ok {
				it.User = data
			} else if tmp == nil {
				it.User = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.SongRequestsUserTranslationsOpts`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "song":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("song"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNSongRequestsSongTranslationsOpts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSongTranslationsOpts(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*gqlmodel.SongRequestsSongTranslationsOpts); ok {
				it.Song = data
			} else if tmp == nil {
				it.Song = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.SongRequestsSongTranslationsOpts`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "channel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalNSongRequestsChannelTranslationsOpts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsChannelTranslationsOpts(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*gqlmodel.SongRequestsChannelTranslationsOpts); ok {
				it.Channel = data
			} else if tmp == nil {
				it.Channel = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.SongRequestsChannelTranslationsOpts`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSongRequestsUserSettingsOpts(ctx context.Context, obj interface{}) (gqlmodel.SongRequestsUserSettingsOpts, error) {
	var it gqlmodel.SongRequestsUserSettingsOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"maxRequests", "minWatchTime", "minMessages", "minFollowTime"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "maxRequests":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxRequests"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.MaxRequests = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minWatchTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minWatchTime"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=9999999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.MinWatchTime = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minMessages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minMessages"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=9999999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.MinMessages = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minFollowTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minFollowTime"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=9999999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.MinFollowTime = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSongRequestsUserTranslationsOpts(ctx context.Context, obj interface{}) (gqlmodel.SongRequestsUserTranslationsOpts, error) {
	var it gqlmodel.SongRequestsUserTranslationsOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"denied", "maxRequests", "minMessages", "minWatched", "minFollow"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "denied":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denied"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Denied = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "maxRequests":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxRequests"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.MaxRequests = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minMessages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minMessages"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.MinMessages = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minWatched":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minWatched"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.MinWatched = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "minFollow":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minFollow"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.MinFollow = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimerCreateInput(ctx context.Context, obj interface{}) (gqlmodel.TimerCreateInput, error) {
	var it gqlmodel.TimerCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "enabled", "timeInterval", "messageInterval", "responses"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=50")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "timeInterval":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "min=1,max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.TimeInterval = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "messageInterval":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageInterval"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "min=0,max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.MessageInterval = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "responses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("responses"))
			data, err := ec.unmarshalNTimerResponseCreateInput2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerResponseCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Responses = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimerResponseCreateInput(ctx context.Context, obj interface{}) (gqlmodel.TimerResponseCreateInput, error) {
	var it gqlmodel.TimerResponseCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"text", "isAnnounce"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "text":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Text = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isAnnounce":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAnnounce"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAnnounce = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimerResponseUpdateInput(ctx context.Context, obj interface{}) (gqlmodel.TimerResponseUpdateInput, error) {
	var it gqlmodel.TimerResponseUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"text", "isAnnounce"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "text":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Text = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "isAnnounce":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAnnounce"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAnnounce = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimerUpdateInput(ctx context.Context, obj interface{}) (gqlmodel.TimerUpdateInput, error) {
	var it gqlmodel.TimerUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "enabled", "timeInterval", "messageInterval", "responses"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=50")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Name = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "timeInterval":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "min=1,max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.TimeInterval = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.TimeInterval = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "messageInterval":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageInterval"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "min=0,max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.MessageInterval = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.MessageInterval = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "responses":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("responses"))
			data, err := ec.unmarshalOTimerResponseUpdateInput2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerResponseUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Responses = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTwirBadgeCreateOpts(ctx context.Context, obj interface{}) (gqlmodel.TwirBadgeCreateOpts, error) {
	var it gqlmodel.TwirBadgeCreateOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "file", "enabled", "ffzSlot"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "file":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			data, err := ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.File = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "ffzSlot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ffzSlot"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNInt2int(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(int); ok {
				it.FfzSlot = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTwirBadgeUpdateOpts(ctx context.Context, obj interface{}) (gqlmodel.TwirBadgeUpdateOpts, error) {
	var it gqlmodel.TwirBadgeUpdateOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "file", "enabled", "ffzSlot"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=200")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Name = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "file":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			data, err := ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.File = graphql.OmittableOf(data)
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "ffzSlot":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ffzSlot"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.FfzSlot = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.FfzSlot = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTwirUsersSearchParams(ctx context.Context, obj interface{}) (gqlmodel.TwirUsersSearchParams, error) {
	var it gqlmodel.TwirUsersSearchParams
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"search", "page", "perPage", "isBotAdmin", "isBanned", "isBotEnabled", "badges"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "search":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Search = graphql.OmittableOf(data)
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = graphql.OmittableOf(data)
		case "perPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PerPage = graphql.OmittableOf(data)
		case "isBotAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isBotAdmin"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsBotAdmin = graphql.OmittableOf(data)
		case "isBanned":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isBanned"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsBanned = graphql.OmittableOf(data)
		case "isBotEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isBotEnabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsBotEnabled = graphql.OmittableOf(data)
		case "badges":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("badges"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Badges = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTwitchRedemptionsOpts(ctx context.Context, obj interface{}) (gqlmodel.TwitchRedemptionsOpts, error) {
	var it gqlmodel.TwitchRedemptionsOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"byChannelId", "userSearch", "page", "perPage", "rewardsIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "byChannelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("byChannelId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ByChannelID = graphql.OmittableOf(data)
		case "userSearch":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userSearch"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserSearch = graphql.OmittableOf(data)
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = graphql.OmittableOf(data)
		case "perPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.PerPage = graphql.OmittableOf(data)
		case "rewardsIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rewardsIds"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RewardsIds = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdatePublicSettingsInput(ctx context.Context, obj interface{}) (gqlmodel.UserUpdatePublicSettingsInput, error) {
	var it gqlmodel.UserUpdatePublicSettingsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"description", "socialLinks"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=5000")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Description = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "socialLinks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("socialLinks"))
			data, err := ec.unmarshalOSocialLinkInput2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSocialLinkInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SocialLinks = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdateSettingsInput(ctx context.Context, obj interface{}) (gqlmodel.UserUpdateSettingsInput, error) {
	var it gqlmodel.UserUpdateSettingsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"hideOnLandingPage"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "hideOnLandingPage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hideOnLandingPage"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HideOnLandingPage = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVariableCreateInput(ctx context.Context, obj interface{}) (gqlmodel.VariableCreateInput, error) {
	var it gqlmodel.VariableCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "type", "evalValue", "response"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=50")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Name = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Description = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNVariableType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariableType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "evalValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evalValue"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=10000")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.EvalValue = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "response":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("response"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.Response = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVariableUpdateInput(ctx context.Context, obj interface{}) (gqlmodel.VariableUpdateInput, error) {
	var it gqlmodel.VariableUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "type", "evalValue", "response"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=50")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Name = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Name = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Description = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Description = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOVariableType2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariableType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = graphql.OmittableOf(data)
		case "evalValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evalValue"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=10000")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.EvalValue = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.EvalValue = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "response":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("response"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.Response = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.Response = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVotebanGameOpts(ctx context.Context, obj interface{}) (gqlmodel.VotebanGameOpts, error) {
	var it gqlmodel.VotebanGameOpts
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"enabled", "timeoutSeconds", "timeoutModerators", "initMessage", "banMessage", "banMessageModerators", "surviveMessage", "surviveMessageModerators", "neededVotes", "voteDuration", "votingMode", "chatVotesWordsPositive", "chatVotesWordsNegative"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = graphql.OmittableOf(data)
		case "timeoutSeconds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutSeconds"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "min=1,max=86400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.TimeoutSeconds = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.TimeoutSeconds = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "timeoutModerators":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeoutModerators"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeoutModerators = graphql.OmittableOf(data)
		case "initMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initMessage"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.InitMessage = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.InitMessage = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "banMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banMessage"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.BanMessage = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.BanMessage = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "banMessageModerators":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("banMessageModerators"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.BanMessageModerators = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.BanMessageModerators = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "surviveMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surviveMessage"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SurviveMessage = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.SurviveMessage = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "surviveMessageModerators":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surviveMessageModerators"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚖstring(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*string); ok {
				it.SurviveMessageModerators = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.SurviveMessageModerators = graphql.OmittableOf[*string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "neededVotes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("neededVotes"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "min=1,max=999999")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.NeededVotes = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.NeededVotes = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "voteDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("voteDuration"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOInt2ᚖint(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "min=1,max=86400")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*int); ok {
				it.VoteDuration = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.VoteDuration = graphql.OmittableOf[*int](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *int`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "votingMode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("votingMode"))
			directive0 := func(ctx context.Context) (interface{}, error) {
				return ec.unmarshalOVoteBanGameVotingMode2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVoteBanGameVotingMode(ctx, v)
			}
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*gqlmodel.VoteBanGameVotingMode); ok {
				it.VotingMode = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.VotingMode = graphql.OmittableOf[*gqlmodel.VoteBanGameVotingMode](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel.VoteBanGameVotingMode`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "chatVotesWordsPositive":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chatVotesWordsPositive"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.ChatVotesWordsPositive = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.ChatVotesWordsPositive = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "chatVotesWordsNegative":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chatVotesWordsNegative"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOString2ᚕstringᚄ(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "dive,max=500")
				if err != nil {
					return nil, err
				}
				if ec.directives.Validate == nil {
					return nil, errors.New("directive validate is not implemented")
				}
				return ec.directives.Validate(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.([]string); ok {
				it.ChatVotesWordsNegative = graphql.OmittableOf(data)
			} else if tmp == nil {
				it.ChatVotesWordsNegative = graphql.OmittableOf[[]string](nil)
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _ChatAlertsSettings(ctx context.Context, sel ast.SelectionSet, obj gqlmodel.ChatAlertsSettings) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case gqlmodel.ChatAlertsFollowersSettings:
		return ec._ChatAlertsFollowersSettings(ctx, sel, &obj)
	case *gqlmodel.ChatAlertsFollowersSettings:
		if obj == nil {
			return graphql.Null
		}
		return ec._ChatAlertsFollowersSettings(ctx, sel, obj)
	case gqlmodel.ChatAlertsRaids:
		return ec._ChatAlertsRaids(ctx, sel, &obj)
	case *gqlmodel.ChatAlertsRaids:
		if obj == nil {
			return graphql.Null
		}
		return ec._ChatAlertsRaids(ctx, sel, obj)
	case gqlmodel.ChatAlertsDonations:
		return ec._ChatAlertsDonations(ctx, sel, &obj)
	case *gqlmodel.ChatAlertsDonations:
		if obj == nil {
			return graphql.Null
		}
		return ec._ChatAlertsDonations(ctx, sel, obj)
	case gqlmodel.ChatAlertsSubscribers:
		return ec._ChatAlertsSubscribers(ctx, sel, &obj)
	case *gqlmodel.ChatAlertsSubscribers:
		if obj == nil {
			return graphql.Null
		}
		return ec._ChatAlertsSubscribers(ctx, sel, obj)
	case gqlmodel.ChatAlertsCheers:
		return ec._ChatAlertsCheers(ctx, sel, &obj)
	case *gqlmodel.ChatAlertsCheers:
		if obj == nil {
			return graphql.Null
		}
		return ec._ChatAlertsCheers(ctx, sel, obj)
	case gqlmodel.ChatAlertsRedemptions:
		return ec._ChatAlertsRedemptions(ctx, sel, &obj)
	case *gqlmodel.ChatAlertsRedemptions:
		if obj == nil {
			return graphql.Null
		}
		return ec._ChatAlertsRedemptions(ctx, sel, obj)
	case gqlmodel.ChatAlertsFirstUserMessage:
		return ec._ChatAlertsFirstUserMessage(ctx, sel, &obj)
	case *gqlmodel.ChatAlertsFirstUserMessage:
		if obj == nil {
			return graphql.Null
		}
		return ec._ChatAlertsFirstUserMessage(ctx, sel, obj)
	case gqlmodel.ChatAlertsStreamOnline:
		return ec._ChatAlertsStreamOnline(ctx, sel, &obj)
	case *gqlmodel.ChatAlertsStreamOnline:
		if obj == nil {
			return graphql.Null
		}
		return ec._ChatAlertsStreamOnline(ctx, sel, obj)
	case gqlmodel.ChatAlertsStreamOffline:
		return ec._ChatAlertsStreamOffline(ctx, sel, &obj)
	case *gqlmodel.ChatAlertsStreamOffline:
		if obj == nil {
			return graphql.Null
		}
		return ec._ChatAlertsStreamOffline(ctx, sel, obj)
	case gqlmodel.ChatAlertsChatCleared:
		return ec._ChatAlertsChatCleared(ctx, sel, &obj)
	case *gqlmodel.ChatAlertsChatCleared:
		if obj == nil {
			return graphql.Null
		}
		return ec._ChatAlertsChatCleared(ctx, sel, obj)
	case gqlmodel.ChatAlertsBan:
		return ec._ChatAlertsBan(ctx, sel, &obj)
	case *gqlmodel.ChatAlertsBan:
		if obj == nil {
			return graphql.Null
		}
		return ec._ChatAlertsBan(ctx, sel, obj)
	case gqlmodel.ChatAlertsUnbanRequestCreate:
		return ec._ChatAlertsUnbanRequestCreate(ctx, sel, &obj)
	case *gqlmodel.ChatAlertsUnbanRequestCreate:
		if obj == nil {
			return graphql.Null
		}
		return ec._ChatAlertsUnbanRequestCreate(ctx, sel, obj)
	case gqlmodel.ChatAlertsUnbanRequestResolve:
		return ec._ChatAlertsUnbanRequestResolve(ctx, sel, &obj)
	case *gqlmodel.ChatAlertsUnbanRequestResolve:
		if obj == nil {
			return graphql.Null
		}
		return ec._ChatAlertsUnbanRequestResolve(ctx, sel, obj)
	case gqlmodel.ChatAlertsMessageDelete:
		return ec._ChatAlertsMessageDelete(ctx, sel, &obj)
	case *gqlmodel.ChatAlertsMessageDelete:
		if obj == nil {
			return graphql.Null
		}
		return ec._ChatAlertsMessageDelete(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Notification(ctx context.Context, sel ast.SelectionSet, obj gqlmodel.Notification) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case gqlmodel.UserNotification:
		return ec._UserNotification(ctx, sel, &obj)
	case *gqlmodel.UserNotification:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserNotification(ctx, sel, obj)
	case gqlmodel.AdminNotification:
		return ec._AdminNotification(ctx, sel, &obj)
	case *gqlmodel.AdminNotification:
		if obj == nil {
			return graphql.Null
		}
		return ec._AdminNotification(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _TwirUser(ctx context.Context, sel ast.SelectionSet, obj gqlmodel.TwirUser) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case gqlmodel.TwirAdminUser:
		return ec._TwirAdminUser(ctx, sel, &obj)
	case *gqlmodel.TwirAdminUser:
		if obj == nil {
			return graphql.Null
		}
		return ec._TwirAdminUser(ctx, sel, obj)
	case gqlmodel.CommunityUser:
		return ec._CommunityUser(ctx, sel, &obj)
	case *gqlmodel.CommunityUser:
		if obj == nil {
			return graphql.Null
		}
		return ec._CommunityUser(ctx, sel, obj)
	case gqlmodel.AuthenticatedUser:
		return ec._AuthenticatedUser(ctx, sel, &obj)
	case *gqlmodel.AuthenticatedUser:
		if obj == nil {
			return graphql.Null
		}
		return ec._AuthenticatedUser(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var adminAuditLogImplementors = []string{"AdminAuditLog"}

func (ec *executionContext) _AdminAuditLog(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.AdminAuditLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminAuditLogImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdminAuditLog")
		case "id":
			out.Values[i] = ec._AdminAuditLog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "system":
			out.Values[i] = ec._AdminAuditLog_system(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "operationType":
			out.Values[i] = ec._AdminAuditLog_operationType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "oldValue":
			out.Values[i] = ec._AdminAuditLog_oldValue(ctx, field, obj)
		case "newValue":
			out.Values[i] = ec._AdminAuditLog_newValue(ctx, field, obj)
		case "objectId":
			out.Values[i] = ec._AdminAuditLog_objectId(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._AdminAuditLog_userId(ctx, field, obj)
		case "channelId":
			out.Values[i] = ec._AdminAuditLog_channelId(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._AdminAuditLog_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "user":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AdminAuditLog_user(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "channel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AdminAuditLog_channel(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var adminAuditLogResponseImplementors = []string{"AdminAuditLogResponse"}

func (ec *executionContext) _AdminAuditLogResponse(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.AdminAuditLogResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminAuditLogResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdminAuditLogResponse")
		case "logs":
			out.Values[i] = ec._AdminAuditLogResponse_logs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._AdminAuditLogResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var adminNotificationImplementors = []string{"AdminNotification", "Notification"}

func (ec *executionContext) _AdminNotification(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.AdminNotification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminNotificationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdminNotification")
		case "id":
			out.Values[i] = ec._AdminNotification_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "text":
			out.Values[i] = ec._AdminNotification_text(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._AdminNotification_userId(ctx, field, obj)
		case "twitchProfile":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AdminNotification_twitchProfile(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._AdminNotification_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "editorJsJson":
			out.Values[i] = ec._AdminNotification_editorJsJson(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var adminNotificationsResponseImplementors = []string{"AdminNotificationsResponse"}

func (ec *executionContext) _AdminNotificationsResponse(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.AdminNotificationsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminNotificationsResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdminNotificationsResponse")
		case "notifications":
			out.Values[i] = ec._AdminNotificationsResponse_notifications(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._AdminNotificationsResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var auditLogImplementors = []string{"AuditLog"}

func (ec *executionContext) _AuditLog(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.AuditLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, auditLogImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuditLog")
		case "id":
			out.Values[i] = ec._AuditLog_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "system":
			out.Values[i] = ec._AuditLog_system(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "operationType":
			out.Values[i] = ec._AuditLog_operationType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "oldValue":
			out.Values[i] = ec._AuditLog_oldValue(ctx, field, obj)
		case "newValue":
			out.Values[i] = ec._AuditLog_newValue(ctx, field, obj)
		case "objectId":
			out.Values[i] = ec._AuditLog_objectId(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._AuditLog_userId(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._AuditLog_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "user":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuditLog_user(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var authenticatedUserImplementors = []string{"AuthenticatedUser", "TwirUser"}

func (ec *executionContext) _AuthenticatedUser(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.AuthenticatedUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authenticatedUserImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthenticatedUser")
		case "id":
			out.Values[i] = ec._AuthenticatedUser_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isBotAdmin":
			out.Values[i] = ec._AuthenticatedUser_isBotAdmin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isBanned":
			out.Values[i] = ec._AuthenticatedUser_isBanned(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isEnabled":
			out.Values[i] = ec._AuthenticatedUser_isEnabled(ctx, field, obj)
		case "isBotModerator":
			out.Values[i] = ec._AuthenticatedUser_isBotModerator(ctx, field, obj)
		case "apiKey":
			out.Values[i] = ec._AuthenticatedUser_apiKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "hideOnLandingPage":
			out.Values[i] = ec._AuthenticatedUser_hideOnLandingPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "botId":
			out.Values[i] = ec._AuthenticatedUser_botId(ctx, field, obj)
		case "twitchProfile":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuthenticatedUser_twitchProfile(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "selectedDashboardId":
			out.Values[i] = ec._AuthenticatedUser_selectedDashboardId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "selectedDashboardTwitchUser":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuthenticatedUser_selectedDashboardTwitchUser(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "availableDashboards":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuthenticatedUser_availableDashboards(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var badgeImplementors = []string{"Badge"}

func (ec *executionContext) _Badge(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Badge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, badgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Badge")
		case "id":
			out.Values[i] = ec._Badge_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Badge_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Badge_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fileUrl":
			out.Values[i] = ec._Badge_fileUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "enabled":
			out.Values[i] = ec._Badge_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "users":
			out.Values[i] = ec._Badge_users(ctx, field, obj)
		case "ffzSlot":
			out.Values[i] = ec._Badge_ffzSlot(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var builtInVariableImplementors = []string{"BuiltInVariable"}

func (ec *executionContext) _BuiltInVariable(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.BuiltInVariable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, builtInVariableImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BuiltInVariable")
		case "name":
			out.Values[i] = ec._BuiltInVariable_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "example":
			out.Values[i] = ec._BuiltInVariable_example(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._BuiltInVariable_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "visible":
			out.Values[i] = ec._BuiltInVariable_visible(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "canBeUsedInRegistry":
			out.Values[i] = ec._BuiltInVariable_canBeUsedInRegistry(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var channelAlertImplementors = []string{"ChannelAlert"}

func (ec *executionContext) _ChannelAlert(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChannelAlert) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelAlertImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChannelAlert")
		case "id":
			out.Values[i] = ec._ChannelAlert_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._ChannelAlert_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "audioId":
			out.Values[i] = ec._ChannelAlert_audioId(ctx, field, obj)
		case "audioVolume":
			out.Values[i] = ec._ChannelAlert_audioVolume(ctx, field, obj)
		case "commandIds":
			out.Values[i] = ec._ChannelAlert_commandIds(ctx, field, obj)
		case "rewardIds":
			out.Values[i] = ec._ChannelAlert_rewardIds(ctx, field, obj)
		case "greetingsIds":
			out.Values[i] = ec._ChannelAlert_greetingsIds(ctx, field, obj)
		case "keywordsIds":
			out.Values[i] = ec._ChannelAlert_keywordsIds(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsImplementors = []string{"ChatAlerts"}

func (ec *executionContext) _ChatAlerts(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlerts) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlerts")
		case "followers":
			out.Values[i] = ec._ChatAlerts_followers(ctx, field, obj)
		case "raids":
			out.Values[i] = ec._ChatAlerts_raids(ctx, field, obj)
		case "donations":
			out.Values[i] = ec._ChatAlerts_donations(ctx, field, obj)
		case "subscribers":
			out.Values[i] = ec._ChatAlerts_subscribers(ctx, field, obj)
		case "cheers":
			out.Values[i] = ec._ChatAlerts_cheers(ctx, field, obj)
		case "redemptions":
			out.Values[i] = ec._ChatAlerts_redemptions(ctx, field, obj)
		case "firstUserMessage":
			out.Values[i] = ec._ChatAlerts_firstUserMessage(ctx, field, obj)
		case "streamOnline":
			out.Values[i] = ec._ChatAlerts_streamOnline(ctx, field, obj)
		case "streamOffline":
			out.Values[i] = ec._ChatAlerts_streamOffline(ctx, field, obj)
		case "chatCleared":
			out.Values[i] = ec._ChatAlerts_chatCleared(ctx, field, obj)
		case "ban":
			out.Values[i] = ec._ChatAlerts_ban(ctx, field, obj)
		case "unbanRequestCreate":
			out.Values[i] = ec._ChatAlerts_unbanRequestCreate(ctx, field, obj)
		case "unbanRequestResolve":
			out.Values[i] = ec._ChatAlerts_unbanRequestResolve(ctx, field, obj)
		case "messageDelete":
			out.Values[i] = ec._ChatAlerts_messageDelete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsBanImplementors = []string{"ChatAlertsBan", "ChatAlertsSettings"}

func (ec *executionContext) _ChatAlertsBan(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsBan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsBanImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsBan")
		case "enabled":
			out.Values[i] = ec._ChatAlertsBan_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._ChatAlertsBan_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ignoreTimeoutFrom":
			out.Values[i] = ec._ChatAlertsBan_ignoreTimeoutFrom(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._ChatAlertsBan_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsChatClearedImplementors = []string{"ChatAlertsChatCleared", "ChatAlertsSettings"}

func (ec *executionContext) _ChatAlertsChatCleared(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsChatCleared) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsChatClearedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsChatCleared")
		case "enabled":
			out.Values[i] = ec._ChatAlertsChatCleared_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._ChatAlertsChatCleared_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._ChatAlertsChatCleared_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsCheersImplementors = []string{"ChatAlertsCheers", "ChatAlertsSettings"}

func (ec *executionContext) _ChatAlertsCheers(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsCheers) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsCheersImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsCheers")
		case "enabled":
			out.Values[i] = ec._ChatAlertsCheers_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._ChatAlertsCheers_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._ChatAlertsCheers_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsCountedMessageImplementors = []string{"ChatAlertsCountedMessage"}

func (ec *executionContext) _ChatAlertsCountedMessage(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsCountedMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsCountedMessageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsCountedMessage")
		case "count":
			out.Values[i] = ec._ChatAlertsCountedMessage_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "text":
			out.Values[i] = ec._ChatAlertsCountedMessage_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsDonationsImplementors = []string{"ChatAlertsDonations", "ChatAlertsSettings"}

func (ec *executionContext) _ChatAlertsDonations(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsDonations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsDonationsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsDonations")
		case "enabled":
			out.Values[i] = ec._ChatAlertsDonations_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._ChatAlertsDonations_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._ChatAlertsDonations_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsFirstUserMessageImplementors = []string{"ChatAlertsFirstUserMessage", "ChatAlertsSettings"}

func (ec *executionContext) _ChatAlertsFirstUserMessage(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsFirstUserMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsFirstUserMessageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsFirstUserMessage")
		case "enabled":
			out.Values[i] = ec._ChatAlertsFirstUserMessage_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._ChatAlertsFirstUserMessage_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._ChatAlertsFirstUserMessage_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsFollowersSettingsImplementors = []string{"ChatAlertsFollowersSettings", "ChatAlertsSettings"}

func (ec *executionContext) _ChatAlertsFollowersSettings(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsFollowersSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsFollowersSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsFollowersSettings")
		case "enabled":
			out.Values[i] = ec._ChatAlertsFollowersSettings_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._ChatAlertsFollowersSettings_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._ChatAlertsFollowersSettings_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsMessageImplementors = []string{"ChatAlertsMessage"}

func (ec *executionContext) _ChatAlertsMessage(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsMessageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsMessage")
		case "text":
			out.Values[i] = ec._ChatAlertsMessage_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsMessageDeleteImplementors = []string{"ChatAlertsMessageDelete", "ChatAlertsSettings"}

func (ec *executionContext) _ChatAlertsMessageDelete(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsMessageDelete) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsMessageDeleteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsMessageDelete")
		case "enabled":
			out.Values[i] = ec._ChatAlertsMessageDelete_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._ChatAlertsMessageDelete_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._ChatAlertsMessageDelete_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsRaidsImplementors = []string{"ChatAlertsRaids", "ChatAlertsSettings"}

func (ec *executionContext) _ChatAlertsRaids(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsRaids) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsRaidsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsRaids")
		case "enabled":
			out.Values[i] = ec._ChatAlertsRaids_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._ChatAlertsRaids_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._ChatAlertsRaids_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsRedemptionsImplementors = []string{"ChatAlertsRedemptions", "ChatAlertsSettings"}

func (ec *executionContext) _ChatAlertsRedemptions(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsRedemptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsRedemptionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsRedemptions")
		case "enabled":
			out.Values[i] = ec._ChatAlertsRedemptions_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._ChatAlertsRedemptions_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._ChatAlertsRedemptions_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ignoredRewardsIds":
			out.Values[i] = ec._ChatAlertsRedemptions_ignoredRewardsIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsStreamOfflineImplementors = []string{"ChatAlertsStreamOffline", "ChatAlertsSettings"}

func (ec *executionContext) _ChatAlertsStreamOffline(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsStreamOffline) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsStreamOfflineImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsStreamOffline")
		case "enabled":
			out.Values[i] = ec._ChatAlertsStreamOffline_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._ChatAlertsStreamOffline_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._ChatAlertsStreamOffline_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsStreamOnlineImplementors = []string{"ChatAlertsStreamOnline", "ChatAlertsSettings"}

func (ec *executionContext) _ChatAlertsStreamOnline(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsStreamOnline) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsStreamOnlineImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsStreamOnline")
		case "enabled":
			out.Values[i] = ec._ChatAlertsStreamOnline_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._ChatAlertsStreamOnline_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._ChatAlertsStreamOnline_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsSubscribersImplementors = []string{"ChatAlertsSubscribers", "ChatAlertsSettings"}

func (ec *executionContext) _ChatAlertsSubscribers(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsSubscribers) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsSubscribersImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsSubscribers")
		case "enabled":
			out.Values[i] = ec._ChatAlertsSubscribers_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._ChatAlertsSubscribers_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._ChatAlertsSubscribers_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsUnbanRequestCreateImplementors = []string{"ChatAlertsUnbanRequestCreate", "ChatAlertsSettings"}

func (ec *executionContext) _ChatAlertsUnbanRequestCreate(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsUnbanRequestCreate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsUnbanRequestCreateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsUnbanRequestCreate")
		case "enabled":
			out.Values[i] = ec._ChatAlertsUnbanRequestCreate_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._ChatAlertsUnbanRequestCreate_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._ChatAlertsUnbanRequestCreate_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatAlertsUnbanRequestResolveImplementors = []string{"ChatAlertsUnbanRequestResolve", "ChatAlertsSettings"}

func (ec *executionContext) _ChatAlertsUnbanRequestResolve(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatAlertsUnbanRequestResolve) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatAlertsUnbanRequestResolveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatAlertsUnbanRequestResolve")
		case "enabled":
			out.Values[i] = ec._ChatAlertsUnbanRequestResolve_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._ChatAlertsUnbanRequestResolve_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._ChatAlertsUnbanRequestResolve_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chatOverlayImplementors = []string{"ChatOverlay"}

func (ec *executionContext) _ChatOverlay(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChatOverlay) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chatOverlayImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChatOverlay")
		case "id":
			out.Values[i] = ec._ChatOverlay_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messageHideTimeout":
			out.Values[i] = ec._ChatOverlay_messageHideTimeout(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messageShowDelay":
			out.Values[i] = ec._ChatOverlay_messageShowDelay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "preset":
			out.Values[i] = ec._ChatOverlay_preset(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fontSize":
			out.Values[i] = ec._ChatOverlay_fontSize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hideCommands":
			out.Values[i] = ec._ChatOverlay_hideCommands(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hideBots":
			out.Values[i] = ec._ChatOverlay_hideBots(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fontFamily":
			out.Values[i] = ec._ChatOverlay_fontFamily(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "showBadges":
			out.Values[i] = ec._ChatOverlay_showBadges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "showAnnounceBadge":
			out.Values[i] = ec._ChatOverlay_showAnnounceBadge(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "textShadowColor":
			out.Values[i] = ec._ChatOverlay_textShadowColor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "textShadowSize":
			out.Values[i] = ec._ChatOverlay_textShadowSize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "chatBackgroundColor":
			out.Values[i] = ec._ChatOverlay_chatBackgroundColor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "direction":
			out.Values[i] = ec._ChatOverlay_direction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fontWeight":
			out.Values[i] = ec._ChatOverlay_fontWeight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fontStyle":
			out.Values[i] = ec._ChatOverlay_fontStyle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "paddingContainer":
			out.Values[i] = ec._ChatOverlay_paddingContainer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "animation":
			out.Values[i] = ec._ChatOverlay_animation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commandImplementors = []string{"Command"}

func (ec *executionContext) _Command(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Command) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commandImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Command")
		case "id":
			out.Values[i] = ec._Command_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Command_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Command_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "aliases":
			out.Values[i] = ec._Command_aliases(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "responses":
			out.Values[i] = ec._Command_responses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._Command_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldownType":
			out.Values[i] = ec._Command_cooldownType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "enabled":
			out.Values[i] = ec._Command_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "visible":
			out.Values[i] = ec._Command_visible(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "default":
			out.Values[i] = ec._Command_default(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultName":
			out.Values[i] = ec._Command_defaultName(ctx, field, obj)
		case "module":
			out.Values[i] = ec._Command_module(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isReply":
			out.Values[i] = ec._Command_isReply(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keepResponsesOrder":
			out.Values[i] = ec._Command_keepResponsesOrder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deniedUsersIds":
			out.Values[i] = ec._Command_deniedUsersIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "allowedUsersIds":
			out.Values[i] = ec._Command_allowedUsersIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rolesIds":
			out.Values[i] = ec._Command_rolesIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "onlineOnly":
			out.Values[i] = ec._Command_onlineOnly(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldownRolesIds":
			out.Values[i] = ec._Command_cooldownRolesIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "enabledCategories":
			out.Values[i] = ec._Command_enabledCategories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requiredWatchTime":
			out.Values[i] = ec._Command_requiredWatchTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requiredMessages":
			out.Values[i] = ec._Command_requiredMessages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requiredUsedChannelPoints":
			out.Values[i] = ec._Command_requiredUsedChannelPoints(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "groupId":
			out.Values[i] = ec._Command_groupId(ctx, field, obj)
		case "group":
			out.Values[i] = ec._Command_group(ctx, field, obj)
		case "expiresAt":
			out.Values[i] = ec._Command_expiresAt(ctx, field, obj)
		case "expiresType":
			out.Values[i] = ec._Command_expiresType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commandCreatePayloadImplementors = []string{"CommandCreatePayload"}

func (ec *executionContext) _CommandCreatePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.CommandCreatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commandCreatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommandCreatePayload")
		case "id":
			out.Values[i] = ec._CommandCreatePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commandGroupImplementors = []string{"CommandGroup"}

func (ec *executionContext) _CommandGroup(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.CommandGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commandGroupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommandGroup")
		case "id":
			out.Values[i] = ec._CommandGroup_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._CommandGroup_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "color":
			out.Values[i] = ec._CommandGroup_color(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commandResponseImplementors = []string{"CommandResponse"}

func (ec *executionContext) _CommandResponse(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.CommandResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commandResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommandResponse")
		case "id":
			out.Values[i] = ec._CommandResponse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "commandId":
			out.Values[i] = ec._CommandResponse_commandId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "text":
			out.Values[i] = ec._CommandResponse_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "twitchCategoriesIds":
			out.Values[i] = ec._CommandResponse_twitchCategoriesIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "twitchCategories":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommandResponse_twitchCategories(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var communityUserImplementors = []string{"CommunityUser", "TwirUser"}

func (ec *executionContext) _CommunityUser(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.CommunityUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, communityUserImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommunityUser")
		case "id":
			out.Values[i] = ec._CommunityUser_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "twitchProfile":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommunityUser_twitchProfile(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "watchedMs":
			out.Values[i] = ec._CommunityUser_watchedMs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "messages":
			out.Values[i] = ec._CommunityUser_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "usedEmotes":
			out.Values[i] = ec._CommunityUser_usedEmotes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "usedChannelPoints":
			out.Values[i] = ec._CommunityUser_usedChannelPoints(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var communityUsersResponseImplementors = []string{"CommunityUsersResponse"}

func (ec *executionContext) _CommunityUsersResponse(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.CommunityUsersResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, communityUsersResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommunityUsersResponse")
		case "users":
			out.Values[i] = ec._CommunityUsersResponse_users(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._CommunityUsersResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardImplementors = []string{"Dashboard"}

func (ec *executionContext) _Dashboard(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Dashboard) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Dashboard")
		case "id":
			out.Values[i] = ec._Dashboard_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "flags":
			out.Values[i] = ec._Dashboard_flags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "twitchProfile":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Dashboard_twitchProfile(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardEventDataImplementors = []string{"DashboardEventData"}

func (ec *executionContext) _DashboardEventData(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DashboardEventData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardEventDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardEventData")
		case "donationAmount":
			out.Values[i] = ec._DashboardEventData_donationAmount(ctx, field, obj)
		case "donationCurrency":
			out.Values[i] = ec._DashboardEventData_donationCurrency(ctx, field, obj)
		case "donationMessage":
			out.Values[i] = ec._DashboardEventData_donationMessage(ctx, field, obj)
		case "donationUserName":
			out.Values[i] = ec._DashboardEventData_donationUserName(ctx, field, obj)
		case "raidedViewersCount":
			out.Values[i] = ec._DashboardEventData_raidedViewersCount(ctx, field, obj)
		case "raidedFromUserName":
			out.Values[i] = ec._DashboardEventData_raidedFromUserName(ctx, field, obj)
		case "raidedFromDisplayName":
			out.Values[i] = ec._DashboardEventData_raidedFromDisplayName(ctx, field, obj)
		case "followUserName":
			out.Values[i] = ec._DashboardEventData_followUserName(ctx, field, obj)
		case "followUserDisplayName":
			out.Values[i] = ec._DashboardEventData_followUserDisplayName(ctx, field, obj)
		case "redemptionTitle":
			out.Values[i] = ec._DashboardEventData_redemptionTitle(ctx, field, obj)
		case "redemptionInput":
			out.Values[i] = ec._DashboardEventData_redemptionInput(ctx, field, obj)
		case "redemptionUserName":
			out.Values[i] = ec._DashboardEventData_redemptionUserName(ctx, field, obj)
		case "redemptionUserDisplayName":
			out.Values[i] = ec._DashboardEventData_redemptionUserDisplayName(ctx, field, obj)
		case "redemptionCost":
			out.Values[i] = ec._DashboardEventData_redemptionCost(ctx, field, obj)
		case "subLevel":
			out.Values[i] = ec._DashboardEventData_subLevel(ctx, field, obj)
		case "subUserName":
			out.Values[i] = ec._DashboardEventData_subUserName(ctx, field, obj)
		case "subUserDisplayName":
			out.Values[i] = ec._DashboardEventData_subUserDisplayName(ctx, field, obj)
		case "reSubLevel":
			out.Values[i] = ec._DashboardEventData_reSubLevel(ctx, field, obj)
		case "reSubUserName":
			out.Values[i] = ec._DashboardEventData_reSubUserName(ctx, field, obj)
		case "reSubUserDisplayName":
			out.Values[i] = ec._DashboardEventData_reSubUserDisplayName(ctx, field, obj)
		case "reSubMonths":
			out.Values[i] = ec._DashboardEventData_reSubMonths(ctx, field, obj)
		case "reSubStreak":
			out.Values[i] = ec._DashboardEventData_reSubStreak(ctx, field, obj)
		case "subGiftLevel":
			out.Values[i] = ec._DashboardEventData_subGiftLevel(ctx, field, obj)
		case "subGiftUserName":
			out.Values[i] = ec._DashboardEventData_subGiftUserName(ctx, field, obj)
		case "subGiftUserDisplayName":
			out.Values[i] = ec._DashboardEventData_subGiftUserDisplayName(ctx, field, obj)
		case "subGiftTargetUserName":
			out.Values[i] = ec._DashboardEventData_subGiftTargetUserName(ctx, field, obj)
		case "subGiftTargetUserDisplayName":
			out.Values[i] = ec._DashboardEventData_subGiftTargetUserDisplayName(ctx, field, obj)
		case "firstUserMessageUserName":
			out.Values[i] = ec._DashboardEventData_firstUserMessageUserName(ctx, field, obj)
		case "firstUserMessageUserDisplayName":
			out.Values[i] = ec._DashboardEventData_firstUserMessageUserDisplayName(ctx, field, obj)
		case "firstUserMessageMessage":
			out.Values[i] = ec._DashboardEventData_firstUserMessageMessage(ctx, field, obj)
		case "banReason":
			out.Values[i] = ec._DashboardEventData_banReason(ctx, field, obj)
		case "banEndsInMinutes":
			out.Values[i] = ec._DashboardEventData_banEndsInMinutes(ctx, field, obj)
		case "bannedUserName":
			out.Values[i] = ec._DashboardEventData_bannedUserName(ctx, field, obj)
		case "bannedUserLogin":
			out.Values[i] = ec._DashboardEventData_bannedUserLogin(ctx, field, obj)
		case "moderatorName":
			out.Values[i] = ec._DashboardEventData_moderatorName(ctx, field, obj)
		case "moderatorDisplayName":
			out.Values[i] = ec._DashboardEventData_moderatorDisplayName(ctx, field, obj)
		case "message":
			out.Values[i] = ec._DashboardEventData_message(ctx, field, obj)
		case "userLogin":
			out.Values[i] = ec._DashboardEventData_userLogin(ctx, field, obj)
		case "userName":
			out.Values[i] = ec._DashboardEventData_userName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardEventListPayloadImplementors = []string{"DashboardEventListPayload"}

func (ec *executionContext) _DashboardEventListPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DashboardEventListPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardEventListPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardEventListPayload")
		case "events":
			out.Values[i] = ec._DashboardEventListPayload_events(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardEventPayloadImplementors = []string{"DashboardEventPayload"}

func (ec *executionContext) _DashboardEventPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DashboardEventPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardEventPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardEventPayload")
		case "userId":
			out.Values[i] = ec._DashboardEventPayload_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._DashboardEventPayload_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._DashboardEventPayload_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._DashboardEventPayload_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardStatsImplementors = []string{"DashboardStats"}

func (ec *executionContext) _DashboardStats(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DashboardStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardStatsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardStats")
		case "categoryId":
			out.Values[i] = ec._DashboardStats_categoryId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "categoryName":
			out.Values[i] = ec._DashboardStats_categoryName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "viewers":
			out.Values[i] = ec._DashboardStats_viewers(ctx, field, obj)
		case "startedAt":
			out.Values[i] = ec._DashboardStats_startedAt(ctx, field, obj)
		case "title":
			out.Values[i] = ec._DashboardStats_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "chatMessages":
			out.Values[i] = ec._DashboardStats_chatMessages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "followers":
			out.Values[i] = ec._DashboardStats_followers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "usedEmotes":
			out.Values[i] = ec._DashboardStats_usedEmotes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requestedSongs":
			out.Values[i] = ec._DashboardStats_requestedSongs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "subs":
			out.Values[i] = ec._DashboardStats_subs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var duelGameImplementors = []string{"DuelGame"}

func (ec *executionContext) _DuelGame(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DuelGame) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, duelGameImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DuelGame")
		case "enabled":
			out.Values[i] = ec._DuelGame_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userCooldown":
			out.Values[i] = ec._DuelGame_userCooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "globalCooldown":
			out.Values[i] = ec._DuelGame_globalCooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timeoutSeconds":
			out.Values[i] = ec._DuelGame_timeoutSeconds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startMessage":
			out.Values[i] = ec._DuelGame_startMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "resultMessage":
			out.Values[i] = ec._DuelGame_resultMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "secondsToAccept":
			out.Values[i] = ec._DuelGame_secondsToAccept(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pointsPerWin":
			out.Values[i] = ec._DuelGame_pointsPerWin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pointsPerLose":
			out.Values[i] = ec._DuelGame_pointsPerLose(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bothDiePercent":
			out.Values[i] = ec._DuelGame_bothDiePercent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bothDieMessage":
			out.Values[i] = ec._DuelGame_bothDieMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var eightBallGameImplementors = []string{"EightBallGame"}

func (ec *executionContext) _EightBallGame(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.EightBallGame) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eightBallGameImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EightBallGame")
		case "enabled":
			out.Values[i] = ec._EightBallGame_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "answers":
			out.Values[i] = ec._EightBallGame_answers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emoteStatisticTopUserImplementors = []string{"EmoteStatisticTopUser"}

func (ec *executionContext) _EmoteStatisticTopUser(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.EmoteStatisticTopUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emoteStatisticTopUserImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmoteStatisticTopUser")
		case "userId":
			out.Values[i] = ec._EmoteStatisticTopUser_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "twitchProfile":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EmoteStatisticTopUser_twitchProfile(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "count":
			out.Values[i] = ec._EmoteStatisticTopUser_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emoteStatisticUsageImplementors = []string{"EmoteStatisticUsage"}

func (ec *executionContext) _EmoteStatisticUsage(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.EmoteStatisticUsage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emoteStatisticUsageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmoteStatisticUsage")
		case "count":
			out.Values[i] = ec._EmoteStatisticUsage_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timestamp":
			out.Values[i] = ec._EmoteStatisticUsage_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emoteStatisticUserUsageImplementors = []string{"EmoteStatisticUserUsage"}

func (ec *executionContext) _EmoteStatisticUserUsage(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.EmoteStatisticUserUsage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emoteStatisticUserUsageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmoteStatisticUserUsage")
		case "userId":
			out.Values[i] = ec._EmoteStatisticUserUsage_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "twitchProfile":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EmoteStatisticUserUsage_twitchProfile(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "date":
			out.Values[i] = ec._EmoteStatisticUserUsage_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emotesStatisticImplementors = []string{"EmotesStatistic"}

func (ec *executionContext) _EmotesStatistic(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.EmotesStatistic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emotesStatisticImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmotesStatistic")
		case "emoteName":
			out.Values[i] = ec._EmotesStatistic_emoteName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalUsages":
			out.Values[i] = ec._EmotesStatistic_totalUsages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastUsedTimestamp":
			out.Values[i] = ec._EmotesStatistic_lastUsedTimestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "graphicUsages":
			out.Values[i] = ec._EmotesStatistic_graphicUsages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emotesStatisticEmoteDetailedResponseImplementors = []string{"EmotesStatisticEmoteDetailedResponse"}

func (ec *executionContext) _EmotesStatisticEmoteDetailedResponse(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.EmotesStatisticEmoteDetailedResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emotesStatisticEmoteDetailedResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmotesStatisticEmoteDetailedResponse")
		case "emoteName":
			out.Values[i] = ec._EmotesStatisticEmoteDetailedResponse_emoteName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalUsages":
			out.Values[i] = ec._EmotesStatisticEmoteDetailedResponse_totalUsages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastUsedTimestamp":
			out.Values[i] = ec._EmotesStatisticEmoteDetailedResponse_lastUsedTimestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "graphicUsages":
			out.Values[i] = ec._EmotesStatisticEmoteDetailedResponse_graphicUsages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "usagesHistory":
			out.Values[i] = ec._EmotesStatisticEmoteDetailedResponse_usagesHistory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "usagesByUsersTotal":
			out.Values[i] = ec._EmotesStatisticEmoteDetailedResponse_usagesByUsersTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "topUsers":
			out.Values[i] = ec._EmotesStatisticEmoteDetailedResponse_topUsers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "topUsersTotal":
			out.Values[i] = ec._EmotesStatisticEmoteDetailedResponse_topUsersTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emotesStatisticResponseImplementors = []string{"EmotesStatisticResponse"}

func (ec *executionContext) _EmotesStatisticResponse(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.EmotesStatisticResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emotesStatisticResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmotesStatisticResponse")
		case "emotes":
			out.Values[i] = ec._EmotesStatisticResponse_emotes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._EmotesStatisticResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var greetingImplementors = []string{"Greeting"}

func (ec *executionContext) _Greeting(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Greeting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, greetingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Greeting")
		case "id":
			out.Values[i] = ec._Greeting_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "userId":
			out.Values[i] = ec._Greeting_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "twitchProfile":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Greeting_twitchProfile(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "enabled":
			out.Values[i] = ec._Greeting_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isReply":
			out.Values[i] = ec._Greeting_isReply(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "text":
			out.Values[i] = ec._Greeting_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var keywordImplementors = []string{"Keyword"}

func (ec *executionContext) _Keyword(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Keyword) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, keywordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Keyword")
		case "id":
			out.Values[i] = ec._Keyword_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "text":
			out.Values[i] = ec._Keyword_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "response":
			out.Values[i] = ec._Keyword_response(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._Keyword_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._Keyword_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isReply":
			out.Values[i] = ec._Keyword_isReply(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRegularExpression":
			out.Values[i] = ec._Keyword_isRegularExpression(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "usageCount":
			out.Values[i] = ec._Keyword_usageCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "dropAllAuthSessions":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_dropAllAuthSessions(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eventsubSubscribe":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_eventsubSubscribe(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "badgesDelete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_badgesDelete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "badgesUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_badgesUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "badgesCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_badgesCreate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "badgesAddUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_badgesAddUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "badgesRemoveUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_badgesRemoveUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "switchUserBan":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_switchUserBan(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "switchUserAdmin":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_switchUserAdmin(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelAlertsCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_channelAlertsCreate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelAlertsUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_channelAlertsUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelAlertsDelete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_channelAlertsDelete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateChatAlerts":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateChatAlerts(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "commandsGroupsCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_commandsGroupsCreate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "commandsGroupsUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_commandsGroupsUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "commandsGroupsRemove":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_commandsGroupsRemove(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "commandsCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_commandsCreate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "commandsUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_commandsUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "commandsRemove":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_commandsRemove(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "communityResetStats":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_communityResetStats(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gamesEightBallUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_gamesEightBallUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gamesDuelUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_gamesDuelUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gamesRussianRouletteUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_gamesRussianRouletteUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gamesSeppukuUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_gamesSeppukuUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gamesVotebanUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_gamesVotebanUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "greetingsCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_greetingsCreate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "greetingsUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_greetingsUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "greetingsRemove":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_greetingsRemove(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keywordCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_keywordCreate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keywordUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_keywordUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keywordRemove":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_keywordRemove(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "notificationsCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_notificationsCreate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "notificationsUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_notificationsUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "notificationsDelete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_notificationsDelete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "chatOverlayUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_chatOverlayUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "chatOverlayCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_chatOverlayCreate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "chatOverlayDelete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_chatOverlayDelete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nowPlayingOverlayUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_nowPlayingOverlayUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nowPlayingOverlayCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_nowPlayingOverlayCreate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nowPlayingOverlayDelete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_nowPlayingOverlayDelete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rolesCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rolesCreate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rolesUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rolesUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rolesRemove":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rolesRemove(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "songRequestsUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_songRequestsUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timersCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_timersCreate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timersUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_timersUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timersRemove":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_timersRemove(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authenticatedUserSelectDashboard":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_authenticatedUserSelectDashboard(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authenticatedUserUpdateSettings":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_authenticatedUserUpdateSettings(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authenticatedUserRegenerateApiKey":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_authenticatedUserRegenerateApiKey(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authenticatedUserUpdatePublicPage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_authenticatedUserUpdatePublicPage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "logout":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_logout(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "variablesCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_variablesCreate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "variablesUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_variablesUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "variablesDelete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_variablesDelete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "executeScript":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_executeScript(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var nowPlayingOverlayImplementors = []string{"NowPlayingOverlay"}

func (ec *executionContext) _NowPlayingOverlay(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.NowPlayingOverlay) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nowPlayingOverlayImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NowPlayingOverlay")
		case "id":
			out.Values[i] = ec._NowPlayingOverlay_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "preset":
			out.Values[i] = ec._NowPlayingOverlay_preset(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelId":
			out.Values[i] = ec._NowPlayingOverlay_channelId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fontFamily":
			out.Values[i] = ec._NowPlayingOverlay_fontFamily(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fontWeight":
			out.Values[i] = ec._NowPlayingOverlay_fontWeight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "backgroundColor":
			out.Values[i] = ec._NowPlayingOverlay_backgroundColor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "showImage":
			out.Values[i] = ec._NowPlayingOverlay_showImage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hideTimeout":
			out.Values[i] = ec._NowPlayingOverlay_hideTimeout(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var nowPlayingOverlayTrackImplementors = []string{"NowPlayingOverlayTrack"}

func (ec *executionContext) _NowPlayingOverlayTrack(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.NowPlayingOverlayTrack) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nowPlayingOverlayTrackImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NowPlayingOverlayTrack")
		case "artist":
			out.Values[i] = ec._NowPlayingOverlayTrack_artist(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._NowPlayingOverlayTrack_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "imageUrl":
			out.Values[i] = ec._NowPlayingOverlayTrack_imageUrl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var publicCommandImplementors = []string{"PublicCommand"}

func (ec *executionContext) _PublicCommand(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.PublicCommand) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, publicCommandImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PublicCommand")
		case "name":
			out.Values[i] = ec._PublicCommand_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._PublicCommand_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "aliases":
			out.Values[i] = ec._PublicCommand_aliases(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "responses":
			out.Values[i] = ec._PublicCommand_responses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown":
			out.Values[i] = ec._PublicCommand_cooldown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldownType":
			out.Values[i] = ec._PublicCommand_cooldownType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "module":
			out.Values[i] = ec._PublicCommand_module(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "permissions":
			out.Values[i] = ec._PublicCommand_permissions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var publicCommandPermissionImplementors = []string{"PublicCommandPermission"}

func (ec *executionContext) _PublicCommandPermission(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.PublicCommandPermission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, publicCommandPermissionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PublicCommandPermission")
		case "name":
			out.Values[i] = ec._PublicCommandPermission_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._PublicCommandPermission_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var publicSettingsImplementors = []string{"PublicSettings"}

func (ec *executionContext) _PublicSettings(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.PublicSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, publicSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PublicSettings")
		case "description":
			out.Values[i] = ec._PublicSettings_description(ctx, field, obj)
		case "socialLinks":
			out.Values[i] = ec._PublicSettings_socialLinks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "adminAuditLogs":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_adminAuditLogs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "twirBadges":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_twirBadges(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "twirUsers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_twirUsers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "channelAlerts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_channelAlerts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "chatAlerts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_chatAlerts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "commandsGroups":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_commandsGroups(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "commands":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_commands(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "commandsPublic":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_commandsPublic(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "rewardsRedemptionsHistory":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rewardsRedemptionsHistory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "communityUsers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_communityUsers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "emotesStatistics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_emotesStatistics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "emotesStatisticEmoteDetailedInformation":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_emotesStatisticEmoteDetailedInformation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "gamesEightBall":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gamesEightBall(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "gamesDuel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gamesDuel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "gamesRussianRoulette":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gamesRussianRoulette(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "gamesSeppuku":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gamesSeppuku(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "gamesVoteban":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gamesVoteban(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "greetings":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_greetings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "keywords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_keywords(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "notificationsByUser":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_notificationsByUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "notificationsByAdmin":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_notificationsByAdmin(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "chatOverlays":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_chatOverlays(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "chatOverlaysById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_chatOverlaysById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "nowPlayingOverlays":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nowPlayingOverlays(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "nowPlayingOverlaysById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nowPlayingOverlaysById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "twitchRewards":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_twitchRewards(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "roles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_roles(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "songRequests":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_songRequests(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "songRequestsSearchChannelOrVideo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_songRequestsSearchChannelOrVideo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "twirStats":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_twirStats(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "timers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_timers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "twitchGetUserById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_twitchGetUserById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "twitchGetUserByName":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_twitchGetUserByName(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "twitchGetChannelRewards":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_twitchGetChannelRewards(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "twitchGetChannelBadges":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_twitchGetChannelBadges(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "twitchGetGlobalBadges":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_twitchGetGlobalBadges(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "auditLog":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_auditLog(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "authenticatedUser":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authenticatedUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "userPublicSettings":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userPublicSettings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "authLink":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authLink(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "variables":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_variables(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "variablesBuiltIn":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_variablesBuiltIn(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var roleImplementors = []string{"Role"}

func (ec *executionContext) _Role(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Role) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Role")
		case "id":
			out.Values[i] = ec._Role_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "channelId":
			out.Values[i] = ec._Role_channelId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Role_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			out.Values[i] = ec._Role_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "permissions":
			out.Values[i] = ec._Role_permissions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "settings":
			out.Values[i] = ec._Role_settings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "users":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Role_users(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var roleSettingsImplementors = []string{"RoleSettings"}

func (ec *executionContext) _RoleSettings(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RoleSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RoleSettings")
		case "requiredWatchTime":
			out.Values[i] = ec._RoleSettings_requiredWatchTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requiredMessages":
			out.Values[i] = ec._RoleSettings_requiredMessages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requiredUserChannelPoints":
			out.Values[i] = ec._RoleSettings_requiredUserChannelPoints(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var russianRouletteGameImplementors = []string{"RussianRouletteGame"}

func (ec *executionContext) _RussianRouletteGame(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RussianRouletteGame) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, russianRouletteGameImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RussianRouletteGame")
		case "enabled":
			out.Values[i] = ec._RussianRouletteGame_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "canBeUsedByModerator":
			out.Values[i] = ec._RussianRouletteGame_canBeUsedByModerator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timeoutSeconds":
			out.Values[i] = ec._RussianRouletteGame_timeoutSeconds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "decisionSeconds":
			out.Values[i] = ec._RussianRouletteGame_decisionSeconds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "initMessage":
			out.Values[i] = ec._RussianRouletteGame_initMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "surviveMessage":
			out.Values[i] = ec._RussianRouletteGame_surviveMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deathMessage":
			out.Values[i] = ec._RussianRouletteGame_deathMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "chargedBullets":
			out.Values[i] = ec._RussianRouletteGame_chargedBullets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tumberSize":
			out.Values[i] = ec._RussianRouletteGame_tumberSize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var seppukuGameImplementors = []string{"SeppukuGame"}

func (ec *executionContext) _SeppukuGame(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.SeppukuGame) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seppukuGameImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeppukuGame")
		case "enabled":
			out.Values[i] = ec._SeppukuGame_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timeoutSeconds":
			out.Values[i] = ec._SeppukuGame_timeoutSeconds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timeoutModerators":
			out.Values[i] = ec._SeppukuGame_timeoutModerators(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._SeppukuGame_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messageModerators":
			out.Values[i] = ec._SeppukuGame_messageModerators(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var socialLinkImplementors = []string{"SocialLink"}

func (ec *executionContext) _SocialLink(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.SocialLink) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, socialLinkImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SocialLink")
		case "title":
			out.Values[i] = ec._SocialLink_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "href":
			out.Values[i] = ec._SocialLink_href(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var songRequestsChannelTranslationsImplementors = []string{"SongRequestsChannelTranslations"}

func (ec *executionContext) _SongRequestsChannelTranslations(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.SongRequestsChannelTranslations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, songRequestsChannelTranslationsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SongRequestsChannelTranslations")
		case "denied":
			out.Values[i] = ec._SongRequestsChannelTranslations_denied(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var songRequestsDenyListImplementors = []string{"SongRequestsDenyList"}

func (ec *executionContext) _SongRequestsDenyList(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.SongRequestsDenyList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, songRequestsDenyListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SongRequestsDenyList")
		case "users":
			out.Values[i] = ec._SongRequestsDenyList_users(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "songs":
			out.Values[i] = ec._SongRequestsDenyList_songs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channels":
			out.Values[i] = ec._SongRequestsDenyList_channels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "artistsNames":
			out.Values[i] = ec._SongRequestsDenyList_artistsNames(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "words":
			out.Values[i] = ec._SongRequestsDenyList_words(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var songRequestsSearchChannelOrVideoItemImplementors = []string{"SongRequestsSearchChannelOrVideoItem"}

func (ec *executionContext) _SongRequestsSearchChannelOrVideoItem(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.SongRequestsSearchChannelOrVideoItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, songRequestsSearchChannelOrVideoItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SongRequestsSearchChannelOrVideoItem")
		case "id":
			out.Values[i] = ec._SongRequestsSearchChannelOrVideoItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._SongRequestsSearchChannelOrVideoItem_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "thumbnail":
			out.Values[i] = ec._SongRequestsSearchChannelOrVideoItem_thumbnail(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var songRequestsSearchChannelOrVideoResponseImplementors = []string{"SongRequestsSearchChannelOrVideoResponse"}

func (ec *executionContext) _SongRequestsSearchChannelOrVideoResponse(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.SongRequestsSearchChannelOrVideoResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, songRequestsSearchChannelOrVideoResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SongRequestsSearchChannelOrVideoResponse")
		case "items":
			out.Values[i] = ec._SongRequestsSearchChannelOrVideoResponse_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var songRequestsSettingsImplementors = []string{"SongRequestsSettings"}

func (ec *executionContext) _SongRequestsSettings(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.SongRequestsSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, songRequestsSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SongRequestsSettings")
		case "enabled":
			out.Values[i] = ec._SongRequestsSettings_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "acceptOnlyWhenOnline":
			out.Values[i] = ec._SongRequestsSettings_acceptOnlyWhenOnline(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxRequests":
			out.Values[i] = ec._SongRequestsSettings_maxRequests(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelPointsRewardId":
			out.Values[i] = ec._SongRequestsSettings_channelPointsRewardId(ctx, field, obj)
		case "announcePlay":
			out.Values[i] = ec._SongRequestsSettings_announcePlay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "neededVotesForSkip":
			out.Values[i] = ec._SongRequestsSettings_neededVotesForSkip(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user":
			out.Values[i] = ec._SongRequestsSettings_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "song":
			out.Values[i] = ec._SongRequestsSettings_song(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "denyList":
			out.Values[i] = ec._SongRequestsSettings_denyList(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "translations":
			out.Values[i] = ec._SongRequestsSettings_translations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "takeSongFromDonationMessages":
			out.Values[i] = ec._SongRequestsSettings_takeSongFromDonationMessages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "playerNoCookieMode":
			out.Values[i] = ec._SongRequestsSettings_playerNoCookieMode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var songRequestsSongSettingsImplementors = []string{"SongRequestsSongSettings"}

func (ec *executionContext) _SongRequestsSongSettings(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.SongRequestsSongSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, songRequestsSongSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SongRequestsSongSettings")
		case "minLength":
			out.Values[i] = ec._SongRequestsSongSettings_minLength(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxLength":
			out.Values[i] = ec._SongRequestsSongSettings_maxLength(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minViews":
			out.Values[i] = ec._SongRequestsSongSettings_minViews(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "acceptedCategories":
			out.Values[i] = ec._SongRequestsSongSettings_acceptedCategories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var songRequestsSongTranslationsImplementors = []string{"SongRequestsSongTranslations"}

func (ec *executionContext) _SongRequestsSongTranslations(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.SongRequestsSongTranslations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, songRequestsSongTranslationsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SongRequestsSongTranslations")
		case "denied":
			out.Values[i] = ec._SongRequestsSongTranslations_denied(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "notFound":
			out.Values[i] = ec._SongRequestsSongTranslations_notFound(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "alreadyInQueue":
			out.Values[i] = ec._SongRequestsSongTranslations_alreadyInQueue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ageRestrictions":
			out.Values[i] = ec._SongRequestsSongTranslations_ageRestrictions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cannotGetInformation":
			out.Values[i] = ec._SongRequestsSongTranslations_cannotGetInformation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "live":
			out.Values[i] = ec._SongRequestsSongTranslations_live(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxLength":
			out.Values[i] = ec._SongRequestsSongTranslations_maxLength(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minLength":
			out.Values[i] = ec._SongRequestsSongTranslations_minLength(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requestedMessage":
			out.Values[i] = ec._SongRequestsSongTranslations_requestedMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maximumOrdered":
			out.Values[i] = ec._SongRequestsSongTranslations_maximumOrdered(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minViews":
			out.Values[i] = ec._SongRequestsSongTranslations_minViews(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var songRequestsTranslationsImplementors = []string{"SongRequestsTranslations"}

func (ec *executionContext) _SongRequestsTranslations(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.SongRequestsTranslations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, songRequestsTranslationsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SongRequestsTranslations")
		case "nowPlaying":
			out.Values[i] = ec._SongRequestsTranslations_nowPlaying(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "notEnabled":
			out.Values[i] = ec._SongRequestsTranslations_notEnabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "noText":
			out.Values[i] = ec._SongRequestsTranslations_noText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "acceptOnlyWhenOnline":
			out.Values[i] = ec._SongRequestsTranslations_acceptOnlyWhenOnline(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user":
			out.Values[i] = ec._SongRequestsTranslations_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "song":
			out.Values[i] = ec._SongRequestsTranslations_song(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channel":
			out.Values[i] = ec._SongRequestsTranslations_channel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var songRequestsUserSettingsImplementors = []string{"SongRequestsUserSettings"}

func (ec *executionContext) _SongRequestsUserSettings(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.SongRequestsUserSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, songRequestsUserSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SongRequestsUserSettings")
		case "maxRequests":
			out.Values[i] = ec._SongRequestsUserSettings_maxRequests(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minWatchTime":
			out.Values[i] = ec._SongRequestsUserSettings_minWatchTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minMessages":
			out.Values[i] = ec._SongRequestsUserSettings_minMessages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minFollowTime":
			out.Values[i] = ec._SongRequestsUserSettings_minFollowTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var songRequestsUserTranslationsImplementors = []string{"SongRequestsUserTranslations"}

func (ec *executionContext) _SongRequestsUserTranslations(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.SongRequestsUserTranslations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, songRequestsUserTranslationsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SongRequestsUserTranslations")
		case "denied":
			out.Values[i] = ec._SongRequestsUserTranslations_denied(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxRequests":
			out.Values[i] = ec._SongRequestsUserTranslations_maxRequests(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minMessages":
			out.Values[i] = ec._SongRequestsUserTranslations_minMessages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minWatched":
			out.Values[i] = ec._SongRequestsUserTranslations_minWatched(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minFollow":
			out.Values[i] = ec._SongRequestsUserTranslations_minFollow(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "dashboardWidgetsEvents":
		return ec._Subscription_dashboardWidgetsEvents(ctx, fields[0])
	case "dashboardStats":
		return ec._Subscription_dashboardStats(ctx, fields[0])
	case "newNotification":
		return ec._Subscription_newNotification(ctx, fields[0])
	case "chatOverlaySettings":
		return ec._Subscription_chatOverlaySettings(ctx, fields[0])
	case "nowPlayingOverlaySettings":
		return ec._Subscription_nowPlayingOverlaySettings(ctx, fields[0])
	case "nowPlayingCurrentTrack":
		return ec._Subscription_nowPlayingCurrentTrack(ctx, fields[0])
	case "auditLog":
		return ec._Subscription_auditLog(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var timerImplementors = []string{"Timer"}

func (ec *executionContext) _Timer(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Timer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Timer")
		case "id":
			out.Values[i] = ec._Timer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Timer_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "enabled":
			out.Values[i] = ec._Timer_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timeInterval":
			out.Values[i] = ec._Timer_timeInterval(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messageInterval":
			out.Values[i] = ec._Timer_messageInterval(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "responses":
			out.Values[i] = ec._Timer_responses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var timerResponseImplementors = []string{"TimerResponse"}

func (ec *executionContext) _TimerResponse(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TimerResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timerResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimerResponse")
		case "id":
			out.Values[i] = ec._TimerResponse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "text":
			out.Values[i] = ec._TimerResponse_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isAnnounce":
			out.Values[i] = ec._TimerResponse_isAnnounce(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twirAdminUserImplementors = []string{"TwirAdminUser", "TwirUser"}

func (ec *executionContext) _TwirAdminUser(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwirAdminUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twirAdminUserImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwirAdminUser")
		case "id":
			out.Values[i] = ec._TwirAdminUser_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "twitchProfile":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TwirAdminUser_twitchProfile(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isBotAdmin":
			out.Values[i] = ec._TwirAdminUser_isBotAdmin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isBanned":
			out.Values[i] = ec._TwirAdminUser_isBanned(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isBotModerator":
			out.Values[i] = ec._TwirAdminUser_isBotModerator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isBotEnabled":
			out.Values[i] = ec._TwirAdminUser_isBotEnabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "apiKey":
			out.Values[i] = ec._TwirAdminUser_apiKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twirStatsImplementors = []string{"TwirStats"}

func (ec *executionContext) _TwirStats(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwirStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twirStatsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwirStats")
		case "channels":
			out.Values[i] = ec._TwirStats_channels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdCommands":
			out.Values[i] = ec._TwirStats_createdCommands(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "viewers":
			out.Values[i] = ec._TwirStats_viewers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messages":
			out.Values[i] = ec._TwirStats_messages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "usedEmotes":
			out.Values[i] = ec._TwirStats_usedEmotes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "usedCommands":
			out.Values[i] = ec._TwirStats_usedCommands(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "streamers":
			out.Values[i] = ec._TwirStats_streamers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twirStatsStreamerImplementors = []string{"TwirStatsStreamer"}

func (ec *executionContext) _TwirStatsStreamer(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwirStatsStreamer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twirStatsStreamerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwirStatsStreamer")
		case "id":
			out.Values[i] = ec._TwirStatsStreamer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "twitchProfile":
			out.Values[i] = ec._TwirStatsStreamer_twitchProfile(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isLive":
			out.Values[i] = ec._TwirStatsStreamer_isLive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isPartner":
			out.Values[i] = ec._TwirStatsStreamer_isPartner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "followersCount":
			out.Values[i] = ec._TwirStatsStreamer_followersCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twirTwitchChannelBadgeResponseImplementors = []string{"TwirTwitchChannelBadgeResponse"}

func (ec *executionContext) _TwirTwitchChannelBadgeResponse(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwirTwitchChannelBadgeResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twirTwitchChannelBadgeResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwirTwitchChannelBadgeResponse")
		case "badges":
			out.Values[i] = ec._TwirTwitchChannelBadgeResponse_badges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twirTwitchChannelRewardImplementors = []string{"TwirTwitchChannelReward"}

func (ec *executionContext) _TwirTwitchChannelReward(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwirTwitchChannelReward) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twirTwitchChannelRewardImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwirTwitchChannelReward")
		case "id":
			out.Values[i] = ec._TwirTwitchChannelReward_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "broadcaster_name":
			out.Values[i] = ec._TwirTwitchChannelReward_broadcaster_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "broadcaster_login":
			out.Values[i] = ec._TwirTwitchChannelReward_broadcaster_login(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "broadcaster_id":
			out.Values[i] = ec._TwirTwitchChannelReward_broadcaster_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "image":
			out.Values[i] = ec._TwirTwitchChannelReward_image(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "background_color":
			out.Values[i] = ec._TwirTwitchChannelReward_background_color(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "is_enabled":
			out.Values[i] = ec._TwirTwitchChannelReward_is_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cost":
			out.Values[i] = ec._TwirTwitchChannelReward_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._TwirTwitchChannelReward_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "prompt":
			out.Values[i] = ec._TwirTwitchChannelReward_prompt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "is_user_input_required":
			out.Values[i] = ec._TwirTwitchChannelReward_is_user_input_required(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "max_per_stream_setting":
			out.Values[i] = ec._TwirTwitchChannelReward_max_per_stream_setting(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "max_per_user_per_stream_setting":
			out.Values[i] = ec._TwirTwitchChannelReward_max_per_user_per_stream_setting(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "global_cooldown_setting":
			out.Values[i] = ec._TwirTwitchChannelReward_global_cooldown_setting(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "is_paused":
			out.Values[i] = ec._TwirTwitchChannelReward_is_paused(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "is_in_stock":
			out.Values[i] = ec._TwirTwitchChannelReward_is_in_stock(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "should_redemptions_skip_request_queue":
			out.Values[i] = ec._TwirTwitchChannelReward_should_redemptions_skip_request_queue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "redemptions_redeemed_current_stream":
			out.Values[i] = ec._TwirTwitchChannelReward_redemptions_redeemed_current_stream(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cooldown_expires_at":
			out.Values[i] = ec._TwirTwitchChannelReward_cooldown_expires_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twirTwitchChannelRewardGlobalCooldownSettingImplementors = []string{"TwirTwitchChannelRewardGlobalCooldownSetting"}

func (ec *executionContext) _TwirTwitchChannelRewardGlobalCooldownSetting(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwirTwitchChannelRewardGlobalCooldownSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twirTwitchChannelRewardGlobalCooldownSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwirTwitchChannelRewardGlobalCooldownSetting")
		case "is_enabled":
			out.Values[i] = ec._TwirTwitchChannelRewardGlobalCooldownSetting_is_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "global_cooldown_seconds":
			out.Values[i] = ec._TwirTwitchChannelRewardGlobalCooldownSetting_global_cooldown_seconds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twirTwitchChannelRewardImageImplementors = []string{"TwirTwitchChannelRewardImage"}

func (ec *executionContext) _TwirTwitchChannelRewardImage(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwirTwitchChannelRewardImage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twirTwitchChannelRewardImageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwirTwitchChannelRewardImage")
		case "url_1x":
			out.Values[i] = ec._TwirTwitchChannelRewardImage_url_1x(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url_2x":
			out.Values[i] = ec._TwirTwitchChannelRewardImage_url_2x(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url_4x":
			out.Values[i] = ec._TwirTwitchChannelRewardImage_url_4x(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twirTwitchChannelRewardMaxPerStreamSettingImplementors = []string{"TwirTwitchChannelRewardMaxPerStreamSetting"}

func (ec *executionContext) _TwirTwitchChannelRewardMaxPerStreamSetting(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwirTwitchChannelRewardMaxPerStreamSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twirTwitchChannelRewardMaxPerStreamSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwirTwitchChannelRewardMaxPerStreamSetting")
		case "is_enabled":
			out.Values[i] = ec._TwirTwitchChannelRewardMaxPerStreamSetting_is_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "max_per_stream":
			out.Values[i] = ec._TwirTwitchChannelRewardMaxPerStreamSetting_max_per_stream(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twirTwitchChannelRewardMaxPerUserPerStreamSettingImplementors = []string{"TwirTwitchChannelRewardMaxPerUserPerStreamSetting"}

func (ec *executionContext) _TwirTwitchChannelRewardMaxPerUserPerStreamSetting(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwirTwitchChannelRewardMaxPerUserPerStreamSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twirTwitchChannelRewardMaxPerUserPerStreamSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwirTwitchChannelRewardMaxPerUserPerStreamSetting")
		case "is_enabled":
			out.Values[i] = ec._TwirTwitchChannelRewardMaxPerUserPerStreamSetting_is_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "max_per_user_per_stream":
			out.Values[i] = ec._TwirTwitchChannelRewardMaxPerUserPerStreamSetting_max_per_user_per_stream(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twirTwitchChannelRewardResponseImplementors = []string{"TwirTwitchChannelRewardResponse"}

func (ec *executionContext) _TwirTwitchChannelRewardResponse(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwirTwitchChannelRewardResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twirTwitchChannelRewardResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwirTwitchChannelRewardResponse")
		case "partnerOrAffiliate":
			out.Values[i] = ec._TwirTwitchChannelRewardResponse_partnerOrAffiliate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rewards":
			out.Values[i] = ec._TwirTwitchChannelRewardResponse_rewards(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twirTwitchGlobalBadgeResponseImplementors = []string{"TwirTwitchGlobalBadgeResponse"}

func (ec *executionContext) _TwirTwitchGlobalBadgeResponse(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwirTwitchGlobalBadgeResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twirTwitchGlobalBadgeResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwirTwitchGlobalBadgeResponse")
		case "badges":
			out.Values[i] = ec._TwirTwitchGlobalBadgeResponse_badges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twirUserTwitchInfoImplementors = []string{"TwirUserTwitchInfo"}

func (ec *executionContext) _TwirUserTwitchInfo(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwirUserTwitchInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twirUserTwitchInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwirUserTwitchInfo")
		case "id":
			out.Values[i] = ec._TwirUserTwitchInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "login":
			out.Values[i] = ec._TwirUserTwitchInfo_login(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "displayName":
			out.Values[i] = ec._TwirUserTwitchInfo_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "profileImageUrl":
			out.Values[i] = ec._TwirUserTwitchInfo_profileImageUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._TwirUserTwitchInfo_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "notFound":
			out.Values[i] = ec._TwirUserTwitchInfo_notFound(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twirUsersResponseImplementors = []string{"TwirUsersResponse"}

func (ec *executionContext) _TwirUsersResponse(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwirUsersResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twirUsersResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwirUsersResponse")
		case "users":
			out.Values[i] = ec._TwirUsersResponse_users(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._TwirUsersResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twitchBadgeImplementors = []string{"TwitchBadge"}

func (ec *executionContext) _TwitchBadge(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwitchBadge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twitchBadgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwitchBadge")
		case "set_id":
			out.Values[i] = ec._TwitchBadge_set_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "versions":
			out.Values[i] = ec._TwitchBadge_versions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twitchBadgeVersionImplementors = []string{"TwitchBadgeVersion"}

func (ec *executionContext) _TwitchBadgeVersion(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwitchBadgeVersion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twitchBadgeVersionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwitchBadgeVersion")
		case "id":
			out.Values[i] = ec._TwitchBadgeVersion_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "image_url_1x":
			out.Values[i] = ec._TwitchBadgeVersion_image_url_1x(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "image_url_2x":
			out.Values[i] = ec._TwitchBadgeVersion_image_url_2x(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "image_url_4x":
			out.Values[i] = ec._TwitchBadgeVersion_image_url_4x(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twitchCategoryImplementors = []string{"TwitchCategory"}

func (ec *executionContext) _TwitchCategory(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwitchCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twitchCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwitchCategory")
		case "id":
			out.Values[i] = ec._TwitchCategory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._TwitchCategory_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "boxArtUrl":
			out.Values[i] = ec._TwitchCategory_boxArtUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twitchRedemptionImplementors = []string{"TwitchRedemption"}

func (ec *executionContext) _TwitchRedemption(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwitchRedemption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twitchRedemptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwitchRedemption")
		case "id":
			out.Values[i] = ec._TwitchRedemption_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "channelId":
			out.Values[i] = ec._TwitchRedemption_channelId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "user":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TwitchRedemption_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "reward":
			out.Values[i] = ec._TwitchRedemption_reward(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "redeemedAt":
			out.Values[i] = ec._TwitchRedemption_redeemedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "prompt":
			out.Values[i] = ec._TwitchRedemption_prompt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twitchRedemptionResponseImplementors = []string{"TwitchRedemptionResponse"}

func (ec *executionContext) _TwitchRedemptionResponse(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwitchRedemptionResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twitchRedemptionResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwitchRedemptionResponse")
		case "redemptions":
			out.Values[i] = ec._TwitchRedemptionResponse_redemptions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._TwitchRedemptionResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var twitchRewardImplementors = []string{"TwitchReward"}

func (ec *executionContext) _TwitchReward(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.TwitchReward) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, twitchRewardImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TwitchReward")
		case "id":
			out.Values[i] = ec._TwitchReward_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._TwitchReward_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cost":
			out.Values[i] = ec._TwitchReward_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "imageUrls":
			out.Values[i] = ec._TwitchReward_imageUrls(ctx, field, obj)
		case "backgroundColor":
			out.Values[i] = ec._TwitchReward_backgroundColor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "enabled":
			out.Values[i] = ec._TwitchReward_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "usedTimes":
			out.Values[i] = ec._TwitchReward_usedTimes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userNotificationImplementors = []string{"UserNotification", "Notification"}

func (ec *executionContext) _UserNotification(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UserNotification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userNotificationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserNotification")
		case "id":
			out.Values[i] = ec._UserNotification_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userId":
			out.Values[i] = ec._UserNotification_userId(ctx, field, obj)
		case "text":
			out.Values[i] = ec._UserNotification_text(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._UserNotification_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "editorJsJson":
			out.Values[i] = ec._UserNotification_editorJsJson(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var variableImplementors = []string{"Variable"}

func (ec *executionContext) _Variable(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Variable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, variableImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Variable")
		case "id":
			out.Values[i] = ec._Variable_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Variable_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Variable_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Variable_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "evalValue":
			out.Values[i] = ec._Variable_evalValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "response":
			out.Values[i] = ec._Variable_response(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var votebanGameImplementors = []string{"VotebanGame"}

func (ec *executionContext) _VotebanGame(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.VotebanGame) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, votebanGameImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VotebanGame")
		case "enabled":
			out.Values[i] = ec._VotebanGame_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timeoutSeconds":
			out.Values[i] = ec._VotebanGame_timeoutSeconds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timeoutModerators":
			out.Values[i] = ec._VotebanGame_timeoutModerators(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "initMessage":
			out.Values[i] = ec._VotebanGame_initMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "banMessage":
			out.Values[i] = ec._VotebanGame_banMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "banMessageModerators":
			out.Values[i] = ec._VotebanGame_banMessageModerators(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "surviveMessage":
			out.Values[i] = ec._VotebanGame_surviveMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "surviveMessageModerators":
			out.Values[i] = ec._VotebanGame_surviveMessageModerators(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "neededVotes":
			out.Values[i] = ec._VotebanGame_neededVotes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "voteDuration":
			out.Values[i] = ec._VotebanGame_voteDuration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "votingMode":
			out.Values[i] = ec._VotebanGame_votingMode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "chatVotesWordsPositive":
			out.Values[i] = ec._VotebanGame_chatVotesWordsPositive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "chatVotesWordsNegative":
			out.Values[i] = ec._VotebanGame_chatVotesWordsNegative(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAdminAuditLog2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminAuditLog(ctx context.Context, sel ast.SelectionSet, v gqlmodel.AdminAuditLog) graphql.Marshaler {
	return ec._AdminAuditLog(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdminAuditLog2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminAuditLogᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.AdminAuditLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdminAuditLog2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminAuditLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdminAuditLogResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminAuditLogResponse(ctx context.Context, sel ast.SelectionSet, v gqlmodel.AdminAuditLogResponse) graphql.Marshaler {
	return ec._AdminAuditLogResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdminAuditLogResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminAuditLogResponse(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.AdminAuditLogResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AdminAuditLogResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAdminAuditLogsInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminAuditLogsInput(ctx context.Context, v interface{}) (gqlmodel.AdminAuditLogsInput, error) {
	res, err := ec.unmarshalInputAdminAuditLogsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAdminNotification2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminNotification(ctx context.Context, sel ast.SelectionSet, v gqlmodel.AdminNotification) graphql.Marshaler {
	return ec._AdminNotification(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdminNotification2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminNotificationᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.AdminNotification) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdminNotification2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminNotification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdminNotification2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminNotification(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.AdminNotification) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AdminNotification(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAdminNotificationsParams2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminNotificationsParams(ctx context.Context, v interface{}) (gqlmodel.AdminNotificationsParams, error) {
	res, err := ec.unmarshalInputAdminNotificationsParams(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAdminNotificationsResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminNotificationsResponse(ctx context.Context, sel ast.SelectionSet, v gqlmodel.AdminNotificationsResponse) graphql.Marshaler {
	return ec._AdminNotificationsResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdminNotificationsResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAdminNotificationsResponse(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.AdminNotificationsResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AdminNotificationsResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNAuditLog2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLog(ctx context.Context, sel ast.SelectionSet, v gqlmodel.AuditLog) graphql.Marshaler {
	return ec._AuditLog(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuditLog2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLogᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.AuditLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuditLog2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAuditLog2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLog(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.AuditLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuditLog(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuditLogSystem2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLogSystem(ctx context.Context, v interface{}) (gqlmodel.AuditLogSystem, error) {
	var res gqlmodel.AuditLogSystem
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuditLogSystem2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLogSystem(ctx context.Context, sel ast.SelectionSet, v gqlmodel.AuditLogSystem) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAuditOperationType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditOperationType(ctx context.Context, v interface{}) (gqlmodel.AuditOperationType, error) {
	var res gqlmodel.AuditOperationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuditOperationType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditOperationType(ctx context.Context, sel ast.SelectionSet, v gqlmodel.AuditOperationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAuthenticatedUser2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuthenticatedUser(ctx context.Context, sel ast.SelectionSet, v gqlmodel.AuthenticatedUser) graphql.Marshaler {
	return ec._AuthenticatedUser(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthenticatedUser2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuthenticatedUser(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.AuthenticatedUser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuthenticatedUser(ctx, sel, v)
}

func (ec *executionContext) marshalNBadge2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐBadge(ctx context.Context, sel ast.SelectionSet, v gqlmodel.Badge) graphql.Marshaler {
	return ec._Badge(ctx, sel, &v)
}

func (ec *executionContext) marshalNBadge2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐBadgeᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.Badge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBadge2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐBadge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBadge2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐBadge(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Badge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Badge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNBuiltInVariable2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐBuiltInVariable(ctx context.Context, sel ast.SelectionSet, v gqlmodel.BuiltInVariable) graphql.Marshaler {
	return ec._BuiltInVariable(ctx, sel, &v)
}

func (ec *executionContext) marshalNBuiltInVariable2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐBuiltInVariableᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.BuiltInVariable) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBuiltInVariable2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐBuiltInVariable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChannelAlert2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelAlert(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChannelAlert) graphql.Marshaler {
	return ec._ChannelAlert(ctx, sel, &v)
}

func (ec *executionContext) marshalNChannelAlert2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelAlertᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.ChannelAlert) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChannelAlert2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelAlert(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChannelAlert2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelAlert(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChannelAlert) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChannelAlert(ctx, sel, v)
}

func (ec *executionContext) unmarshalNChannelAlertCreateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelAlertCreateInput(ctx context.Context, v interface{}) (gqlmodel.ChannelAlertCreateInput, error) {
	res, err := ec.unmarshalInputChannelAlertCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNChannelAlertUpdateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelAlertUpdateInput(ctx context.Context, v interface{}) (gqlmodel.ChannelAlertUpdateInput, error) {
	res, err := ec.unmarshalInputChannelAlertUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNChannelRolePermissionEnum2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx context.Context, v interface{}) (gqlmodel.ChannelRolePermissionEnum, error) {
	var res gqlmodel.ChannelRolePermissionEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNChannelRolePermissionEnum2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChannelRolePermissionEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNChannelRolePermissionEnum2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnumᚄ(ctx context.Context, v interface{}) ([]gqlmodel.ChannelRolePermissionEnum, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]gqlmodel.ChannelRolePermissionEnum, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNChannelRolePermissionEnum2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNChannelRolePermissionEnum2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnumᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.ChannelRolePermissionEnum) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChannelRolePermissionEnum2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChatAlerts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlerts(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChatAlerts) graphql.Marshaler {
	return ec._ChatAlerts(ctx, sel, &v)
}

func (ec *executionContext) marshalNChatAlerts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlerts(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlerts) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChatAlerts(ctx, sel, v)
}

func (ec *executionContext) marshalNChatAlertsCountedMessage2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessage(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChatAlertsCountedMessage) graphql.Marshaler {
	return ec._ChatAlertsCountedMessage(ctx, sel, &v)
}

func (ec *executionContext) marshalNChatAlertsCountedMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessageᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.ChatAlertsCountedMessage) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChatAlertsCountedMessage2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNChatAlertsInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsInput(ctx context.Context, v interface{}) (gqlmodel.ChatAlertsInput, error) {
	res, err := ec.unmarshalInputChatAlertsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNChatAlertsMessage2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessage(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChatAlertsMessage) graphql.Marshaler {
	return ec._ChatAlertsMessage(ctx, sel, &v)
}

func (ec *executionContext) marshalNChatAlertsMessage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.ChatAlertsMessage) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChatAlertsMessage2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChatOverlay2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlay(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChatOverlay) graphql.Marshaler {
	return ec._ChatOverlay(ctx, sel, &v)
}

func (ec *executionContext) marshalNChatOverlay2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlayᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.ChatOverlay) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChatOverlay2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlay(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNChatOverlayAnimation2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlayAnimation(ctx context.Context, v interface{}) (gqlmodel.ChatOverlayAnimation, error) {
	var res gqlmodel.ChatOverlayAnimation
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNChatOverlayAnimation2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlayAnimation(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChatOverlayAnimation) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNChatOverlayMutateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlayMutateOpts(ctx context.Context, v interface{}) (gqlmodel.ChatOverlayMutateOpts, error) {
	res, err := ec.unmarshalInputChatOverlayMutateOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommand2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommand(ctx context.Context, sel ast.SelectionSet, v gqlmodel.Command) graphql.Marshaler {
	return ec._Command(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommand2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.Command) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommand2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommand(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCommandCreatePayload2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandCreatePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.CommandCreatePayload) graphql.Marshaler {
	return ec._CommandCreatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommandCreatePayload2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandCreatePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.CommandCreatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CommandCreatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCommandGroup2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandGroup(ctx context.Context, sel ast.SelectionSet, v gqlmodel.CommandGroup) graphql.Marshaler {
	return ec._CommandGroup(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommandGroup2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandGroupᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.CommandGroup) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommandGroup2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCommandResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandResponse(ctx context.Context, sel ast.SelectionSet, v gqlmodel.CommandResponse) graphql.Marshaler {
	return ec._CommandResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommandResponse2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.CommandResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommandResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNCommandsCreateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandsCreateOpts(ctx context.Context, v interface{}) (gqlmodel.CommandsCreateOpts, error) {
	res, err := ec.unmarshalInputCommandsCreateOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCommandsGroupsCreateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandsGroupsCreateOpts(ctx context.Context, v interface{}) (gqlmodel.CommandsGroupsCreateOpts, error) {
	res, err := ec.unmarshalInputCommandsGroupsCreateOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCommandsGroupsUpdateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandsGroupsUpdateOpts(ctx context.Context, v interface{}) (gqlmodel.CommandsGroupsUpdateOpts, error) {
	res, err := ec.unmarshalInputCommandsGroupsUpdateOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCommandsUpdateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandsUpdateOpts(ctx context.Context, v interface{}) (gqlmodel.CommandsUpdateOpts, error) {
	res, err := ec.unmarshalInputCommandsUpdateOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommunityUser2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUser(ctx context.Context, sel ast.SelectionSet, v gqlmodel.CommunityUser) graphql.Marshaler {
	return ec._CommunityUser(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommunityUser2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUserᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.CommunityUser) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommunityUser2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNCommunityUsersOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUsersOpts(ctx context.Context, v interface{}) (gqlmodel.CommunityUsersOpts, error) {
	res, err := ec.unmarshalInputCommunityUsersOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCommunityUsersResetType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUsersResetType(ctx context.Context, v interface{}) (gqlmodel.CommunityUsersResetType, error) {
	var res gqlmodel.CommunityUsersResetType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommunityUsersResetType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUsersResetType(ctx context.Context, sel ast.SelectionSet, v gqlmodel.CommunityUsersResetType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNCommunityUsersResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUsersResponse(ctx context.Context, sel ast.SelectionSet, v gqlmodel.CommunityUsersResponse) graphql.Marshaler {
	return ec._CommunityUsersResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommunityUsersResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUsersResponse(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.CommunityUsersResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CommunityUsersResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateOrUpdateCommandResponseInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCreateOrUpdateCommandResponseInput(ctx context.Context, v interface{}) (gqlmodel.CreateOrUpdateCommandResponseInput, error) {
	res, err := ec.unmarshalInputCreateOrUpdateCommandResponseInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateOrUpdateCommandResponseInput2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCreateOrUpdateCommandResponseInputᚄ(ctx context.Context, v interface{}) ([]gqlmodel.CreateOrUpdateCommandResponseInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]gqlmodel.CreateOrUpdateCommandResponseInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCreateOrUpdateCommandResponseInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCreateOrUpdateCommandResponseInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCreateOrUpdateRoleSettingsInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCreateOrUpdateRoleSettingsInput(ctx context.Context, v interface{}) (*gqlmodel.CreateOrUpdateRoleSettingsInput, error) {
	res, err := ec.unmarshalInputCreateOrUpdateRoleSettingsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDashboard2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboard(ctx context.Context, sel ast.SelectionSet, v gqlmodel.Dashboard) graphql.Marshaler {
	return ec._Dashboard(ctx, sel, &v)
}

func (ec *executionContext) marshalNDashboard2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.Dashboard) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDashboard2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboard(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDashboardEventData2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardEventData(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DashboardEventData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DashboardEventData(ctx, sel, v)
}

func (ec *executionContext) marshalNDashboardEventListPayload2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardEventListPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DashboardEventListPayload) graphql.Marshaler {
	return ec._DashboardEventListPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDashboardEventListPayload2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardEventListPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DashboardEventListPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DashboardEventListPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNDashboardEventPayload2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardEventPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DashboardEventPayload) graphql.Marshaler {
	return ec._DashboardEventPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDashboardEventPayload2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardEventPayloadᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.DashboardEventPayload) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDashboardEventPayload2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardEventPayload(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNDashboardEventType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardEventType(ctx context.Context, v interface{}) (gqlmodel.DashboardEventType, error) {
	var res gqlmodel.DashboardEventType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDashboardEventType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardEventType(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DashboardEventType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDashboardStats2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardStats(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DashboardStats) graphql.Marshaler {
	return ec._DashboardStats(ctx, sel, &v)
}

func (ec *executionContext) marshalNDashboardStats2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDashboardStats(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DashboardStats) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DashboardStats(ctx, sel, v)
}

func (ec *executionContext) marshalNDuelGame2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDuelGame(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DuelGame) graphql.Marshaler {
	return ec._DuelGame(ctx, sel, &v)
}

func (ec *executionContext) marshalNDuelGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDuelGame(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DuelGame) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DuelGame(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDuelGameOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐDuelGameOpts(ctx context.Context, v interface{}) (gqlmodel.DuelGameOpts, error) {
	res, err := ec.unmarshalInputDuelGameOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEightBallGame2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEightBallGame(ctx context.Context, sel ast.SelectionSet, v gqlmodel.EightBallGame) graphql.Marshaler {
	return ec._EightBallGame(ctx, sel, &v)
}

func (ec *executionContext) marshalNEightBallGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEightBallGame(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.EightBallGame) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EightBallGame(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEightBallGameOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEightBallGameOpts(ctx context.Context, v interface{}) (gqlmodel.EightBallGameOpts, error) {
	res, err := ec.unmarshalInputEightBallGameOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEmoteStatisticRange2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticRange(ctx context.Context, v interface{}) (gqlmodel.EmoteStatisticRange, error) {
	var res gqlmodel.EmoteStatisticRange
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmoteStatisticRange2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticRange(ctx context.Context, sel ast.SelectionSet, v gqlmodel.EmoteStatisticRange) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEmoteStatisticTopUser2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticTopUser(ctx context.Context, sel ast.SelectionSet, v gqlmodel.EmoteStatisticTopUser) graphql.Marshaler {
	return ec._EmoteStatisticTopUser(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmoteStatisticTopUser2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticTopUserᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.EmoteStatisticTopUser) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmoteStatisticTopUser2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticTopUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEmoteStatisticUsage2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticUsage(ctx context.Context, sel ast.SelectionSet, v gqlmodel.EmoteStatisticUsage) graphql.Marshaler {
	return ec._EmoteStatisticUsage(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmoteStatisticUsage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticUsageᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.EmoteStatisticUsage) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmoteStatisticUsage2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticUsage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEmoteStatisticUserUsage2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticUserUsage(ctx context.Context, sel ast.SelectionSet, v gqlmodel.EmoteStatisticUserUsage) graphql.Marshaler {
	return ec._EmoteStatisticUserUsage(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmoteStatisticUserUsage2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticUserUsageᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.EmoteStatisticUserUsage) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmoteStatisticUserUsage2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticUserUsage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEmotesStatistic2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatistic(ctx context.Context, sel ast.SelectionSet, v gqlmodel.EmotesStatistic) graphql.Marshaler {
	return ec._EmotesStatistic(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmotesStatistic2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.EmotesStatistic) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmotesStatistic2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatistic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNEmotesStatisticEmoteDetailedOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticEmoteDetailedOpts(ctx context.Context, v interface{}) (gqlmodel.EmotesStatisticEmoteDetailedOpts, error) {
	res, err := ec.unmarshalInputEmotesStatisticEmoteDetailedOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmotesStatisticEmoteDetailedResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticEmoteDetailedResponse(ctx context.Context, sel ast.SelectionSet, v gqlmodel.EmotesStatisticEmoteDetailedResponse) graphql.Marshaler {
	return ec._EmotesStatisticEmoteDetailedResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmotesStatisticEmoteDetailedResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticEmoteDetailedResponse(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.EmotesStatisticEmoteDetailedResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EmotesStatisticEmoteDetailedResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNEmotesStatisticResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticResponse(ctx context.Context, sel ast.SelectionSet, v gqlmodel.EmotesStatisticResponse) graphql.Marshaler {
	return ec._EmotesStatisticResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmotesStatisticResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticResponse(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.EmotesStatisticResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EmotesStatisticResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEmotesStatisticsOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticsOpts(ctx context.Context, v interface{}) (gqlmodel.EmotesStatisticsOpts, error) {
	res, err := ec.unmarshalInputEmotesStatisticsOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEventsubSubscribeConditionInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEventsubSubscribeConditionInput(ctx context.Context, v interface{}) (gqlmodel.EventsubSubscribeConditionInput, error) {
	var res gqlmodel.EventsubSubscribeConditionInput
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEventsubSubscribeConditionInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEventsubSubscribeConditionInput(ctx context.Context, sel ast.SelectionSet, v gqlmodel.EventsubSubscribeConditionInput) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEventsubSubscribeInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEventsubSubscribeInput(ctx context.Context, v interface{}) (gqlmodel.EventsubSubscribeInput, error) {
	res, err := ec.unmarshalInputEventsubSubscribeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGreeting2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐGreeting(ctx context.Context, sel ast.SelectionSet, v gqlmodel.Greeting) graphql.Marshaler {
	return ec._Greeting(ctx, sel, &v)
}

func (ec *executionContext) marshalNGreeting2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐGreetingᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.Greeting) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGreeting2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐGreeting(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGreeting2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐGreeting(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Greeting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Greeting(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGreetingsCreateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐGreetingsCreateInput(ctx context.Context, v interface{}) (gqlmodel.GreetingsCreateInput, error) {
	res, err := ec.unmarshalInputGreetingsCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGreetingsUpdateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐGreetingsUpdateInput(ctx context.Context, v interface{}) (gqlmodel.GreetingsUpdateInput, error) {
	res, err := ec.unmarshalInputGreetingsUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNKeyword2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐKeyword(ctx context.Context, sel ast.SelectionSet, v gqlmodel.Keyword) graphql.Marshaler {
	return ec._Keyword(ctx, sel, &v)
}

func (ec *executionContext) marshalNKeyword2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐKeywordᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.Keyword) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKeyword2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐKeyword(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNKeyword2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐKeyword(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Keyword) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Keyword(ctx, sel, v)
}

func (ec *executionContext) unmarshalNKeywordCreateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐKeywordCreateInput(ctx context.Context, v interface{}) (gqlmodel.KeywordCreateInput, error) {
	res, err := ec.unmarshalInputKeywordCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNKeywordUpdateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐKeywordUpdateInput(ctx context.Context, v interface{}) (gqlmodel.KeywordUpdateInput, error) {
	res, err := ec.unmarshalInputKeywordUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNotificationUpdateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNotificationUpdateOpts(ctx context.Context, v interface{}) (gqlmodel.NotificationUpdateOpts, error) {
	res, err := ec.unmarshalInputNotificationUpdateOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNowPlayingOverlay2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlay(ctx context.Context, sel ast.SelectionSet, v gqlmodel.NowPlayingOverlay) graphql.Marshaler {
	return ec._NowPlayingOverlay(ctx, sel, &v)
}

func (ec *executionContext) marshalNNowPlayingOverlay2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlayᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.NowPlayingOverlay) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNowPlayingOverlay2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlay(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNNowPlayingOverlayMutateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlayMutateOpts(ctx context.Context, v interface{}) (gqlmodel.NowPlayingOverlayMutateOpts, error) {
	res, err := ec.unmarshalInputNowPlayingOverlayMutateOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNowPlayingOverlayPreset2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlayPreset(ctx context.Context, v interface{}) (gqlmodel.NowPlayingOverlayPreset, error) {
	var res gqlmodel.NowPlayingOverlayPreset
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNowPlayingOverlayPreset2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlayPreset(ctx context.Context, sel ast.SelectionSet, v gqlmodel.NowPlayingOverlayPreset) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPublicCommand2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐPublicCommand(ctx context.Context, sel ast.SelectionSet, v gqlmodel.PublicCommand) graphql.Marshaler {
	return ec._PublicCommand(ctx, sel, &v)
}

func (ec *executionContext) marshalNPublicCommand2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐPublicCommandᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.PublicCommand) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPublicCommand2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐPublicCommand(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPublicCommandPermission2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐPublicCommandPermission(ctx context.Context, sel ast.SelectionSet, v gqlmodel.PublicCommandPermission) graphql.Marshaler {
	return ec._PublicCommandPermission(ctx, sel, &v)
}

func (ec *executionContext) marshalNPublicCommandPermission2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐPublicCommandPermissionᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.PublicCommandPermission) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPublicCommandPermission2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐPublicCommandPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPublicSettings2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐPublicSettings(ctx context.Context, sel ast.SelectionSet, v gqlmodel.PublicSettings) graphql.Marshaler {
	return ec._PublicSettings(ctx, sel, &v)
}

func (ec *executionContext) marshalNPublicSettings2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐPublicSettings(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.PublicSettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PublicSettings(ctx, sel, v)
}

func (ec *executionContext) marshalNRole2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRole(ctx context.Context, sel ast.SelectionSet, v gqlmodel.Role) graphql.Marshaler {
	return ec._Role(ctx, sel, &v)
}

func (ec *executionContext) marshalNRole2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.Role) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRole2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRoleSettings2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRoleSettings(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RoleSettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RoleSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRoleTypeEnum2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRoleTypeEnum(ctx context.Context, v interface{}) (gqlmodel.RoleTypeEnum, error) {
	var res gqlmodel.RoleTypeEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRoleTypeEnum2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRoleTypeEnum(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RoleTypeEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRolesCreateOrUpdateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRolesCreateOrUpdateOpts(ctx context.Context, v interface{}) (gqlmodel.RolesCreateOrUpdateOpts, error) {
	res, err := ec.unmarshalInputRolesCreateOrUpdateOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRussianRouletteGame2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRussianRouletteGame(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RussianRouletteGame) graphql.Marshaler {
	return ec._RussianRouletteGame(ctx, sel, &v)
}

func (ec *executionContext) marshalNRussianRouletteGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRussianRouletteGame(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RussianRouletteGame) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RussianRouletteGame(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRussianRouletteGameOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐRussianRouletteGameOpts(ctx context.Context, v interface{}) (gqlmodel.RussianRouletteGameOpts, error) {
	res, err := ec.unmarshalInputRussianRouletteGameOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSeppukuGame2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSeppukuGame(ctx context.Context, sel ast.SelectionSet, v gqlmodel.SeppukuGame) graphql.Marshaler {
	return ec._SeppukuGame(ctx, sel, &v)
}

func (ec *executionContext) marshalNSeppukuGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSeppukuGame(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.SeppukuGame) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SeppukuGame(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSeppukuGameOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSeppukuGameOpts(ctx context.Context, v interface{}) (gqlmodel.SeppukuGameOpts, error) {
	res, err := ec.unmarshalInputSeppukuGameOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSocialLink2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSocialLink(ctx context.Context, sel ast.SelectionSet, v gqlmodel.SocialLink) graphql.Marshaler {
	return ec._SocialLink(ctx, sel, &v)
}

func (ec *executionContext) marshalNSocialLink2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSocialLinkᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.SocialLink) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSocialLink2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSocialLink(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNSocialLinkInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSocialLinkInput(ctx context.Context, v interface{}) (gqlmodel.SocialLinkInput, error) {
	res, err := ec.unmarshalInputSocialLinkInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSongRequestsChannelTranslations2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsChannelTranslations(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.SongRequestsChannelTranslations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SongRequestsChannelTranslations(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSongRequestsChannelTranslationsOpts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsChannelTranslationsOpts(ctx context.Context, v interface{}) (*gqlmodel.SongRequestsChannelTranslationsOpts, error) {
	res, err := ec.unmarshalInputSongRequestsChannelTranslationsOpts(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSongRequestsDenyList2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsDenyList(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.SongRequestsDenyList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SongRequestsDenyList(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSongRequestsDenyListOpts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsDenyListOpts(ctx context.Context, v interface{}) (*gqlmodel.SongRequestsDenyListOpts, error) {
	res, err := ec.unmarshalInputSongRequestsDenyListOpts(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSongRequestsSearchChannelOrVideoItem2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSearchChannelOrVideoItem(ctx context.Context, sel ast.SelectionSet, v gqlmodel.SongRequestsSearchChannelOrVideoItem) graphql.Marshaler {
	return ec._SongRequestsSearchChannelOrVideoItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNSongRequestsSearchChannelOrVideoItem2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSearchChannelOrVideoItemᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.SongRequestsSearchChannelOrVideoItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSongRequestsSearchChannelOrVideoItem2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSearchChannelOrVideoItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNSongRequestsSearchChannelOrVideoOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSearchChannelOrVideoOpts(ctx context.Context, v interface{}) (gqlmodel.SongRequestsSearchChannelOrVideoOpts, error) {
	res, err := ec.unmarshalInputSongRequestsSearchChannelOrVideoOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSongRequestsSearchChannelOrVideoOptsType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSearchChannelOrVideoOptsType(ctx context.Context, v interface{}) (gqlmodel.SongRequestsSearchChannelOrVideoOptsType, error) {
	var res gqlmodel.SongRequestsSearchChannelOrVideoOptsType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSongRequestsSearchChannelOrVideoOptsType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSearchChannelOrVideoOptsType(ctx context.Context, sel ast.SelectionSet, v gqlmodel.SongRequestsSearchChannelOrVideoOptsType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSongRequestsSearchChannelOrVideoResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSearchChannelOrVideoResponse(ctx context.Context, sel ast.SelectionSet, v gqlmodel.SongRequestsSearchChannelOrVideoResponse) graphql.Marshaler {
	return ec._SongRequestsSearchChannelOrVideoResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNSongRequestsSearchChannelOrVideoResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSearchChannelOrVideoResponse(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.SongRequestsSearchChannelOrVideoResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SongRequestsSearchChannelOrVideoResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSongRequestsSettingsOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSettingsOpts(ctx context.Context, v interface{}) (gqlmodel.SongRequestsSettingsOpts, error) {
	res, err := ec.unmarshalInputSongRequestsSettingsOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSongRequestsSongSettings2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSongSettings(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.SongRequestsSongSettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SongRequestsSongSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSongRequestsSongSettingsOpts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSongSettingsOpts(ctx context.Context, v interface{}) (*gqlmodel.SongRequestsSongSettingsOpts, error) {
	res, err := ec.unmarshalInputSongRequestsSongSettingsOpts(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSongRequestsSongTranslations2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSongTranslations(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.SongRequestsSongTranslations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SongRequestsSongTranslations(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSongRequestsSongTranslationsOpts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSongTranslationsOpts(ctx context.Context, v interface{}) (*gqlmodel.SongRequestsSongTranslationsOpts, error) {
	res, err := ec.unmarshalInputSongRequestsSongTranslationsOpts(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSongRequestsTranslations2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsTranslations(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.SongRequestsTranslations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SongRequestsTranslations(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSongRequestsTranslationsOpts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsTranslationsOpts(ctx context.Context, v interface{}) (*gqlmodel.SongRequestsTranslationsOpts, error) {
	res, err := ec.unmarshalInputSongRequestsTranslationsOpts(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSongRequestsUserSettings2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsUserSettings(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.SongRequestsUserSettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SongRequestsUserSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSongRequestsUserSettingsOpts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsUserSettingsOpts(ctx context.Context, v interface{}) (*gqlmodel.SongRequestsUserSettingsOpts, error) {
	res, err := ec.unmarshalInputSongRequestsUserSettingsOpts(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSongRequestsUserTranslations2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsUserTranslations(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.SongRequestsUserTranslations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SongRequestsUserTranslations(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSongRequestsUserTranslationsOpts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsUserTranslationsOpts(ctx context.Context, v interface{}) (*gqlmodel.SongRequestsUserTranslationsOpts, error) {
	res, err := ec.unmarshalInputSongRequestsUserTranslationsOpts(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTimer2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimer(ctx context.Context, sel ast.SelectionSet, v gqlmodel.Timer) graphql.Marshaler {
	return ec._Timer(ctx, sel, &v)
}

func (ec *executionContext) marshalNTimer2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.Timer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTimer2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTimer2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimer(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Timer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Timer(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTimerCreateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerCreateInput(ctx context.Context, v interface{}) (gqlmodel.TimerCreateInput, error) {
	res, err := ec.unmarshalInputTimerCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimerResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerResponse(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TimerResponse) graphql.Marshaler {
	return ec._TimerResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNTimerResponse2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.TimerResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTimerResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNTimerResponseCreateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerResponseCreateInput(ctx context.Context, v interface{}) (gqlmodel.TimerResponseCreateInput, error) {
	res, err := ec.unmarshalInputTimerResponseCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTimerResponseCreateInput2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerResponseCreateInputᚄ(ctx context.Context, v interface{}) ([]gqlmodel.TimerResponseCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]gqlmodel.TimerResponseCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimerResponseCreateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerResponseCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNTimerResponseUpdateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerResponseUpdateInput(ctx context.Context, v interface{}) (gqlmodel.TimerResponseUpdateInput, error) {
	res, err := ec.unmarshalInputTimerResponseUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTimerUpdateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerUpdateInput(ctx context.Context, v interface{}) (gqlmodel.TimerUpdateInput, error) {
	res, err := ec.unmarshalInputTimerUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTwirAdminUser2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirAdminUser(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwirAdminUser) graphql.Marshaler {
	return ec._TwirAdminUser(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwirAdminUser2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirAdminUserᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.TwirAdminUser) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTwirAdminUser2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirAdminUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNTwirBadgeCreateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirBadgeCreateOpts(ctx context.Context, v interface{}) (gqlmodel.TwirBadgeCreateOpts, error) {
	res, err := ec.unmarshalInputTwirBadgeCreateOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTwirBadgeUpdateOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirBadgeUpdateOpts(ctx context.Context, v interface{}) (gqlmodel.TwirBadgeUpdateOpts, error) {
	res, err := ec.unmarshalInputTwirBadgeUpdateOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTwirStats2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirStats(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwirStats) graphql.Marshaler {
	return ec._TwirStats(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwirStats2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirStats(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.TwirStats) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TwirStats(ctx, sel, v)
}

func (ec *executionContext) marshalNTwirStatsStreamer2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirStatsStreamer(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwirStatsStreamer) graphql.Marshaler {
	return ec._TwirStatsStreamer(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwirStatsStreamer2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirStatsStreamerᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.TwirStatsStreamer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTwirStatsStreamer2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirStatsStreamer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTwirTwitchChannelBadgeResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelBadgeResponse(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwirTwitchChannelBadgeResponse) graphql.Marshaler {
	return ec._TwirTwitchChannelBadgeResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwirTwitchChannelBadgeResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelBadgeResponse(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.TwirTwitchChannelBadgeResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TwirTwitchChannelBadgeResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTwirTwitchChannelReward2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelReward(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwirTwitchChannelReward) graphql.Marshaler {
	return ec._TwirTwitchChannelReward(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwirTwitchChannelReward2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelRewardᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.TwirTwitchChannelReward) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTwirTwitchChannelReward2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelReward(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTwirTwitchChannelRewardGlobalCooldownSetting2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelRewardGlobalCooldownSetting(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.TwirTwitchChannelRewardGlobalCooldownSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TwirTwitchChannelRewardGlobalCooldownSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNTwirTwitchChannelRewardImage2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelRewardImage(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.TwirTwitchChannelRewardImage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TwirTwitchChannelRewardImage(ctx, sel, v)
}

func (ec *executionContext) marshalNTwirTwitchChannelRewardMaxPerStreamSetting2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelRewardMaxPerStreamSetting(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.TwirTwitchChannelRewardMaxPerStreamSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TwirTwitchChannelRewardMaxPerStreamSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNTwirTwitchChannelRewardMaxPerUserPerStreamSetting2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelRewardMaxPerUserPerStreamSetting(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.TwirTwitchChannelRewardMaxPerUserPerStreamSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TwirTwitchChannelRewardMaxPerUserPerStreamSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNTwirTwitchChannelRewardResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelRewardResponse(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwirTwitchChannelRewardResponse) graphql.Marshaler {
	return ec._TwirTwitchChannelRewardResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwirTwitchChannelRewardResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchChannelRewardResponse(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.TwirTwitchChannelRewardResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TwirTwitchChannelRewardResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTwirTwitchGlobalBadgeResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchGlobalBadgeResponse(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwirTwitchGlobalBadgeResponse) graphql.Marshaler {
	return ec._TwirTwitchGlobalBadgeResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwirTwitchGlobalBadgeResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirTwitchGlobalBadgeResponse(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.TwirTwitchGlobalBadgeResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TwirTwitchGlobalBadgeResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTwirUserTwitchInfo2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwirUserTwitchInfo) graphql.Marshaler {
	return ec._TwirUserTwitchInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwirUserTwitchInfo2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.TwirUserTwitchInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTwirUserTwitchInfo2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.TwirUserTwitchInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TwirUserTwitchInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNTwirUsersResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUsersResponse(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwirUsersResponse) graphql.Marshaler {
	return ec._TwirUsersResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwirUsersResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUsersResponse(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.TwirUsersResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TwirUsersResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTwirUsersSearchParams2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUsersSearchParams(ctx context.Context, v interface{}) (gqlmodel.TwirUsersSearchParams, error) {
	res, err := ec.unmarshalInputTwirUsersSearchParams(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTwitchBadge2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchBadge(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwitchBadge) graphql.Marshaler {
	return ec._TwitchBadge(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwitchBadge2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchBadgeᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.TwitchBadge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTwitchBadge2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchBadge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTwitchBadgeVersion2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchBadgeVersion(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwitchBadgeVersion) graphql.Marshaler {
	return ec._TwitchBadgeVersion(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwitchBadgeVersion2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchBadgeVersionᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.TwitchBadgeVersion) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTwitchBadgeVersion2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchBadgeVersion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTwitchCategory2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchCategory(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwitchCategory) graphql.Marshaler {
	return ec._TwitchCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwitchCategory2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.TwitchCategory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTwitchCategory2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTwitchRedemption2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchRedemption(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwitchRedemption) graphql.Marshaler {
	return ec._TwitchRedemption(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwitchRedemption2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchRedemptionᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.TwitchRedemption) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTwitchRedemption2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchRedemption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTwitchRedemptionResponse2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchRedemptionResponse(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwitchRedemptionResponse) graphql.Marshaler {
	return ec._TwitchRedemptionResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwitchRedemptionResponse2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchRedemptionResponse(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.TwitchRedemptionResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TwitchRedemptionResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTwitchRedemptionsOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchRedemptionsOpts(ctx context.Context, v interface{}) (gqlmodel.TwitchRedemptionsOpts, error) {
	res, err := ec.unmarshalInputTwitchRedemptionsOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTwitchReward2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchReward(ctx context.Context, sel ast.SelectionSet, v gqlmodel.TwitchReward) graphql.Marshaler {
	return ec._TwitchReward(ctx, sel, &v)
}

func (ec *executionContext) marshalNTwitchReward2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchRewardᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.TwitchReward) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTwitchReward2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchReward(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTwitchReward2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwitchReward(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.TwitchReward) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TwitchReward(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v interface{}) (uuid.UUID, error) {
	res, err := graphql.UnmarshalUUID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v uuid.UUID) graphql.Marshaler {
	res := graphql.MarshalUUID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNUserNotification2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐUserNotification(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UserNotification) graphql.Marshaler {
	return ec._UserNotification(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserNotification2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐUserNotificationᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.UserNotification) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserNotification2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐUserNotification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserNotification2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐUserNotification(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UserNotification) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserNotification(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserUpdatePublicSettingsInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐUserUpdatePublicSettingsInput(ctx context.Context, v interface{}) (gqlmodel.UserUpdatePublicSettingsInput, error) {
	res, err := ec.unmarshalInputUserUpdatePublicSettingsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUserUpdateSettingsInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐUserUpdateSettingsInput(ctx context.Context, v interface{}) (gqlmodel.UserUpdateSettingsInput, error) {
	res, err := ec.unmarshalInputUserUpdateSettingsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVariable2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariable(ctx context.Context, sel ast.SelectionSet, v gqlmodel.Variable) graphql.Marshaler {
	return ec._Variable(ctx, sel, &v)
}

func (ec *executionContext) marshalNVariable2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariableᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.Variable) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVariable2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVariable2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariable(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Variable) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Variable(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVariableCreateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariableCreateInput(ctx context.Context, v interface{}) (gqlmodel.VariableCreateInput, error) {
	res, err := ec.unmarshalInputVariableCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVariableType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariableType(ctx context.Context, v interface{}) (gqlmodel.VariableType, error) {
	var res gqlmodel.VariableType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVariableType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariableType(ctx context.Context, sel ast.SelectionSet, v gqlmodel.VariableType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNVariableUpdateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariableUpdateInput(ctx context.Context, v interface{}) (gqlmodel.VariableUpdateInput, error) {
	res, err := ec.unmarshalInputVariableUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVoteBanGameVotingMode2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVoteBanGameVotingMode(ctx context.Context, v interface{}) (gqlmodel.VoteBanGameVotingMode, error) {
	var res gqlmodel.VoteBanGameVotingMode
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVoteBanGameVotingMode2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVoteBanGameVotingMode(ctx context.Context, sel ast.SelectionSet, v gqlmodel.VoteBanGameVotingMode) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVotebanGame2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVotebanGame(ctx context.Context, sel ast.SelectionSet, v gqlmodel.VotebanGame) graphql.Marshaler {
	return ec._VotebanGame(ctx, sel, &v)
}

func (ec *executionContext) marshalNVotebanGame2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVotebanGame(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.VotebanGame) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VotebanGame(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVotebanGameOpts2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVotebanGameOpts(ctx context.Context, v interface{}) (gqlmodel.VotebanGameOpts, error) {
	res, err := ec.unmarshalInputVotebanGameOpts(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAuditLogSystem2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLogSystemᚄ(ctx context.Context, v interface{}) ([]gqlmodel.AuditLogSystem, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]gqlmodel.AuditLogSystem, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAuditLogSystem2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLogSystem(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAuditLogSystem2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLogSystemᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.AuditLogSystem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuditLogSystem2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditLogSystem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAuditOperationType2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditOperationTypeᚄ(ctx context.Context, v interface{}) ([]gqlmodel.AuditOperationType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]gqlmodel.AuditOperationType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAuditOperationType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditOperationType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAuditOperationType2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditOperationTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.AuditOperationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuditOperationType2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐAuditOperationType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx context.Context, v interface{}) (*gqlmodel.ChannelRolePermissionEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodel.ChannelRolePermissionEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChannelRolePermissionEnum2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChannelRolePermissionEnum(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChannelRolePermissionEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOChatAlerts2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlerts(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlerts) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlerts(ctx, sel, v)
}

func (ec *executionContext) marshalOChatAlertsBan2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsBan(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlertsBan) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlertsBan(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatAlertsBanInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsBanInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsBanInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsBanInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatAlertsChatCleared2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsChatCleared(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlertsChatCleared) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlertsChatCleared(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatAlertsChatClearedInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsChatClearedInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsChatClearedInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsChatClearedInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatAlertsCheers2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCheers(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlertsCheers) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlertsCheers(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatAlertsCheersInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCheersInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsCheersInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsCheersInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOChatAlertsCountedMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessageInput(ctx context.Context, v interface{}) ([]*gqlmodel.ChatAlertsCountedMessageInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*gqlmodel.ChatAlertsCountedMessageInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOChatAlertsCountedMessageInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessageInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOChatAlertsCountedMessageInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsCountedMessageInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsCountedMessageInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsCountedMessageInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatAlertsDonations2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsDonations(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlertsDonations) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlertsDonations(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatAlertsDonationsInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsDonationsInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsDonationsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsDonationsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatAlertsFirstUserMessage2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsFirstUserMessage(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlertsFirstUserMessage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlertsFirstUserMessage(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatAlertsFirstUserMessageInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsFirstUserMessageInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsFirstUserMessageInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsFirstUserMessageInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatAlertsFollowersSettings2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsFollowersSettings(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlertsFollowersSettings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlertsFollowersSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatAlertsFollowersSettingsInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsFollowersSettingsInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsFollowersSettingsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsFollowersSettingsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatAlertsMessageDelete2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageDelete(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlertsMessageDelete) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlertsMessageDelete(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatAlertsMessageDeleteInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageDeleteInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsMessageDeleteInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsMessageDeleteInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOChatAlertsMessageInput2ᚕᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageInput(ctx context.Context, v interface{}) ([]*gqlmodel.ChatAlertsMessageInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*gqlmodel.ChatAlertsMessageInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOChatAlertsMessageInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOChatAlertsMessageInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsMessageInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsMessageInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsMessageInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatAlertsRaids2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsRaids(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlertsRaids) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlertsRaids(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatAlertsRaidsInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsRaidsInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsRaidsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsRaidsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatAlertsRedemptions2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsRedemptions(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlertsRedemptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlertsRedemptions(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatAlertsRedemptionsInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsRedemptionsInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsRedemptionsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsRedemptionsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatAlertsStreamOffline2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsStreamOffline(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlertsStreamOffline) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlertsStreamOffline(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatAlertsStreamOfflineInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsStreamOfflineInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsStreamOfflineInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsStreamOfflineInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatAlertsStreamOnline2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsStreamOnline(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlertsStreamOnline) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlertsStreamOnline(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatAlertsStreamOnlineInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsStreamOnlineInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsStreamOnlineInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsStreamOnlineInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatAlertsSubscribers2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsSubscribers(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlertsSubscribers) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlertsSubscribers(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatAlertsSubscribersInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsSubscribersInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsSubscribersInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsSubscribersInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatAlertsUnbanRequestCreate2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsUnbanRequestCreate(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlertsUnbanRequestCreate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlertsUnbanRequestCreate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatAlertsUnbanRequestCreateInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsUnbanRequestCreateInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsUnbanRequestCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsUnbanRequestCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatAlertsUnbanRequestResolve2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsUnbanRequestResolve(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatAlertsUnbanRequestResolve) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatAlertsUnbanRequestResolve(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatAlertsUnbanRequestResolveInput2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatAlertsUnbanRequestResolveInput(ctx context.Context, v interface{}) (*gqlmodel.ChatAlertsUnbanRequestResolveInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputChatAlertsUnbanRequestResolveInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatOverlay2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlay(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatOverlay) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChatOverlay(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChatOverlayAnimation2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlayAnimation(ctx context.Context, v interface{}) (*gqlmodel.ChatOverlayAnimation, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodel.ChatOverlayAnimation)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChatOverlayAnimation2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐChatOverlayAnimation(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChatOverlayAnimation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCommandExpiresType2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandExpiresType(ctx context.Context, v interface{}) (*gqlmodel.CommandExpiresType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodel.CommandExpiresType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCommandExpiresType2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandExpiresType(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.CommandExpiresType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCommandGroup2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommandGroup(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.CommandGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommandGroup(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommunityUsersOrder2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUsersOrder(ctx context.Context, v interface{}) (*gqlmodel.CommunityUsersOrder, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodel.CommunityUsersOrder)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCommunityUsersOrder2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUsersOrder(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.CommunityUsersOrder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCommunityUsersSortBy2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUsersSortBy(ctx context.Context, v interface{}) (*gqlmodel.CommunityUsersSortBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodel.CommunityUsersSortBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCommunityUsersSortBy2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCommunityUsersSortBy(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.CommunityUsersSortBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCreateOrUpdateCommandResponseInput2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCreateOrUpdateCommandResponseInputᚄ(ctx context.Context, v interface{}) ([]gqlmodel.CreateOrUpdateCommandResponseInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]gqlmodel.CreateOrUpdateCommandResponseInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCreateOrUpdateCommandResponseInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐCreateOrUpdateCommandResponseInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEmoteStatisticRange2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticRange(ctx context.Context, v interface{}) (*gqlmodel.EmoteStatisticRange, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodel.EmoteStatisticRange)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEmoteStatisticRange2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmoteStatisticRange(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.EmoteStatisticRange) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEmotesStatisticsOptsOrder2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticsOptsOrder(ctx context.Context, v interface{}) (*gqlmodel.EmotesStatisticsOptsOrder, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodel.EmotesStatisticsOptsOrder)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEmotesStatisticsOptsOrder2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐEmotesStatisticsOptsOrder(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.EmotesStatisticsOptsOrder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalONotificationType2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNotificationType(ctx context.Context, v interface{}) (*gqlmodel.NotificationType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodel.NotificationType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONotificationType2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNotificationType(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.NotificationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalONowPlayingOverlay2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlay(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.NowPlayingOverlay) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NowPlayingOverlay(ctx, sel, v)
}

func (ec *executionContext) unmarshalONowPlayingOverlayPreset2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlayPreset(ctx context.Context, v interface{}) (*gqlmodel.NowPlayingOverlayPreset, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodel.NowPlayingOverlayPreset)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONowPlayingOverlayPreset2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlayPreset(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.NowPlayingOverlayPreset) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalONowPlayingOverlayTrack2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐNowPlayingOverlayTrack(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.NowPlayingOverlayTrack) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NowPlayingOverlayTrack(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSocialLinkInput2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSocialLinkInputᚄ(ctx context.Context, v interface{}) ([]gqlmodel.SocialLinkInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]gqlmodel.SocialLinkInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSocialLinkInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSocialLinkInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSongRequestsSettings2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐSongRequestsSettings(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.SongRequestsSettings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SongRequestsSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) unmarshalOTimerResponseUpdateInput2ᚕgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerResponseUpdateInputᚄ(ctx context.Context, v interface{}) ([]gqlmodel.TimerResponseUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]gqlmodel.TimerResponseUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimerResponseUpdateInput2githubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTimerResponseUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTwirUserTwitchInfo2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐTwirUserTwitchInfo(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.TwirUserTwitchInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TwirUserTwitchInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (*graphql.Upload, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUpload(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v *graphql.Upload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalUpload(*v)
	return res
}

func (ec *executionContext) unmarshalOVariableType2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariableType(ctx context.Context, v interface{}) (*gqlmodel.VariableType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodel.VariableType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVariableType2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVariableType(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.VariableType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOVoteBanGameVotingMode2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVoteBanGameVotingMode(ctx context.Context, v interface{}) (*gqlmodel.VoteBanGameVotingMode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(gqlmodel.VoteBanGameVotingMode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVoteBanGameVotingMode2ᚖgithubᚗcomᚋtwirappᚋtwirᚋappsᚋapiᚑgqlᚋinternalᚋdeliveryᚋgqlᚋgqlmodelᚐVoteBanGameVotingMode(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.VoteBanGameVotingMode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
