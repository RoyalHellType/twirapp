// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodel

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
)

type ChatAlertsSettings interface {
	IsChatAlertsSettings()
}

type Notification interface {
	IsNotification()
	GetID() string
	GetUserID() *string
	GetText() *string
	GetEditorJsJSON() *string
	GetCreatedAt() time.Time
}

type TwirUser interface {
	IsTwirUser()
	GetID() string
	GetTwitchProfile() *TwirUserTwitchInfo
}

type AdminAuditLog struct {
	ID            uuid.UUID           `json:"id"`
	System        AuditLogSystem      `json:"system"`
	OperationType AuditOperationType  `json:"operationType"`
	OldValue      *string             `json:"oldValue,omitempty"`
	NewValue      *string             `json:"newValue,omitempty"`
	ObjectID      *string             `json:"objectId,omitempty"`
	UserID        *string             `json:"userId,omitempty"`
	ChannelID     *string             `json:"channelId,omitempty"`
	CreatedAt     time.Time           `json:"createdAt"`
	User          *TwirUserTwitchInfo `json:"user,omitempty"`
	Channel       *TwirUserTwitchInfo `json:"channel,omitempty"`
}

type AdminAuditLogResponse struct {
	Logs  []AdminAuditLog `json:"logs"`
	Total int             `json:"total"`
}

type AdminAuditLogsInput struct {
	System        graphql.Omittable[[]AuditLogSystem]     `json:"system,omitempty"`
	ObjectID      graphql.Omittable[*string]              `json:"objectId,omitempty"`
	UserID        graphql.Omittable[*string]              `json:"userId,omitempty"`
	ChannelID     graphql.Omittable[*string]              `json:"channelId,omitempty"`
	OperationType graphql.Omittable[[]AuditOperationType] `json:"operationType,omitempty"`
	Page          graphql.Omittable[*int]                 `json:"page,omitempty"`
	PerPage       graphql.Omittable[*int]                 `json:"perPage,omitempty"`
}

type AdminNotification struct {
	ID            string              `json:"id"`
	Text          *string             `json:"text,omitempty"`
	UserID        *string             `json:"userId,omitempty"`
	TwitchProfile *TwirUserTwitchInfo `json:"twitchProfile,omitempty"`
	CreatedAt     time.Time           `json:"createdAt"`
	EditorJsJSON  *string             `json:"editorJsJson,omitempty"`
}

func (AdminNotification) IsNotification()               {}
func (this AdminNotification) GetID() string            { return this.ID }
func (this AdminNotification) GetUserID() *string       { return this.UserID }
func (this AdminNotification) GetText() *string         { return this.Text }
func (this AdminNotification) GetEditorJsJSON() *string { return this.EditorJsJSON }
func (this AdminNotification) GetCreatedAt() time.Time  { return this.CreatedAt }

type AdminNotificationsParams struct {
	Search  graphql.Omittable[*string]           `json:"search,omitempty"`
	Page    graphql.Omittable[*int]              `json:"page,omitempty"`
	PerPage graphql.Omittable[*int]              `json:"perPage,omitempty"`
	Type    graphql.Omittable[*NotificationType] `json:"type,omitempty"`
}

type AdminNotificationsResponse struct {
	Notifications []AdminNotification `json:"notifications"`
	Total         int                 `json:"total"`
}

type AuditLog struct {
	ID            uuid.UUID           `json:"id"`
	System        AuditLogSystem      `json:"system"`
	OperationType AuditOperationType  `json:"operationType"`
	OldValue      *string             `json:"oldValue,omitempty"`
	NewValue      *string             `json:"newValue,omitempty"`
	ObjectID      *string             `json:"objectId,omitempty"`
	UserID        *string             `json:"userId,omitempty"`
	CreatedAt     time.Time           `json:"createdAt"`
	User          *TwirUserTwitchInfo `json:"user,omitempty"`
}

type AuthenticatedUser struct {
	ID                          string              `json:"id"`
	IsBotAdmin                  bool                `json:"isBotAdmin"`
	IsBanned                    bool                `json:"isBanned"`
	IsEnabled                   *bool               `json:"isEnabled,omitempty"`
	IsBotModerator              *bool               `json:"isBotModerator,omitempty"`
	APIKey                      string              `json:"apiKey"`
	HideOnLandingPage           bool                `json:"hideOnLandingPage"`
	BotID                       *string             `json:"botId,omitempty"`
	TwitchProfile               *TwirUserTwitchInfo `json:"twitchProfile"`
	SelectedDashboardID         string              `json:"selectedDashboardId"`
	SelectedDashboardTwitchUser *TwirUserTwitchInfo `json:"selectedDashboardTwitchUser"`
	AvailableDashboards         []Dashboard         `json:"availableDashboards"`
}

func (AuthenticatedUser) IsTwirUser()                                {}
func (this AuthenticatedUser) GetID() string                         { return this.ID }
func (this AuthenticatedUser) GetTwitchProfile() *TwirUserTwitchInfo { return this.TwitchProfile }

type Badge struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	CreatedAt string `json:"createdAt"`
	FileURL   string `json:"fileUrl"`
	Enabled   bool   `json:"enabled"`
	// IDS of users which has this badge
	Users   []string `json:"users,omitempty"`
	FfzSlot int      `json:"ffzSlot"`
}

type BuiltInVariable struct {
	Name                string `json:"name"`
	Example             string `json:"example"`
	Description         string `json:"description"`
	Visible             bool   `json:"visible"`
	CanBeUsedInRegistry bool   `json:"canBeUsedInRegistry"`
}

type ChannelAlert struct {
	ID           string   `json:"id"`
	Name         string   `json:"name"`
	AudioID      *string  `json:"audioId,omitempty"`
	AudioVolume  *int     `json:"audioVolume,omitempty"`
	CommandIds   []string `json:"commandIds,omitempty"`
	RewardIds    []string `json:"rewardIds,omitempty"`
	GreetingsIds []string `json:"greetingsIds,omitempty"`
	KeywordsIds  []string `json:"keywordsIds,omitempty"`
}

type ChannelAlertCreateInput struct {
	Name         string                      `json:"name"`
	AudioID      graphql.Omittable[*string]  `json:"audioId,omitempty"`
	AudioVolume  graphql.Omittable[*int]     `json:"audioVolume,omitempty"`
	CommandIds   graphql.Omittable[[]string] `json:"commandIds,omitempty"`
	RewardIds    graphql.Omittable[[]string] `json:"rewardIds,omitempty"`
	GreetingsIds graphql.Omittable[[]string] `json:"greetingsIds,omitempty"`
	KeywordsIds  graphql.Omittable[[]string] `json:"keywordsIds,omitempty"`
}

type ChannelAlertUpdateInput struct {
	Name         graphql.Omittable[*string]  `json:"name,omitempty"`
	AudioID      graphql.Omittable[*string]  `json:"audioId,omitempty"`
	AudioVolume  graphql.Omittable[*int]     `json:"audioVolume,omitempty"`
	CommandIds   graphql.Omittable[[]string] `json:"commandIds,omitempty"`
	RewardIds    graphql.Omittable[[]string] `json:"rewardIds,omitempty"`
	GreetingsIds graphql.Omittable[[]string] `json:"greetingsIds,omitempty"`
	KeywordsIds  graphql.Omittable[[]string] `json:"keywordsIds,omitempty"`
}

type ChatAlerts struct {
	Followers           *ChatAlertsFollowersSettings   `json:"followers,omitempty"`
	Raids               *ChatAlertsRaids               `json:"raids,omitempty"`
	Donations           *ChatAlertsDonations           `json:"donations,omitempty"`
	Subscribers         *ChatAlertsSubscribers         `json:"subscribers,omitempty"`
	Cheers              *ChatAlertsCheers              `json:"cheers,omitempty"`
	Redemptions         *ChatAlertsRedemptions         `json:"redemptions,omitempty"`
	FirstUserMessage    *ChatAlertsFirstUserMessage    `json:"firstUserMessage,omitempty"`
	StreamOnline        *ChatAlertsStreamOnline        `json:"streamOnline,omitempty"`
	StreamOffline       *ChatAlertsStreamOffline       `json:"streamOffline,omitempty"`
	ChatCleared         *ChatAlertsChatCleared         `json:"chatCleared,omitempty"`
	Ban                 *ChatAlertsBan                 `json:"ban,omitempty"`
	UnbanRequestCreate  *ChatAlertsUnbanRequestCreate  `json:"unbanRequestCreate,omitempty"`
	UnbanRequestResolve *ChatAlertsUnbanRequestResolve `json:"unbanRequestResolve,omitempty"`
	MessageDelete       *ChatAlertsMessageDelete       `json:"messageDelete,omitempty"`
}

type ChatAlertsBan struct {
	Enabled           bool                       `json:"enabled"`
	Messages          []ChatAlertsCountedMessage `json:"messages"`
	IgnoreTimeoutFrom []string                   `json:"ignoreTimeoutFrom"`
	Cooldown          int                        `json:"cooldown"`
}

func (ChatAlertsBan) IsChatAlertsSettings() {}

type ChatAlertsBanInput struct {
	Enabled           graphql.Omittable[*bool]                            `json:"enabled,omitempty"`
	Messages          graphql.Omittable[[]*ChatAlertsCountedMessageInput] `json:"messages,omitempty"`
	IgnoreTimeoutFrom graphql.Omittable[[]*string]                        `json:"ignoreTimeoutFrom,omitempty"`
	Cooldown          graphql.Omittable[*int]                             `json:"cooldown,omitempty"`
}

type ChatAlertsChatCleared struct {
	Enabled  bool                `json:"enabled"`
	Messages []ChatAlertsMessage `json:"messages"`
	Cooldown int                 `json:"cooldown"`
}

func (ChatAlertsChatCleared) IsChatAlertsSettings() {}

type ChatAlertsChatClearedInput struct {
	Enabled  graphql.Omittable[*bool]                     `json:"enabled,omitempty"`
	Messages graphql.Omittable[[]*ChatAlertsMessageInput] `json:"messages,omitempty"`
	Cooldown graphql.Omittable[*int]                      `json:"cooldown,omitempty"`
}

type ChatAlertsCheers struct {
	Enabled  bool                       `json:"enabled"`
	Messages []ChatAlertsCountedMessage `json:"messages"`
	Cooldown int                        `json:"cooldown"`
}

func (ChatAlertsCheers) IsChatAlertsSettings() {}

type ChatAlertsCheersInput struct {
	Enabled  graphql.Omittable[*bool]                            `json:"enabled,omitempty"`
	Messages graphql.Omittable[[]*ChatAlertsCountedMessageInput] `json:"messages,omitempty"`
	Cooldown graphql.Omittable[*int]                             `json:"cooldown,omitempty"`
}

type ChatAlertsCountedMessage struct {
	Count int    `json:"count"`
	Text  string `json:"text"`
}

type ChatAlertsCountedMessageInput struct {
	Count graphql.Omittable[*int]    `json:"count,omitempty"`
	Text  graphql.Omittable[*string] `json:"text,omitempty"`
}

type ChatAlertsDonations struct {
	Enabled  bool                       `json:"enabled"`
	Messages []ChatAlertsCountedMessage `json:"messages"`
	Cooldown int                        `json:"cooldown"`
}

func (ChatAlertsDonations) IsChatAlertsSettings() {}

type ChatAlertsDonationsInput struct {
	Enabled  graphql.Omittable[*bool]                            `json:"enabled,omitempty"`
	Messages graphql.Omittable[[]*ChatAlertsCountedMessageInput] `json:"messages,omitempty"`
	Cooldown graphql.Omittable[*int]                             `json:"cooldown,omitempty"`
}

type ChatAlertsFirstUserMessage struct {
	Enabled  bool                `json:"enabled"`
	Messages []ChatAlertsMessage `json:"messages"`
	Cooldown int                 `json:"cooldown"`
}

func (ChatAlertsFirstUserMessage) IsChatAlertsSettings() {}

type ChatAlertsFirstUserMessageInput struct {
	Enabled  graphql.Omittable[*bool]                     `json:"enabled,omitempty"`
	Messages graphql.Omittable[[]*ChatAlertsMessageInput] `json:"messages,omitempty"`
	Cooldown graphql.Omittable[*int]                      `json:"cooldown,omitempty"`
}

type ChatAlertsFollowersSettings struct {
	Enabled  bool                `json:"enabled"`
	Messages []ChatAlertsMessage `json:"messages"`
	Cooldown int                 `json:"cooldown"`
}

func (ChatAlertsFollowersSettings) IsChatAlertsSettings() {}

type ChatAlertsFollowersSettingsInput struct {
	Enabled  graphql.Omittable[*bool]                     `json:"enabled,omitempty"`
	Messages graphql.Omittable[[]*ChatAlertsMessageInput] `json:"messages,omitempty"`
	Cooldown graphql.Omittable[*int]                      `json:"cooldown,omitempty"`
}

type ChatAlertsInput struct {
	Followers           graphql.Omittable[*ChatAlertsFollowersSettingsInput]   `json:"followers,omitempty"`
	Raids               graphql.Omittable[*ChatAlertsRaidsInput]               `json:"raids,omitempty"`
	Donations           graphql.Omittable[*ChatAlertsDonationsInput]           `json:"donations,omitempty"`
	Subscribers         graphql.Omittable[*ChatAlertsSubscribersInput]         `json:"subscribers,omitempty"`
	Cheers              graphql.Omittable[*ChatAlertsCheersInput]              `json:"cheers,omitempty"`
	Redemptions         graphql.Omittable[*ChatAlertsRedemptionsInput]         `json:"redemptions,omitempty"`
	FirstUserMessage    graphql.Omittable[*ChatAlertsFirstUserMessageInput]    `json:"firstUserMessage,omitempty"`
	StreamOnline        graphql.Omittable[*ChatAlertsStreamOnlineInput]        `json:"streamOnline,omitempty"`
	StreamOffline       graphql.Omittable[*ChatAlertsStreamOfflineInput]       `json:"streamOffline,omitempty"`
	ChatCleared         graphql.Omittable[*ChatAlertsChatClearedInput]         `json:"chatCleared,omitempty"`
	Ban                 graphql.Omittable[*ChatAlertsBanInput]                 `json:"ban,omitempty"`
	UnbanRequestCreate  graphql.Omittable[*ChatAlertsUnbanRequestCreateInput]  `json:"unbanRequestCreate,omitempty"`
	UnbanRequestResolve graphql.Omittable[*ChatAlertsUnbanRequestResolveInput] `json:"unbanRequestResolve,omitempty"`
	MessageDelete       graphql.Omittable[*ChatAlertsMessageDeleteInput]       `json:"messageDelete,omitempty"`
}

type ChatAlertsMessage struct {
	Text string `json:"text"`
}

type ChatAlertsMessageDelete struct {
	Enabled  bool                `json:"enabled"`
	Messages []ChatAlertsMessage `json:"messages"`
	Cooldown int                 `json:"cooldown"`
}

func (ChatAlertsMessageDelete) IsChatAlertsSettings() {}

type ChatAlertsMessageDeleteInput struct {
	Enabled  graphql.Omittable[*bool]                     `json:"enabled,omitempty"`
	Messages graphql.Omittable[[]*ChatAlertsMessageInput] `json:"messages,omitempty"`
	Cooldown graphql.Omittable[*int]                      `json:"cooldown,omitempty"`
}

type ChatAlertsMessageInput struct {
	Text graphql.Omittable[*string] `json:"text,omitempty"`
}

type ChatAlertsRaids struct {
	Enabled  bool                       `json:"enabled"`
	Messages []ChatAlertsCountedMessage `json:"messages"`
	Cooldown int                        `json:"cooldown"`
}

func (ChatAlertsRaids) IsChatAlertsSettings() {}

type ChatAlertsRaidsInput struct {
	Enabled  graphql.Omittable[*bool]                            `json:"enabled,omitempty"`
	Messages graphql.Omittable[[]*ChatAlertsCountedMessageInput] `json:"messages,omitempty"`
	Cooldown graphql.Omittable[*int]                             `json:"cooldown,omitempty"`
}

type ChatAlertsRedemptions struct {
	Enabled           bool                `json:"enabled"`
	Messages          []ChatAlertsMessage `json:"messages"`
	Cooldown          int                 `json:"cooldown"`
	IgnoredRewardsIds []string            `json:"ignoredRewardsIds"`
}

func (ChatAlertsRedemptions) IsChatAlertsSettings() {}

type ChatAlertsRedemptionsInput struct {
	Enabled           graphql.Omittable[*bool]                     `json:"enabled,omitempty"`
	Messages          graphql.Omittable[[]*ChatAlertsMessageInput] `json:"messages,omitempty"`
	Cooldown          graphql.Omittable[*int]                      `json:"cooldown,omitempty"`
	IgnoredRewardsIds graphql.Omittable[[]string]                  `json:"ignoredRewardsIds,omitempty"`
}

type ChatAlertsStreamOffline struct {
	Enabled  bool                `json:"enabled"`
	Messages []ChatAlertsMessage `json:"messages"`
	Cooldown int                 `json:"cooldown"`
}

func (ChatAlertsStreamOffline) IsChatAlertsSettings() {}

type ChatAlertsStreamOfflineInput struct {
	Enabled  graphql.Omittable[*bool]                     `json:"enabled,omitempty"`
	Messages graphql.Omittable[[]*ChatAlertsMessageInput] `json:"messages,omitempty"`
	Cooldown graphql.Omittable[*int]                      `json:"cooldown,omitempty"`
}

type ChatAlertsStreamOnline struct {
	Enabled  bool                `json:"enabled"`
	Messages []ChatAlertsMessage `json:"messages"`
	Cooldown int                 `json:"cooldown"`
}

func (ChatAlertsStreamOnline) IsChatAlertsSettings() {}

type ChatAlertsStreamOnlineInput struct {
	Enabled  graphql.Omittable[*bool]                     `json:"enabled,omitempty"`
	Messages graphql.Omittable[[]*ChatAlertsMessageInput] `json:"messages,omitempty"`
	Cooldown graphql.Omittable[*int]                      `json:"cooldown,omitempty"`
}

type ChatAlertsSubscribers struct {
	Enabled  bool                       `json:"enabled"`
	Messages []ChatAlertsCountedMessage `json:"messages"`
	Cooldown int                        `json:"cooldown"`
}

func (ChatAlertsSubscribers) IsChatAlertsSettings() {}

type ChatAlertsSubscribersInput struct {
	Enabled  graphql.Omittable[*bool]                            `json:"enabled,omitempty"`
	Messages graphql.Omittable[[]*ChatAlertsCountedMessageInput] `json:"messages,omitempty"`
	Cooldown graphql.Omittable[*int]                             `json:"cooldown,omitempty"`
}

type ChatAlertsUnbanRequestCreate struct {
	Enabled  bool                `json:"enabled"`
	Messages []ChatAlertsMessage `json:"messages"`
	Cooldown int                 `json:"cooldown"`
}

func (ChatAlertsUnbanRequestCreate) IsChatAlertsSettings() {}

type ChatAlertsUnbanRequestCreateInput struct {
	Enabled  graphql.Omittable[*bool]                     `json:"enabled,omitempty"`
	Messages graphql.Omittable[[]*ChatAlertsMessageInput] `json:"messages,omitempty"`
	Cooldown graphql.Omittable[*int]                      `json:"cooldown,omitempty"`
}

type ChatAlertsUnbanRequestResolve struct {
	Enabled  bool                `json:"enabled"`
	Messages []ChatAlertsMessage `json:"messages"`
	Cooldown int                 `json:"cooldown"`
}

func (ChatAlertsUnbanRequestResolve) IsChatAlertsSettings() {}

type ChatAlertsUnbanRequestResolveInput struct {
	Enabled  graphql.Omittable[*bool]                     `json:"enabled,omitempty"`
	Messages graphql.Omittable[[]*ChatAlertsMessageInput] `json:"messages,omitempty"`
	Cooldown graphql.Omittable[*int]                      `json:"cooldown,omitempty"`
}

type ChatOverlay struct {
	ID                  string               `json:"id"`
	MessageHideTimeout  int                  `json:"messageHideTimeout"`
	MessageShowDelay    int                  `json:"messageShowDelay"`
	Preset              string               `json:"preset"`
	FontSize            int                  `json:"fontSize"`
	HideCommands        bool                 `json:"hideCommands"`
	HideBots            bool                 `json:"hideBots"`
	FontFamily          string               `json:"fontFamily"`
	ShowBadges          bool                 `json:"showBadges"`
	ShowAnnounceBadge   bool                 `json:"showAnnounceBadge"`
	TextShadowColor     string               `json:"textShadowColor"`
	TextShadowSize      int                  `json:"textShadowSize"`
	ChatBackgroundColor string               `json:"chatBackgroundColor"`
	Direction           string               `json:"direction"`
	FontWeight          int                  `json:"fontWeight"`
	FontStyle           string               `json:"fontStyle"`
	PaddingContainer    int                  `json:"paddingContainer"`
	Animation           ChatOverlayAnimation `json:"animation"`
}

type ChatOverlayMutateOpts struct {
	MessageHideTimeout  graphql.Omittable[*int]                  `json:"messageHideTimeout,omitempty"`
	MessageShowDelay    graphql.Omittable[*int]                  `json:"messageShowDelay,omitempty"`
	Preset              graphql.Omittable[*string]               `json:"preset,omitempty"`
	FontSize            graphql.Omittable[*int]                  `json:"fontSize,omitempty"`
	HideCommands        graphql.Omittable[*bool]                 `json:"hideCommands,omitempty"`
	HideBots            graphql.Omittable[*bool]                 `json:"hideBots,omitempty"`
	FontFamily          graphql.Omittable[*string]               `json:"fontFamily,omitempty"`
	ShowBadges          graphql.Omittable[*bool]                 `json:"showBadges,omitempty"`
	ShowAnnounceBadge   graphql.Omittable[*bool]                 `json:"showAnnounceBadge,omitempty"`
	TextShadowColor     graphql.Omittable[*string]               `json:"textShadowColor,omitempty"`
	TextShadowSize      graphql.Omittable[*int]                  `json:"textShadowSize,omitempty"`
	ChatBackgroundColor graphql.Omittable[*string]               `json:"chatBackgroundColor,omitempty"`
	Direction           graphql.Omittable[*string]               `json:"direction,omitempty"`
	FontWeight          graphql.Omittable[*int]                  `json:"fontWeight,omitempty"`
	FontStyle           graphql.Omittable[*string]               `json:"fontStyle,omitempty"`
	PaddingContainer    graphql.Omittable[*int]                  `json:"paddingContainer,omitempty"`
	Animation           graphql.Omittable[*ChatOverlayAnimation] `json:"animation,omitempty"`
}

type Command struct {
	ID                        string              `json:"id"`
	Name                      string              `json:"name"`
	Description               string              `json:"description"`
	Aliases                   []string            `json:"aliases"`
	Responses                 []CommandResponse   `json:"responses"`
	Cooldown                  int                 `json:"cooldown"`
	CooldownType              string              `json:"cooldownType"`
	Enabled                   bool                `json:"enabled"`
	Visible                   bool                `json:"visible"`
	Default                   bool                `json:"default"`
	DefaultName               *string             `json:"defaultName,omitempty"`
	Module                    string              `json:"module"`
	IsReply                   bool                `json:"isReply"`
	KeepResponsesOrder        bool                `json:"keepResponsesOrder"`
	DeniedUsersIds            []string            `json:"deniedUsersIds"`
	AllowedUsersIds           []string            `json:"allowedUsersIds"`
	RolesIds                  []string            `json:"rolesIds"`
	OnlineOnly                bool                `json:"onlineOnly"`
	CooldownRolesIds          []string            `json:"cooldownRolesIds"`
	EnabledCategories         []string            `json:"enabledCategories"`
	RequiredWatchTime         int                 `json:"requiredWatchTime"`
	RequiredMessages          int                 `json:"requiredMessages"`
	RequiredUsedChannelPoints int                 `json:"requiredUsedChannelPoints"`
	GroupID                   *string             `json:"groupId,omitempty"`
	Group                     *CommandGroup       `json:"group,omitempty"`
	ExpiresAt                 *int                `json:"expiresAt,omitempty"`
	ExpiresType               *CommandExpiresType `json:"expiresType,omitempty"`
}

type CommandCreatePayload struct {
	ID string `json:"id"`
}

type CommandGroup struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Color string `json:"color"`
}

type CommandResponse struct {
	ID                  string           `json:"id"`
	CommandID           string           `json:"commandId"`
	Text                string           `json:"text"`
	TwitchCategoriesIds []string         `json:"twitchCategoriesIds"`
	TwitchCategories    []TwitchCategory `json:"twitchCategories"`
}

type CommandsCreateOpts struct {
	Name                      string                                 `json:"name"`
	Description               string                                 `json:"description"`
	Aliases                   []string                               `json:"aliases"`
	Responses                 []CreateOrUpdateCommandResponseInput   `json:"responses"`
	Cooldown                  int                                    `json:"cooldown"`
	CooldownType              string                                 `json:"cooldownType"`
	Enabled                   bool                                   `json:"enabled"`
	Visible                   bool                                   `json:"visible"`
	IsReply                   bool                                   `json:"isReply"`
	KeepResponsesOrder        bool                                   `json:"keepResponsesOrder"`
	DeniedUsersIds            []string                               `json:"deniedUsersIds"`
	AllowedUsersIds           []string                               `json:"allowedUsersIds"`
	RolesIds                  []string                               `json:"rolesIds"`
	OnlineOnly                bool                                   `json:"onlineOnly"`
	CooldownRolesIds          []string                               `json:"cooldownRolesIds"`
	EnabledCategories         []string                               `json:"enabledCategories"`
	RequiredWatchTime         int                                    `json:"requiredWatchTime"`
	RequiredMessages          int                                    `json:"requiredMessages"`
	RequiredUsedChannelPoints int                                    `json:"requiredUsedChannelPoints"`
	GroupID                   graphql.Omittable[*string]             `json:"groupId,omitempty"`
	ExpiresAt                 graphql.Omittable[*int]                `json:"expiresAt,omitempty"`
	ExpiresType               graphql.Omittable[*CommandExpiresType] `json:"expiresType,omitempty"`
}

type CommandsGroupsCreateOpts struct {
	Name  string `json:"name"`
	Color string `json:"color"`
}

type CommandsGroupsUpdateOpts struct {
	Name  graphql.Omittable[*string] `json:"name,omitempty"`
	Color graphql.Omittable[*string] `json:"color,omitempty"`
}

type CommandsUpdateOpts struct {
	Name                      graphql.Omittable[*string]                              `json:"name,omitempty"`
	Description               graphql.Omittable[*string]                              `json:"description,omitempty"`
	Aliases                   graphql.Omittable[[]string]                             `json:"aliases,omitempty"`
	Responses                 graphql.Omittable[[]CreateOrUpdateCommandResponseInput] `json:"responses,omitempty"`
	Cooldown                  graphql.Omittable[*int]                                 `json:"cooldown,omitempty"`
	CooldownType              graphql.Omittable[*string]                              `json:"cooldownType,omitempty"`
	Enabled                   graphql.Omittable[*bool]                                `json:"enabled,omitempty"`
	Visible                   graphql.Omittable[*bool]                                `json:"visible,omitempty"`
	IsReply                   graphql.Omittable[*bool]                                `json:"isReply,omitempty"`
	KeepResponsesOrder        graphql.Omittable[*bool]                                `json:"keepResponsesOrder,omitempty"`
	DeniedUsersIds            graphql.Omittable[[]string]                             `json:"deniedUsersIds,omitempty"`
	AllowedUsersIds           graphql.Omittable[[]string]                             `json:"allowedUsersIds,omitempty"`
	RolesIds                  graphql.Omittable[[]string]                             `json:"rolesIds,omitempty"`
	OnlineOnly                graphql.Omittable[*bool]                                `json:"onlineOnly,omitempty"`
	CooldownRolesIds          graphql.Omittable[[]string]                             `json:"cooldownRolesIds,omitempty"`
	EnabledCategories         graphql.Omittable[[]string]                             `json:"enabledCategories,omitempty"`
	RequiredWatchTime         graphql.Omittable[*int]                                 `json:"requiredWatchTime,omitempty"`
	RequiredMessages          graphql.Omittable[*int]                                 `json:"requiredMessages,omitempty"`
	RequiredUsedChannelPoints graphql.Omittable[*int]                                 `json:"requiredUsedChannelPoints,omitempty"`
	GroupID                   graphql.Omittable[*string]                              `json:"groupId,omitempty"`
	ExpiresAt                 graphql.Omittable[*int]                                 `json:"expiresAt,omitempty"`
	ExpiresType               graphql.Omittable[*CommandExpiresType]                  `json:"expiresType,omitempty"`
}

type CommunityUser struct {
	ID                string              `json:"id"`
	TwitchProfile     *TwirUserTwitchInfo `json:"twitchProfile"`
	WatchedMs         int                 `json:"watchedMs"`
	Messages          int                 `json:"messages"`
	UsedEmotes        int                 `json:"usedEmotes"`
	UsedChannelPoints int                 `json:"usedChannelPoints"`
}

func (CommunityUser) IsTwirUser()                                {}
func (this CommunityUser) GetID() string                         { return this.ID }
func (this CommunityUser) GetTwitchProfile() *TwirUserTwitchInfo { return this.TwitchProfile }

type CommunityUsersOpts struct {
	ChannelID string                                   `json:"channelId"`
	Page      graphql.Omittable[*int]                  `json:"page,omitempty"`
	PerPage   graphql.Omittable[*int]                  `json:"perPage,omitempty"`
	SortBy    graphql.Omittable[*CommunityUsersSortBy] `json:"sortBy,omitempty"`
	Order     graphql.Omittable[*CommunityUsersOrder]  `json:"order,omitempty"`
	Search    graphql.Omittable[*string]               `json:"search,omitempty"`
}

type CommunityUsersResponse struct {
	Users []CommunityUser `json:"users"`
	Total int             `json:"total"`
}

type CreateOrUpdateCommandResponseInput struct {
	Text                string   `json:"text"`
	TwitchCategoriesIds []string `json:"twitchCategoriesIds"`
}

type CreateOrUpdateRoleSettingsInput struct {
	RequiredWatchTime         int `json:"requiredWatchTime"`
	RequiredMessages          int `json:"requiredMessages"`
	RequiredUserChannelPoints int `json:"requiredUserChannelPoints"`
}

type Dashboard struct {
	ID            string                      `json:"id"`
	Flags         []ChannelRolePermissionEnum `json:"flags"`
	TwitchProfile *TwirUserTwitchInfo         `json:"twitchProfile"`
}

type DashboardEventData struct {
	DonationAmount                  *string `json:"donationAmount,omitempty"`
	DonationCurrency                *string `json:"donationCurrency,omitempty"`
	DonationMessage                 *string `json:"donationMessage,omitempty"`
	DonationUserName                *string `json:"donationUserName,omitempty"`
	RaidedViewersCount              *string `json:"raidedViewersCount,omitempty"`
	RaidedFromUserName              *string `json:"raidedFromUserName,omitempty"`
	RaidedFromDisplayName           *string `json:"raidedFromDisplayName,omitempty"`
	FollowUserName                  *string `json:"followUserName,omitempty"`
	FollowUserDisplayName           *string `json:"followUserDisplayName,omitempty"`
	RedemptionTitle                 *string `json:"redemptionTitle,omitempty"`
	RedemptionInput                 *string `json:"redemptionInput,omitempty"`
	RedemptionUserName              *string `json:"redemptionUserName,omitempty"`
	RedemptionUserDisplayName       *string `json:"redemptionUserDisplayName,omitempty"`
	RedemptionCost                  *string `json:"redemptionCost,omitempty"`
	SubLevel                        *string `json:"subLevel,omitempty"`
	SubUserName                     *string `json:"subUserName,omitempty"`
	SubUserDisplayName              *string `json:"subUserDisplayName,omitempty"`
	ReSubLevel                      *string `json:"reSubLevel,omitempty"`
	ReSubUserName                   *string `json:"reSubUserName,omitempty"`
	ReSubUserDisplayName            *string `json:"reSubUserDisplayName,omitempty"`
	ReSubMonths                     *string `json:"reSubMonths,omitempty"`
	ReSubStreak                     *string `json:"reSubStreak,omitempty"`
	SubGiftLevel                    *string `json:"subGiftLevel,omitempty"`
	SubGiftUserName                 *string `json:"subGiftUserName,omitempty"`
	SubGiftUserDisplayName          *string `json:"subGiftUserDisplayName,omitempty"`
	SubGiftTargetUserName           *string `json:"subGiftTargetUserName,omitempty"`
	SubGiftTargetUserDisplayName    *string `json:"subGiftTargetUserDisplayName,omitempty"`
	FirstUserMessageUserName        *string `json:"firstUserMessageUserName,omitempty"`
	FirstUserMessageUserDisplayName *string `json:"firstUserMessageUserDisplayName,omitempty"`
	FirstUserMessageMessage         *string `json:"firstUserMessageMessage,omitempty"`
	BanReason                       *string `json:"banReason,omitempty"`
	BanEndsInMinutes                *string `json:"banEndsInMinutes,omitempty"`
	BannedUserName                  *string `json:"bannedUserName,omitempty"`
	BannedUserLogin                 *string `json:"bannedUserLogin,omitempty"`
	ModeratorName                   *string `json:"moderatorName,omitempty"`
	ModeratorDisplayName            *string `json:"moderatorDisplayName,omitempty"`
	Message                         *string `json:"message,omitempty"`
	UserLogin                       *string `json:"userLogin,omitempty"`
	UserName                        *string `json:"userName,omitempty"`
}

type DashboardEventListPayload struct {
	Events []DashboardEventPayload `json:"events"`
}

type DashboardEventPayload struct {
	UserID    string              `json:"userId"`
	Type      DashboardEventType  `json:"type"`
	CreatedAt time.Time           `json:"createdAt"`
	Data      *DashboardEventData `json:"data"`
}

type DashboardStats struct {
	CategoryID     string     `json:"categoryId"`
	CategoryName   string     `json:"categoryName"`
	Viewers        *int       `json:"viewers,omitempty"`
	StartedAt      *time.Time `json:"startedAt,omitempty"`
	Title          string     `json:"title"`
	ChatMessages   int        `json:"chatMessages"`
	Followers      int        `json:"followers"`
	UsedEmotes     int        `json:"usedEmotes"`
	RequestedSongs int        `json:"requestedSongs"`
	Subs           int        `json:"subs"`
}

type DuelGame struct {
	Enabled         bool   `json:"enabled"`
	UserCooldown    int    `json:"userCooldown"`
	GlobalCooldown  int    `json:"globalCooldown"`
	TimeoutSeconds  int    `json:"timeoutSeconds"`
	StartMessage    string `json:"startMessage"`
	ResultMessage   string `json:"resultMessage"`
	SecondsToAccept int    `json:"secondsToAccept"`
	PointsPerWin    int    `json:"pointsPerWin"`
	PointsPerLose   int    `json:"pointsPerLose"`
	BothDiePercent  int    `json:"bothDiePercent"`
	BothDieMessage  string `json:"bothDieMessage"`
}

type DuelGameOpts struct {
	Enabled         graphql.Omittable[*bool]   `json:"enabled,omitempty"`
	UserCooldown    graphql.Omittable[*int]    `json:"userCooldown,omitempty"`
	GlobalCooldown  graphql.Omittable[*int]    `json:"globalCooldown,omitempty"`
	TimeoutSeconds  graphql.Omittable[*int]    `json:"timeoutSeconds,omitempty"`
	StartMessage    graphql.Omittable[*string] `json:"startMessage,omitempty"`
	ResultMessage   graphql.Omittable[*string] `json:"resultMessage,omitempty"`
	SecondsToAccept graphql.Omittable[*int]    `json:"secondsToAccept,omitempty"`
	PointsPerWin    graphql.Omittable[*int]    `json:"pointsPerWin,omitempty"`
	PointsPerLose   graphql.Omittable[*int]    `json:"pointsPerLose,omitempty"`
	BothDiePercent  graphql.Omittable[*int]    `json:"bothDiePercent,omitempty"`
	BothDieMessage  graphql.Omittable[*string] `json:"bothDieMessage,omitempty"`
}

type EightBallGame struct {
	Enabled bool     `json:"enabled"`
	Answers []string `json:"answers"`
}

type EightBallGameOpts struct {
	Enabled graphql.Omittable[*bool]    `json:"enabled,omitempty"`
	Answers graphql.Omittable[[]string] `json:"answers,omitempty"`
}

type EmoteStatisticTopUser struct {
	UserID        string              `json:"userId"`
	TwitchProfile *TwirUserTwitchInfo `json:"twitchProfile"`
	Count         int                 `json:"count"`
}

type EmoteStatisticUsage struct {
	Count     int `json:"count"`
	Timestamp int `json:"timestamp"`
}

type EmoteStatisticUserUsage struct {
	UserID        string              `json:"userId"`
	TwitchProfile *TwirUserTwitchInfo `json:"twitchProfile"`
	Date          time.Time           `json:"date"`
}

type EmotesStatistic struct {
	EmoteName         string                `json:"emoteName"`
	TotalUsages       int                   `json:"totalUsages"`
	LastUsedTimestamp int                   `json:"lastUsedTimestamp"`
	GraphicUsages     []EmoteStatisticUsage `json:"graphicUsages"`
}

type EmotesStatisticEmoteDetailedOpts struct {
	EmoteName            string                  `json:"emoteName"`
	Range                EmoteStatisticRange     `json:"range"`
	UsagesByUsersPage    graphql.Omittable[*int] `json:"usagesByUsersPage,omitempty"`
	UsagesByUsersPerPage graphql.Omittable[*int] `json:"usagesByUsersPerPage,omitempty"`
	TopUsersPage         graphql.Omittable[*int] `json:"topUsersPage,omitempty"`
	TopUsersPerPage      graphql.Omittable[*int] `json:"topUsersPerPage,omitempty"`
}

type EmotesStatisticEmoteDetailedResponse struct {
	EmoteName          string                    `json:"emoteName"`
	TotalUsages        int                       `json:"totalUsages"`
	LastUsedTimestamp  int                       `json:"lastUsedTimestamp"`
	GraphicUsages      []EmoteStatisticUsage     `json:"graphicUsages"`
	UsagesHistory      []EmoteStatisticUserUsage `json:"usagesHistory"`
	UsagesByUsersTotal int                       `json:"usagesByUsersTotal"`
	TopUsers           []EmoteStatisticTopUser   `json:"topUsers"`
	TopUsersTotal      int                       `json:"topUsersTotal"`
}

type EmotesStatisticResponse struct {
	Emotes []EmotesStatistic `json:"emotes"`
	Total  int               `json:"total"`
}

type EmotesStatisticsOpts struct {
	Search       graphql.Omittable[*string]                    `json:"search,omitempty"`
	Page         graphql.Omittable[*int]                       `json:"page,omitempty"`
	PerPage      graphql.Omittable[*int]                       `json:"perPage,omitempty"`
	GraphicRange graphql.Omittable[*EmoteStatisticRange]       `json:"graphicRange,omitempty"`
	Order        graphql.Omittable[*EmotesStatisticsOptsOrder] `json:"order,omitempty"`
}

type EventsubSubscribeInput struct {
	Type      string                          `json:"type"`
	Version   string                          `json:"version"`
	Condition EventsubSubscribeConditionInput `json:"condition"`
}

type Greeting struct {
	ID            string              `json:"id"`
	UserID        string              `json:"userId"`
	TwitchProfile *TwirUserTwitchInfo `json:"twitchProfile"`
	Enabled       bool                `json:"enabled"`
	IsReply       bool                `json:"isReply"`
	Text          string              `json:"text"`
}

type GreetingsCreateInput struct {
	Enabled bool   `json:"enabled"`
	IsReply bool   `json:"isReply"`
	UserID  string `json:"userId"`
	Text    string `json:"text"`
}

type GreetingsUpdateInput struct {
	Enabled graphql.Omittable[*bool]   `json:"enabled,omitempty"`
	IsReply graphql.Omittable[*bool]   `json:"isReply,omitempty"`
	UserID  graphql.Omittable[*string] `json:"userId,omitempty"`
	Text    graphql.Omittable[*string] `json:"text,omitempty"`
}

type Keyword struct {
	ID                  string  `json:"id"`
	Text                string  `json:"text"`
	Response            *string `json:"response,omitempty"`
	Enabled             bool    `json:"enabled"`
	Cooldown            int     `json:"cooldown"`
	IsReply             bool    `json:"isReply"`
	IsRegularExpression bool    `json:"isRegularExpression"`
	UsageCount          int     `json:"usageCount"`
}

type KeywordCreateInput struct {
	Text                string                     `json:"text"`
	Response            graphql.Omittable[*string] `json:"response,omitempty"`
	Cooldown            graphql.Omittable[*int]    `json:"cooldown,omitempty"`
	Enabled             graphql.Omittable[*bool]   `json:"enabled,omitempty"`
	UsageCount          graphql.Omittable[*int]    `json:"usageCount,omitempty"`
	IsRegularExpression graphql.Omittable[*bool]   `json:"isRegularExpression,omitempty"`
	IsReply             graphql.Omittable[*bool]   `json:"isReply,omitempty"`
}

type KeywordUpdateInput struct {
	Text                graphql.Omittable[*string] `json:"text,omitempty"`
	Response            graphql.Omittable[*string] `json:"response,omitempty"`
	Cooldown            graphql.Omittable[*int]    `json:"cooldown,omitempty"`
	Enabled             graphql.Omittable[*bool]   `json:"enabled,omitempty"`
	UsageCount          graphql.Omittable[*int]    `json:"usageCount,omitempty"`
	IsRegularExpression graphql.Omittable[*bool]   `json:"isRegularExpression,omitempty"`
	IsReply             graphql.Omittable[*bool]   `json:"isReply,omitempty"`
}

type Mutation struct {
}

type NotificationUpdateOpts struct {
	Text         graphql.Omittable[*string] `json:"text,omitempty"`
	EditorJsJSON graphql.Omittable[*string] `json:"editorJsJson,omitempty"`
}

type NowPlayingOverlay struct {
	ID              string                  `json:"id"`
	Preset          NowPlayingOverlayPreset `json:"preset"`
	ChannelID       string                  `json:"channelId"`
	FontFamily      string                  `json:"fontFamily"`
	FontWeight      int                     `json:"fontWeight"`
	BackgroundColor string                  `json:"backgroundColor"`
	ShowImage       bool                    `json:"showImage"`
	HideTimeout     *int                    `json:"hideTimeout,omitempty"`
}

type NowPlayingOverlayMutateOpts struct {
	Preset          graphql.Omittable[*NowPlayingOverlayPreset] `json:"preset,omitempty"`
	FontFamily      graphql.Omittable[*string]                  `json:"fontFamily,omitempty"`
	FontWeight      graphql.Omittable[*int]                     `json:"fontWeight,omitempty"`
	BackgroundColor graphql.Omittable[*string]                  `json:"backgroundColor,omitempty"`
	ShowImage       graphql.Omittable[*bool]                    `json:"showImage,omitempty"`
	HideTimeout     graphql.Omittable[*int]                     `json:"hideTimeout,omitempty"`
}

type NowPlayingOverlayTrack struct {
	Artist   string  `json:"artist"`
	Title    string  `json:"title"`
	ImageURL *string `json:"imageUrl,omitempty"`
}

type PublicCommand struct {
	Name         string                    `json:"name"`
	Description  string                    `json:"description"`
	Aliases      []string                  `json:"aliases"`
	Responses    []string                  `json:"responses"`
	Cooldown     int                       `json:"cooldown"`
	CooldownType string                    `json:"cooldownType"`
	Module       string                    `json:"module"`
	Permissions  []PublicCommandPermission `json:"permissions"`
}

type PublicCommandPermission struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type PublicSettings struct {
	Description *string      `json:"description,omitempty"`
	SocialLinks []SocialLink `json:"socialLinks"`
}

type Query struct {
}

type Role struct {
	ID          string                      `json:"id"`
	ChannelID   string                      `json:"channelId"`
	Name        string                      `json:"name"`
	Type        RoleTypeEnum                `json:"type"`
	Permissions []ChannelRolePermissionEnum `json:"permissions"`
	Settings    *RoleSettings               `json:"settings"`
	// This is a list of user ids
	Users []TwirUserTwitchInfo `json:"users"`
}

type RoleSettings struct {
	RequiredWatchTime         int `json:"requiredWatchTime"`
	RequiredMessages          int `json:"requiredMessages"`
	RequiredUserChannelPoints int `json:"requiredUserChannelPoints"`
}

type RolesCreateOrUpdateOpts struct {
	Name        string                           `json:"name"`
	Permissions []ChannelRolePermissionEnum      `json:"permissions"`
	Settings    *CreateOrUpdateRoleSettingsInput `json:"settings"`
	// This is a list of user ids
	Users []string `json:"users"`
}

type RussianRouletteGame struct {
	Enabled              bool   `json:"enabled"`
	CanBeUsedByModerator bool   `json:"canBeUsedByModerator"`
	TimeoutSeconds       int    `json:"timeoutSeconds"`
	DecisionSeconds      int    `json:"decisionSeconds"`
	InitMessage          string `json:"initMessage"`
	SurviveMessage       string `json:"surviveMessage"`
	DeathMessage         string `json:"deathMessage"`
	ChargedBullets       int    `json:"chargedBullets"`
	TumberSize           int    `json:"tumberSize"`
}

type RussianRouletteGameOpts struct {
	Enabled              graphql.Omittable[*bool]   `json:"enabled,omitempty"`
	CanBeUsedByModerator graphql.Omittable[*bool]   `json:"canBeUsedByModerator,omitempty"`
	TimeoutSeconds       graphql.Omittable[*int]    `json:"timeoutSeconds,omitempty"`
	DecisionSeconds      graphql.Omittable[*int]    `json:"decisionSeconds,omitempty"`
	InitMessage          graphql.Omittable[*string] `json:"initMessage,omitempty"`
	SurviveMessage       graphql.Omittable[*string] `json:"surviveMessage,omitempty"`
	DeathMessage         graphql.Omittable[*string] `json:"deathMessage,omitempty"`
	ChargedBullets       graphql.Omittable[*int]    `json:"chargedBullets,omitempty"`
	TumberSize           graphql.Omittable[*int]    `json:"tumberSize,omitempty"`
}

type SeppukuGame struct {
	Enabled           bool   `json:"enabled"`
	TimeoutSeconds    int    `json:"timeoutSeconds"`
	TimeoutModerators bool   `json:"timeoutModerators"`
	Message           string `json:"message"`
	MessageModerators string `json:"messageModerators"`
}

type SeppukuGameOpts struct {
	Enabled           graphql.Omittable[*bool]   `json:"enabled,omitempty"`
	TimeoutSeconds    graphql.Omittable[*int]    `json:"timeoutSeconds,omitempty"`
	TimeoutModerators graphql.Omittable[*bool]   `json:"timeoutModerators,omitempty"`
	Message           graphql.Omittable[*string] `json:"message,omitempty"`
	MessageModerators graphql.Omittable[*string] `json:"messageModerators,omitempty"`
}

type SocialLink struct {
	Title string `json:"title"`
	Href  string `json:"href"`
}

type SocialLinkInput struct {
	Title string `json:"title"`
	Href  string `json:"href"`
}

type SongRequestsChannelTranslations struct {
	Denied string `json:"denied"`
}

type SongRequestsChannelTranslationsOpts struct {
	Denied string `json:"denied"`
}

type SongRequestsDenyList struct {
	Users        []string `json:"users"`
	Songs        []string `json:"songs"`
	Channels     []string `json:"channels"`
	ArtistsNames []string `json:"artistsNames"`
	Words        []string `json:"words"`
}

type SongRequestsDenyListOpts struct {
	Users        []string `json:"users"`
	Songs        []string `json:"songs"`
	Channels     []string `json:"channels"`
	ArtistsNames []string `json:"artistsNames"`
	Words        []string `json:"words"`
}

type SongRequestsSearchChannelOrVideoItem struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	Thumbnail string `json:"thumbnail"`
}

type SongRequestsSearchChannelOrVideoOpts struct {
	Type  SongRequestsSearchChannelOrVideoOptsType `json:"type"`
	Query []string                                 `json:"query"`
}

type SongRequestsSearchChannelOrVideoResponse struct {
	Items []SongRequestsSearchChannelOrVideoItem `json:"items"`
}

type SongRequestsSettings struct {
	Enabled                      bool                      `json:"enabled"`
	AcceptOnlyWhenOnline         bool                      `json:"acceptOnlyWhenOnline"`
	MaxRequests                  int                       `json:"maxRequests"`
	ChannelPointsRewardID        *string                   `json:"channelPointsRewardId,omitempty"`
	AnnouncePlay                 bool                      `json:"announcePlay"`
	NeededVotesForSkip           int                       `json:"neededVotesForSkip"`
	User                         *SongRequestsUserSettings `json:"user"`
	Song                         *SongRequestsSongSettings `json:"song"`
	DenyList                     *SongRequestsDenyList     `json:"denyList"`
	Translations                 *SongRequestsTranslations `json:"translations"`
	TakeSongFromDonationMessages bool                      `json:"takeSongFromDonationMessages"`
	PlayerNoCookieMode           bool                      `json:"playerNoCookieMode"`
}

type SongRequestsSettingsOpts struct {
	Enabled                      bool                          `json:"enabled"`
	AcceptOnlyWhenOnline         bool                          `json:"acceptOnlyWhenOnline"`
	MaxRequests                  int                           `json:"maxRequests"`
	ChannelPointsRewardID        graphql.Omittable[*string]    `json:"channelPointsRewardId,omitempty"`
	AnnouncePlay                 bool                          `json:"announcePlay"`
	NeededVotesForSkip           int                           `json:"neededVotesForSkip"`
	User                         *SongRequestsUserSettingsOpts `json:"user"`
	Song                         *SongRequestsSongSettingsOpts `json:"song"`
	DenyList                     *SongRequestsDenyListOpts     `json:"denyList"`
	Translations                 *SongRequestsTranslationsOpts `json:"translations"`
	TakeSongFromDonationMessages bool                          `json:"takeSongFromDonationMessages"`
	PlayerNoCookieMode           bool                          `json:"playerNoCookieMode"`
}

type SongRequestsSongSettings struct {
	MinLength          int      `json:"minLength"`
	MaxLength          int      `json:"maxLength"`
	MinViews           int      `json:"minViews"`
	AcceptedCategories []string `json:"acceptedCategories"`
}

type SongRequestsSongSettingsOpts struct {
	MinLength          int      `json:"minLength"`
	MaxLength          int      `json:"maxLength"`
	MinViews           int      `json:"minViews"`
	AcceptedCategories []string `json:"acceptedCategories"`
}

type SongRequestsSongTranslations struct {
	Denied               string `json:"denied"`
	NotFound             string `json:"notFound"`
	AlreadyInQueue       string `json:"alreadyInQueue"`
	AgeRestrictions      string `json:"ageRestrictions"`
	CannotGetInformation string `json:"cannotGetInformation"`
	Live                 string `json:"live"`
	MaxLength            string `json:"maxLength"`
	MinLength            string `json:"minLength"`
	RequestedMessage     string `json:"requestedMessage"`
	MaximumOrdered       string `json:"maximumOrdered"`
	MinViews             string `json:"minViews"`
}

type SongRequestsSongTranslationsOpts struct {
	Denied               string `json:"denied"`
	NotFound             string `json:"notFound"`
	AlreadyInQueue       string `json:"alreadyInQueue"`
	AgeRestrictions      string `json:"ageRestrictions"`
	CannotGetInformation string `json:"cannotGetInformation"`
	Live                 string `json:"live"`
	MaxLength            string `json:"maxLength"`
	MinLength            string `json:"minLength"`
	RequestedMessage     string `json:"requestedMessage"`
	MaximumOrdered       string `json:"maximumOrdered"`
	MinViews             string `json:"minViews"`
}

type SongRequestsTranslations struct {
	NowPlaying           string                           `json:"nowPlaying"`
	NotEnabled           string                           `json:"notEnabled"`
	NoText               string                           `json:"noText"`
	AcceptOnlyWhenOnline string                           `json:"acceptOnlyWhenOnline"`
	User                 *SongRequestsUserTranslations    `json:"user"`
	Song                 *SongRequestsSongTranslations    `json:"song"`
	Channel              *SongRequestsChannelTranslations `json:"channel"`
}

type SongRequestsTranslationsOpts struct {
	NowPlaying           string                               `json:"nowPlaying"`
	NotEnabled           string                               `json:"notEnabled"`
	NoText               string                               `json:"noText"`
	AcceptOnlyWhenOnline string                               `json:"acceptOnlyWhenOnline"`
	User                 *SongRequestsUserTranslationsOpts    `json:"user"`
	Song                 *SongRequestsSongTranslationsOpts    `json:"song"`
	Channel              *SongRequestsChannelTranslationsOpts `json:"channel"`
}

type SongRequestsUserSettings struct {
	MaxRequests   int `json:"maxRequests"`
	MinWatchTime  int `json:"minWatchTime"`
	MinMessages   int `json:"minMessages"`
	MinFollowTime int `json:"minFollowTime"`
}

type SongRequestsUserSettingsOpts struct {
	MaxRequests   int `json:"maxRequests"`
	MinWatchTime  int `json:"minWatchTime"`
	MinMessages   int `json:"minMessages"`
	MinFollowTime int `json:"minFollowTime"`
}

type SongRequestsUserTranslations struct {
	Denied      string `json:"denied"`
	MaxRequests string `json:"maxRequests"`
	MinMessages string `json:"minMessages"`
	MinWatched  string `json:"minWatched"`
	MinFollow   string `json:"minFollow"`
}

type SongRequestsUserTranslationsOpts struct {
	Denied      string `json:"denied"`
	MaxRequests string `json:"maxRequests"`
	MinMessages string `json:"minMessages"`
	MinWatched  string `json:"minWatched"`
	MinFollow   string `json:"minFollow"`
}

type Subscription struct {
}

type Timer struct {
	ID              string          `json:"id"`
	Name            string          `json:"name"`
	Enabled         bool            `json:"enabled"`
	TimeInterval    int             `json:"timeInterval"`
	MessageInterval int             `json:"messageInterval"`
	Responses       []TimerResponse `json:"responses"`
}

type TimerCreateInput struct {
	Name            string                     `json:"name"`
	Enabled         bool                       `json:"enabled"`
	TimeInterval    int                        `json:"timeInterval"`
	MessageInterval int                        `json:"messageInterval"`
	Responses       []TimerResponseCreateInput `json:"responses"`
}

type TimerResponse struct {
	ID         string `json:"id"`
	Text       string `json:"text"`
	IsAnnounce bool   `json:"isAnnounce"`
}

type TimerResponseCreateInput struct {
	Text       string `json:"text"`
	IsAnnounce bool   `json:"isAnnounce"`
}

type TimerResponseUpdateInput struct {
	Text       string `json:"text"`
	IsAnnounce bool   `json:"isAnnounce"`
}

type TimerUpdateInput struct {
	Name            graphql.Omittable[*string]                    `json:"name,omitempty"`
	Enabled         graphql.Omittable[*bool]                      `json:"enabled,omitempty"`
	TimeInterval    graphql.Omittable[*int]                       `json:"timeInterval,omitempty"`
	MessageInterval graphql.Omittable[*int]                       `json:"messageInterval,omitempty"`
	Responses       graphql.Omittable[[]TimerResponseUpdateInput] `json:"responses,omitempty"`
}

type TwirAdminUser struct {
	ID             string              `json:"id"`
	TwitchProfile  *TwirUserTwitchInfo `json:"twitchProfile"`
	IsBotAdmin     bool                `json:"isBotAdmin"`
	IsBanned       bool                `json:"isBanned"`
	IsBotModerator bool                `json:"isBotModerator"`
	IsBotEnabled   bool                `json:"isBotEnabled"`
	APIKey         string              `json:"apiKey"`
}

func (TwirAdminUser) IsTwirUser()                                {}
func (this TwirAdminUser) GetID() string                         { return this.ID }
func (this TwirAdminUser) GetTwitchProfile() *TwirUserTwitchInfo { return this.TwitchProfile }

type TwirBadgeCreateOpts struct {
	Name    string                   `json:"name"`
	File    graphql.Upload           `json:"file"`
	Enabled graphql.Omittable[*bool] `json:"enabled,omitempty"`
	FfzSlot int                      `json:"ffzSlot"`
}

type TwirBadgeUpdateOpts struct {
	Name    graphql.Omittable[*string]         `json:"name,omitempty"`
	File    graphql.Omittable[*graphql.Upload] `json:"file,omitempty"`
	Enabled graphql.Omittable[*bool]           `json:"enabled,omitempty"`
	FfzSlot graphql.Omittable[*int]            `json:"ffzSlot,omitempty"`
}

type TwirStats struct {
	Channels        int                 `json:"channels"`
	CreatedCommands int                 `json:"createdCommands"`
	Viewers         int                 `json:"viewers"`
	Messages        int                 `json:"messages"`
	UsedEmotes      int                 `json:"usedEmotes"`
	UsedCommands    int                 `json:"usedCommands"`
	Streamers       []TwirStatsStreamer `json:"streamers"`
}

type TwirStatsStreamer struct {
	ID             string              `json:"id"`
	TwitchProfile  *TwirUserTwitchInfo `json:"twitchProfile"`
	IsLive         bool                `json:"isLive"`
	IsPartner      bool                `json:"isPartner"`
	FollowersCount int                 `json:"followersCount"`
}

type TwirTwitchChannelBadgeResponse struct {
	Badges []TwitchBadge `json:"badges"`
}

type TwirTwitchChannelReward struct {
	ID               string `json:"id"`
	BroadcasterName  string `json:"broadcaster_name"`
	BroadcasterLogin string `json:"broadcaster_login"`
	BroadcasterID    string `json:"broadcaster_id"`
	// In case of image is not set - default image is used
	Image                             *TwirTwitchChannelRewardImage                      `json:"image"`
	BackgroundColor                   string                                             `json:"background_color"`
	IsEnabled                         bool                                               `json:"is_enabled"`
	Cost                              int                                                `json:"cost"`
	Title                             string                                             `json:"title"`
	Prompt                            string                                             `json:"prompt"`
	IsUserInputRequired               bool                                               `json:"is_user_input_required"`
	MaxPerStreamSetting               *TwirTwitchChannelRewardMaxPerStreamSetting        `json:"max_per_stream_setting"`
	MaxPerUserPerStreamSetting        *TwirTwitchChannelRewardMaxPerUserPerStreamSetting `json:"max_per_user_per_stream_setting"`
	GlobalCooldownSetting             *TwirTwitchChannelRewardGlobalCooldownSetting      `json:"global_cooldown_setting"`
	IsPaused                          bool                                               `json:"is_paused"`
	IsInStock                         bool                                               `json:"is_in_stock"`
	ShouldRedemptionsSkipRequestQueue bool                                               `json:"should_redemptions_skip_request_queue"`
	RedemptionsRedeemedCurrentStream  int                                                `json:"redemptions_redeemed_current_stream"`
	CooldownExpiresAt                 string                                             `json:"cooldown_expires_at"`
}

type TwirTwitchChannelRewardGlobalCooldownSetting struct {
	IsEnabled             bool `json:"is_enabled"`
	GlobalCooldownSeconds int  `json:"global_cooldown_seconds"`
}

type TwirTwitchChannelRewardImage struct {
	URL1x string `json:"url_1x"`
	URL2x string `json:"url_2x"`
	URL4x string `json:"url_4x"`
}

type TwirTwitchChannelRewardMaxPerStreamSetting struct {
	IsEnabled    bool `json:"is_enabled"`
	MaxPerStream int  `json:"max_per_stream"`
}

type TwirTwitchChannelRewardMaxPerUserPerStreamSetting struct {
	IsEnabled           bool `json:"is_enabled"`
	MaxPerUserPerStream int  `json:"max_per_user_per_stream"`
}

type TwirTwitchChannelRewardResponse struct {
	PartnerOrAffiliate bool                      `json:"partnerOrAffiliate"`
	Rewards            []TwirTwitchChannelReward `json:"rewards"`
}

type TwirTwitchGlobalBadgeResponse struct {
	Badges []TwitchBadge `json:"badges"`
}

type TwirUserTwitchInfo struct {
	ID              string `json:"id"`
	Login           string `json:"login"`
	DisplayName     string `json:"displayName"`
	ProfileImageURL string `json:"profileImageUrl"`
	Description     string `json:"description"`
	NotFound        bool   `json:"notFound"`
}

type TwirUsersResponse struct {
	Users []TwirAdminUser `json:"users"`
	Total int             `json:"total"`
}

type TwirUsersSearchParams struct {
	Search       graphql.Omittable[*string]  `json:"search,omitempty"`
	Page         graphql.Omittable[*int]     `json:"page,omitempty"`
	PerPage      graphql.Omittable[*int]     `json:"perPage,omitempty"`
	IsBotAdmin   graphql.Omittable[*bool]    `json:"isBotAdmin,omitempty"`
	IsBanned     graphql.Omittable[*bool]    `json:"isBanned,omitempty"`
	IsBotEnabled graphql.Omittable[*bool]    `json:"isBotEnabled,omitempty"`
	Badges       graphql.Omittable[[]string] `json:"badges,omitempty"`
}

type TwitchBadge struct {
	SetID    string               `json:"set_id"`
	Versions []TwitchBadgeVersion `json:"versions"`
}

type TwitchBadgeVersion struct {
	ID         string `json:"id"`
	ImageURL1x string `json:"image_url_1x"`
	ImageURL2x string `json:"image_url_2x"`
	ImageURL4x string `json:"image_url_4x"`
}

type TwitchCategory struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	BoxArtURL string `json:"boxArtUrl"`
}

type TwitchRedemption struct {
	ID         string              `json:"id"`
	ChannelID  string              `json:"channelId"`
	User       *TwirUserTwitchInfo `json:"user"`
	Reward     *TwitchReward       `json:"reward"`
	RedeemedAt time.Time           `json:"redeemedAt"`
	Prompt     *string             `json:"prompt,omitempty"`
}

type TwitchRedemptionResponse struct {
	Redemptions []TwitchRedemption `json:"redemptions"`
	Total       int                `json:"total"`
}

type TwitchRedemptionsOpts struct {
	ByChannelID graphql.Omittable[*string]  `json:"byChannelId,omitempty"`
	UserSearch  graphql.Omittable[*string]  `json:"userSearch,omitempty"`
	Page        graphql.Omittable[*int]     `json:"page,omitempty"`
	PerPage     graphql.Omittable[*int]     `json:"perPage,omitempty"`
	RewardsIds  graphql.Omittable[[]string] `json:"rewardsIds,omitempty"`
}

type TwitchReward struct {
	ID              string   `json:"id"`
	Title           string   `json:"title"`
	Cost            int      `json:"cost"`
	ImageUrls       []string `json:"imageUrls,omitempty"`
	BackgroundColor string   `json:"backgroundColor"`
	Enabled         bool     `json:"enabled"`
	UsedTimes       int      `json:"usedTimes"`
}

type UserNotification struct {
	ID           string    `json:"id"`
	UserID       *string   `json:"userId,omitempty"`
	Text         *string   `json:"text,omitempty"`
	CreatedAt    time.Time `json:"createdAt"`
	EditorJsJSON *string   `json:"editorJsJson,omitempty"`
}

func (UserNotification) IsNotification()               {}
func (this UserNotification) GetID() string            { return this.ID }
func (this UserNotification) GetUserID() *string       { return this.UserID }
func (this UserNotification) GetText() *string         { return this.Text }
func (this UserNotification) GetEditorJsJSON() *string { return this.EditorJsJSON }
func (this UserNotification) GetCreatedAt() time.Time  { return this.CreatedAt }

type UserUpdatePublicSettingsInput struct {
	Description graphql.Omittable[*string]           `json:"description,omitempty"`
	SocialLinks graphql.Omittable[[]SocialLinkInput] `json:"socialLinks,omitempty"`
}

type UserUpdateSettingsInput struct {
	HideOnLandingPage graphql.Omittable[*bool] `json:"hideOnLandingPage,omitempty"`
}

type Variable struct {
	ID          string       `json:"id"`
	Name        string       `json:"name"`
	Description *string      `json:"description,omitempty"`
	Type        VariableType `json:"type"`
	EvalValue   string       `json:"evalValue"`
	Response    string       `json:"response"`
}

type VariableCreateInput struct {
	Name        string                     `json:"name"`
	Description graphql.Omittable[*string] `json:"description,omitempty"`
	Type        VariableType               `json:"type"`
	EvalValue   string                     `json:"evalValue"`
	Response    string                     `json:"response"`
}

type VariableUpdateInput struct {
	Name        graphql.Omittable[*string]       `json:"name,omitempty"`
	Description graphql.Omittable[*string]       `json:"description,omitempty"`
	Type        graphql.Omittable[*VariableType] `json:"type,omitempty"`
	EvalValue   graphql.Omittable[*string]       `json:"evalValue,omitempty"`
	Response    graphql.Omittable[*string]       `json:"response,omitempty"`
}

type VotebanGame struct {
	Enabled                  bool                  `json:"enabled"`
	TimeoutSeconds           int                   `json:"timeoutSeconds"`
	TimeoutModerators        bool                  `json:"timeoutModerators"`
	InitMessage              string                `json:"initMessage"`
	BanMessage               string                `json:"banMessage"`
	BanMessageModerators     string                `json:"banMessageModerators"`
	SurviveMessage           string                `json:"surviveMessage"`
	SurviveMessageModerators string                `json:"surviveMessageModerators"`
	NeededVotes              int                   `json:"neededVotes"`
	VoteDuration             int                   `json:"voteDuration"`
	VotingMode               VoteBanGameVotingMode `json:"votingMode"`
	ChatVotesWordsPositive   []string              `json:"chatVotesWordsPositive"`
	ChatVotesWordsNegative   []string              `json:"chatVotesWordsNegative"`
}

type VotebanGameOpts struct {
	Enabled                  graphql.Omittable[*bool]                  `json:"enabled,omitempty"`
	TimeoutSeconds           graphql.Omittable[*int]                   `json:"timeoutSeconds,omitempty"`
	TimeoutModerators        graphql.Omittable[*bool]                  `json:"timeoutModerators,omitempty"`
	InitMessage              graphql.Omittable[*string]                `json:"initMessage,omitempty"`
	BanMessage               graphql.Omittable[*string]                `json:"banMessage,omitempty"`
	BanMessageModerators     graphql.Omittable[*string]                `json:"banMessageModerators,omitempty"`
	SurviveMessage           graphql.Omittable[*string]                `json:"surviveMessage,omitempty"`
	SurviveMessageModerators graphql.Omittable[*string]                `json:"surviveMessageModerators,omitempty"`
	NeededVotes              graphql.Omittable[*int]                   `json:"neededVotes,omitempty"`
	VoteDuration             graphql.Omittable[*int]                   `json:"voteDuration,omitempty"`
	VotingMode               graphql.Omittable[*VoteBanGameVotingMode] `json:"votingMode,omitempty"`
	ChatVotesWordsPositive   graphql.Omittable[[]string]               `json:"chatVotesWordsPositive,omitempty"`
	ChatVotesWordsNegative   graphql.Omittable[[]string]               `json:"chatVotesWordsNegative,omitempty"`
}

type AuditLogSystem string

const (
	AuditLogSystemBadge                       AuditLogSystem = "BADGE"
	AuditLogSystemBadgeUser                   AuditLogSystem = "BADGE_USER"
	AuditLogSystemChannelCommand              AuditLogSystem = "CHANNEL_COMMAND"
	AuditLogSystemChannelCommandGroup         AuditLogSystem = "CHANNEL_COMMAND_GROUP"
	AuditLogSystemChannelVariable             AuditLogSystem = "CHANNEL_VARIABLE"
	AuditLogSystemChannelGamesEightBall       AuditLogSystem = "CHANNEL_GAMES_EIGHT_BALL"
	AuditLogSystemChannelGamesDuel            AuditLogSystem = "CHANNEL_GAMES_DUEL"
	AuditLogSystemChannelGamesRussianRoulette AuditLogSystem = "CHANNEL_GAMES_RUSSIAN_ROULETTE"
	AuditLogSystemChannelGamesSeppuku         AuditLogSystem = "CHANNEL_GAMES_SEPPUKU"
	AuditLogSystemChannelGamesVoteban         AuditLogSystem = "CHANNEL_GAMES_VOTEBAN"
	AuditLogSystemChannelGreeting             AuditLogSystem = "CHANNEL_GREETING"
	AuditLogSystemChannelKeyword              AuditLogSystem = "CHANNEL_KEYWORD"
	AuditLogSystemChannelModerationSetting    AuditLogSystem = "CHANNEL_MODERATION_SETTING"
	AuditLogSystemChannelOverlayChat          AuditLogSystem = "CHANNEL_OVERLAY_CHAT"
	AuditLogSystemChannelOverlayDudes         AuditLogSystem = "CHANNEL_OVERLAY_DUDES"
	AuditLogSystemChannelOverlayNowPlaying    AuditLogSystem = "CHANNEL_OVERLAY_NOW_PLAYING"
	AuditLogSystemChannelRoles                AuditLogSystem = "CHANNEL_ROLES"
	AuditLogSystemChannelTimers               AuditLogSystem = "CHANNEL_TIMERS"
	AuditLogSystemChannelSongRequests         AuditLogSystem = "CHANNEL_SONG_REQUESTS"
	AuditLogSystemChannelIntegrations         AuditLogSystem = "CHANNEL_INTEGRATIONS"
	AuditLogSystemChannelsAlerts              AuditLogSystem = "CHANNELS_ALERTS"
	AuditLogSystemChannelsModulesSettings     AuditLogSystem = "CHANNELS_MODULES_SETTINGS"
	AuditLogSystemChannelsChatAlerts          AuditLogSystem = "CHANNELS_CHAT_ALERTS"
)

var AllAuditLogSystem = []AuditLogSystem{
	AuditLogSystemBadge,
	AuditLogSystemBadgeUser,
	AuditLogSystemChannelCommand,
	AuditLogSystemChannelCommandGroup,
	AuditLogSystemChannelVariable,
	AuditLogSystemChannelGamesEightBall,
	AuditLogSystemChannelGamesDuel,
	AuditLogSystemChannelGamesRussianRoulette,
	AuditLogSystemChannelGamesSeppuku,
	AuditLogSystemChannelGamesVoteban,
	AuditLogSystemChannelGreeting,
	AuditLogSystemChannelKeyword,
	AuditLogSystemChannelModerationSetting,
	AuditLogSystemChannelOverlayChat,
	AuditLogSystemChannelOverlayDudes,
	AuditLogSystemChannelOverlayNowPlaying,
	AuditLogSystemChannelRoles,
	AuditLogSystemChannelTimers,
	AuditLogSystemChannelSongRequests,
	AuditLogSystemChannelIntegrations,
	AuditLogSystemChannelsAlerts,
	AuditLogSystemChannelsModulesSettings,
	AuditLogSystemChannelsChatAlerts,
}

func (e AuditLogSystem) IsValid() bool {
	switch e {
	case AuditLogSystemBadge, AuditLogSystemBadgeUser, AuditLogSystemChannelCommand, AuditLogSystemChannelCommandGroup, AuditLogSystemChannelVariable, AuditLogSystemChannelGamesEightBall, AuditLogSystemChannelGamesDuel, AuditLogSystemChannelGamesRussianRoulette, AuditLogSystemChannelGamesSeppuku, AuditLogSystemChannelGamesVoteban, AuditLogSystemChannelGreeting, AuditLogSystemChannelKeyword, AuditLogSystemChannelModerationSetting, AuditLogSystemChannelOverlayChat, AuditLogSystemChannelOverlayDudes, AuditLogSystemChannelOverlayNowPlaying, AuditLogSystemChannelRoles, AuditLogSystemChannelTimers, AuditLogSystemChannelSongRequests, AuditLogSystemChannelIntegrations, AuditLogSystemChannelsAlerts, AuditLogSystemChannelsModulesSettings, AuditLogSystemChannelsChatAlerts:
		return true
	}
	return false
}

func (e AuditLogSystem) String() string {
	return string(e)
}

func (e *AuditLogSystem) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuditLogSystem(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuditLogSystem", str)
	}
	return nil
}

func (e AuditLogSystem) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuditOperationType string

const (
	AuditOperationTypeCreate AuditOperationType = "CREATE"
	AuditOperationTypeUpdate AuditOperationType = "UPDATE"
	AuditOperationTypeDelete AuditOperationType = "DELETE"
)

var AllAuditOperationType = []AuditOperationType{
	AuditOperationTypeCreate,
	AuditOperationTypeUpdate,
	AuditOperationTypeDelete,
}

func (e AuditOperationType) IsValid() bool {
	switch e {
	case AuditOperationTypeCreate, AuditOperationTypeUpdate, AuditOperationTypeDelete:
		return true
	}
	return false
}

func (e AuditOperationType) String() string {
	return string(e)
}

func (e *AuditOperationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuditOperationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuditOperationType", str)
	}
	return nil
}

func (e AuditOperationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ChannelRolePermissionEnum string

const (
	ChannelRolePermissionEnumCanAccessDashboard    ChannelRolePermissionEnum = "CAN_ACCESS_DASHBOARD"
	ChannelRolePermissionEnumUpdateChannelTitle    ChannelRolePermissionEnum = "UPDATE_CHANNEL_TITLE"
	ChannelRolePermissionEnumUpdateChannelCategory ChannelRolePermissionEnum = "UPDATE_CHANNEL_CATEGORY"
	ChannelRolePermissionEnumViewCommands          ChannelRolePermissionEnum = "VIEW_COMMANDS"
	ChannelRolePermissionEnumManageCommands        ChannelRolePermissionEnum = "MANAGE_COMMANDS"
	ChannelRolePermissionEnumViewKeywords          ChannelRolePermissionEnum = "VIEW_KEYWORDS"
	ChannelRolePermissionEnumManageKeywords        ChannelRolePermissionEnum = "MANAGE_KEYWORDS"
	ChannelRolePermissionEnumViewTimers            ChannelRolePermissionEnum = "VIEW_TIMERS"
	ChannelRolePermissionEnumManageTimers          ChannelRolePermissionEnum = "MANAGE_TIMERS"
	ChannelRolePermissionEnumViewIntegrations      ChannelRolePermissionEnum = "VIEW_INTEGRATIONS"
	ChannelRolePermissionEnumManageIntegrations    ChannelRolePermissionEnum = "MANAGE_INTEGRATIONS"
	ChannelRolePermissionEnumViewSongRequests      ChannelRolePermissionEnum = "VIEW_SONG_REQUESTS"
	ChannelRolePermissionEnumManageSongRequests    ChannelRolePermissionEnum = "MANAGE_SONG_REQUESTS"
	ChannelRolePermissionEnumViewModeration        ChannelRolePermissionEnum = "VIEW_MODERATION"
	ChannelRolePermissionEnumManageModeration      ChannelRolePermissionEnum = "MANAGE_MODERATION"
	ChannelRolePermissionEnumViewVariables         ChannelRolePermissionEnum = "VIEW_VARIABLES"
	ChannelRolePermissionEnumManageVariables       ChannelRolePermissionEnum = "MANAGE_VARIABLES"
	ChannelRolePermissionEnumViewGreetings         ChannelRolePermissionEnum = "VIEW_GREETINGS"
	ChannelRolePermissionEnumManageGreetings       ChannelRolePermissionEnum = "MANAGE_GREETINGS"
	ChannelRolePermissionEnumViewOverlays          ChannelRolePermissionEnum = "VIEW_OVERLAYS"
	ChannelRolePermissionEnumManageOverlays        ChannelRolePermissionEnum = "MANAGE_OVERLAYS"
	ChannelRolePermissionEnumViewRoles             ChannelRolePermissionEnum = "VIEW_ROLES"
	ChannelRolePermissionEnumManageRoles           ChannelRolePermissionEnum = "MANAGE_ROLES"
	ChannelRolePermissionEnumViewEvents            ChannelRolePermissionEnum = "VIEW_EVENTS"
	ChannelRolePermissionEnumManageEvents          ChannelRolePermissionEnum = "MANAGE_EVENTS"
	ChannelRolePermissionEnumViewAlerts            ChannelRolePermissionEnum = "VIEW_ALERTS"
	ChannelRolePermissionEnumManageAlerts          ChannelRolePermissionEnum = "MANAGE_ALERTS"
	ChannelRolePermissionEnumViewGames             ChannelRolePermissionEnum = "VIEW_GAMES"
	ChannelRolePermissionEnumManageGames           ChannelRolePermissionEnum = "MANAGE_GAMES"
)

var AllChannelRolePermissionEnum = []ChannelRolePermissionEnum{
	ChannelRolePermissionEnumCanAccessDashboard,
	ChannelRolePermissionEnumUpdateChannelTitle,
	ChannelRolePermissionEnumUpdateChannelCategory,
	ChannelRolePermissionEnumViewCommands,
	ChannelRolePermissionEnumManageCommands,
	ChannelRolePermissionEnumViewKeywords,
	ChannelRolePermissionEnumManageKeywords,
	ChannelRolePermissionEnumViewTimers,
	ChannelRolePermissionEnumManageTimers,
	ChannelRolePermissionEnumViewIntegrations,
	ChannelRolePermissionEnumManageIntegrations,
	ChannelRolePermissionEnumViewSongRequests,
	ChannelRolePermissionEnumManageSongRequests,
	ChannelRolePermissionEnumViewModeration,
	ChannelRolePermissionEnumManageModeration,
	ChannelRolePermissionEnumViewVariables,
	ChannelRolePermissionEnumManageVariables,
	ChannelRolePermissionEnumViewGreetings,
	ChannelRolePermissionEnumManageGreetings,
	ChannelRolePermissionEnumViewOverlays,
	ChannelRolePermissionEnumManageOverlays,
	ChannelRolePermissionEnumViewRoles,
	ChannelRolePermissionEnumManageRoles,
	ChannelRolePermissionEnumViewEvents,
	ChannelRolePermissionEnumManageEvents,
	ChannelRolePermissionEnumViewAlerts,
	ChannelRolePermissionEnumManageAlerts,
	ChannelRolePermissionEnumViewGames,
	ChannelRolePermissionEnumManageGames,
}

func (e ChannelRolePermissionEnum) IsValid() bool {
	switch e {
	case ChannelRolePermissionEnumCanAccessDashboard, ChannelRolePermissionEnumUpdateChannelTitle, ChannelRolePermissionEnumUpdateChannelCategory, ChannelRolePermissionEnumViewCommands, ChannelRolePermissionEnumManageCommands, ChannelRolePermissionEnumViewKeywords, ChannelRolePermissionEnumManageKeywords, ChannelRolePermissionEnumViewTimers, ChannelRolePermissionEnumManageTimers, ChannelRolePermissionEnumViewIntegrations, ChannelRolePermissionEnumManageIntegrations, ChannelRolePermissionEnumViewSongRequests, ChannelRolePermissionEnumManageSongRequests, ChannelRolePermissionEnumViewModeration, ChannelRolePermissionEnumManageModeration, ChannelRolePermissionEnumViewVariables, ChannelRolePermissionEnumManageVariables, ChannelRolePermissionEnumViewGreetings, ChannelRolePermissionEnumManageGreetings, ChannelRolePermissionEnumViewOverlays, ChannelRolePermissionEnumManageOverlays, ChannelRolePermissionEnumViewRoles, ChannelRolePermissionEnumManageRoles, ChannelRolePermissionEnumViewEvents, ChannelRolePermissionEnumManageEvents, ChannelRolePermissionEnumViewAlerts, ChannelRolePermissionEnumManageAlerts, ChannelRolePermissionEnumViewGames, ChannelRolePermissionEnumManageGames:
		return true
	}
	return false
}

func (e ChannelRolePermissionEnum) String() string {
	return string(e)
}

func (e *ChannelRolePermissionEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChannelRolePermissionEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChannelRolePermissionEnum", str)
	}
	return nil
}

func (e ChannelRolePermissionEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ChatOverlayAnimation string

const (
	ChatOverlayAnimationDisabled ChatOverlayAnimation = "DISABLED"
	ChatOverlayAnimationDefault  ChatOverlayAnimation = "DEFAULT"
)

var AllChatOverlayAnimation = []ChatOverlayAnimation{
	ChatOverlayAnimationDisabled,
	ChatOverlayAnimationDefault,
}

func (e ChatOverlayAnimation) IsValid() bool {
	switch e {
	case ChatOverlayAnimationDisabled, ChatOverlayAnimationDefault:
		return true
	}
	return false
}

func (e ChatOverlayAnimation) String() string {
	return string(e)
}

func (e *ChatOverlayAnimation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChatOverlayAnimation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChatOverlayAnimation", str)
	}
	return nil
}

func (e ChatOverlayAnimation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CommandExpiresType string

const (
	CommandExpiresTypeDisable CommandExpiresType = "DISABLE"
	CommandExpiresTypeDelete  CommandExpiresType = "DELETE"
)

var AllCommandExpiresType = []CommandExpiresType{
	CommandExpiresTypeDisable,
	CommandExpiresTypeDelete,
}

func (e CommandExpiresType) IsValid() bool {
	switch e {
	case CommandExpiresTypeDisable, CommandExpiresTypeDelete:
		return true
	}
	return false
}

func (e CommandExpiresType) String() string {
	return string(e)
}

func (e *CommandExpiresType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommandExpiresType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommandExpiresType", str)
	}
	return nil
}

func (e CommandExpiresType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CommunityUsersOrder string

const (
	CommunityUsersOrderDesc CommunityUsersOrder = "DESC"
	CommunityUsersOrderAsc  CommunityUsersOrder = "ASC"
)

var AllCommunityUsersOrder = []CommunityUsersOrder{
	CommunityUsersOrderDesc,
	CommunityUsersOrderAsc,
}

func (e CommunityUsersOrder) IsValid() bool {
	switch e {
	case CommunityUsersOrderDesc, CommunityUsersOrderAsc:
		return true
	}
	return false
}

func (e CommunityUsersOrder) String() string {
	return string(e)
}

func (e *CommunityUsersOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommunityUsersOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommunityUsersOrder", str)
	}
	return nil
}

func (e CommunityUsersOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CommunityUsersResetType string

const (
	CommunityUsersResetTypeWatched            CommunityUsersResetType = "WATCHED"
	CommunityUsersResetTypeMessages           CommunityUsersResetType = "MESSAGES"
	CommunityUsersResetTypeUsedEmotes         CommunityUsersResetType = "USED_EMOTES"
	CommunityUsersResetTypeUsedChannelsPoints CommunityUsersResetType = "USED_CHANNELS_POINTS"
)

var AllCommunityUsersResetType = []CommunityUsersResetType{
	CommunityUsersResetTypeWatched,
	CommunityUsersResetTypeMessages,
	CommunityUsersResetTypeUsedEmotes,
	CommunityUsersResetTypeUsedChannelsPoints,
}

func (e CommunityUsersResetType) IsValid() bool {
	switch e {
	case CommunityUsersResetTypeWatched, CommunityUsersResetTypeMessages, CommunityUsersResetTypeUsedEmotes, CommunityUsersResetTypeUsedChannelsPoints:
		return true
	}
	return false
}

func (e CommunityUsersResetType) String() string {
	return string(e)
}

func (e *CommunityUsersResetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommunityUsersResetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommunityUsersResetType", str)
	}
	return nil
}

func (e CommunityUsersResetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CommunityUsersSortBy string

const (
	CommunityUsersSortByWatched            CommunityUsersSortBy = "WATCHED"
	CommunityUsersSortByMessages           CommunityUsersSortBy = "MESSAGES"
	CommunityUsersSortByUsedEmotes         CommunityUsersSortBy = "USED_EMOTES"
	CommunityUsersSortByUsedChannelsPoints CommunityUsersSortBy = "USED_CHANNELS_POINTS"
)

var AllCommunityUsersSortBy = []CommunityUsersSortBy{
	CommunityUsersSortByWatched,
	CommunityUsersSortByMessages,
	CommunityUsersSortByUsedEmotes,
	CommunityUsersSortByUsedChannelsPoints,
}

func (e CommunityUsersSortBy) IsValid() bool {
	switch e {
	case CommunityUsersSortByWatched, CommunityUsersSortByMessages, CommunityUsersSortByUsedEmotes, CommunityUsersSortByUsedChannelsPoints:
		return true
	}
	return false
}

func (e CommunityUsersSortBy) String() string {
	return string(e)
}

func (e *CommunityUsersSortBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommunityUsersSortBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommunityUsersSortBy", str)
	}
	return nil
}

func (e CommunityUsersSortBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DashboardEventType string

const (
	DashboardEventTypeDonation                   DashboardEventType = "DONATION"
	DashboardEventTypeFollow                     DashboardEventType = "FOLLOW"
	DashboardEventTypeRaided                     DashboardEventType = "RAIDED"
	DashboardEventTypeSubscribe                  DashboardEventType = "SUBSCRIBE"
	DashboardEventTypeResubscribe                DashboardEventType = "RESUBSCRIBE"
	DashboardEventTypeSubgift                    DashboardEventType = "SUBGIFT"
	DashboardEventTypeFirstUserMessage           DashboardEventType = "FIRST_USER_MESSAGE"
	DashboardEventTypeChatClear                  DashboardEventType = "CHAT_CLEAR"
	DashboardEventTypeRedemptionCreated          DashboardEventType = "REDEMPTION_CREATED"
	DashboardEventTypeChannelBan                 DashboardEventType = "CHANNEL_BAN"
	DashboardEventTypeChannelUnbanRequestCreate  DashboardEventType = "CHANNEL_UNBAN_REQUEST_CREATE"
	DashboardEventTypeChannelUnbanRequestResolve DashboardEventType = "CHANNEL_UNBAN_REQUEST_RESOLVE"
)

var AllDashboardEventType = []DashboardEventType{
	DashboardEventTypeDonation,
	DashboardEventTypeFollow,
	DashboardEventTypeRaided,
	DashboardEventTypeSubscribe,
	DashboardEventTypeResubscribe,
	DashboardEventTypeSubgift,
	DashboardEventTypeFirstUserMessage,
	DashboardEventTypeChatClear,
	DashboardEventTypeRedemptionCreated,
	DashboardEventTypeChannelBan,
	DashboardEventTypeChannelUnbanRequestCreate,
	DashboardEventTypeChannelUnbanRequestResolve,
}

func (e DashboardEventType) IsValid() bool {
	switch e {
	case DashboardEventTypeDonation, DashboardEventTypeFollow, DashboardEventTypeRaided, DashboardEventTypeSubscribe, DashboardEventTypeResubscribe, DashboardEventTypeSubgift, DashboardEventTypeFirstUserMessage, DashboardEventTypeChatClear, DashboardEventTypeRedemptionCreated, DashboardEventTypeChannelBan, DashboardEventTypeChannelUnbanRequestCreate, DashboardEventTypeChannelUnbanRequestResolve:
		return true
	}
	return false
}

func (e DashboardEventType) String() string {
	return string(e)
}

func (e *DashboardEventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DashboardEventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DashboardEventType", str)
	}
	return nil
}

func (e DashboardEventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmoteStatisticRange string

const (
	EmoteStatisticRangeLastDay        EmoteStatisticRange = "LAST_DAY"
	EmoteStatisticRangeLastWeek       EmoteStatisticRange = "LAST_WEEK"
	EmoteStatisticRangeLastMonth      EmoteStatisticRange = "LAST_MONTH"
	EmoteStatisticRangeLastThreeMonth EmoteStatisticRange = "LAST_THREE_MONTH"
	EmoteStatisticRangeLastYear       EmoteStatisticRange = "LAST_YEAR"
)

var AllEmoteStatisticRange = []EmoteStatisticRange{
	EmoteStatisticRangeLastDay,
	EmoteStatisticRangeLastWeek,
	EmoteStatisticRangeLastMonth,
	EmoteStatisticRangeLastThreeMonth,
	EmoteStatisticRangeLastYear,
}

func (e EmoteStatisticRange) IsValid() bool {
	switch e {
	case EmoteStatisticRangeLastDay, EmoteStatisticRangeLastWeek, EmoteStatisticRangeLastMonth, EmoteStatisticRangeLastThreeMonth, EmoteStatisticRangeLastYear:
		return true
	}
	return false
}

func (e EmoteStatisticRange) String() string {
	return string(e)
}

func (e *EmoteStatisticRange) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmoteStatisticRange(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmoteStatisticRange", str)
	}
	return nil
}

func (e EmoteStatisticRange) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmotesStatisticsOptsOrder string

const (
	EmotesStatisticsOptsOrderAsc  EmotesStatisticsOptsOrder = "ASC"
	EmotesStatisticsOptsOrderDesc EmotesStatisticsOptsOrder = "DESC"
)

var AllEmotesStatisticsOptsOrder = []EmotesStatisticsOptsOrder{
	EmotesStatisticsOptsOrderAsc,
	EmotesStatisticsOptsOrderDesc,
}

func (e EmotesStatisticsOptsOrder) IsValid() bool {
	switch e {
	case EmotesStatisticsOptsOrderAsc, EmotesStatisticsOptsOrderDesc:
		return true
	}
	return false
}

func (e EmotesStatisticsOptsOrder) String() string {
	return string(e)
}

func (e *EmotesStatisticsOptsOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmotesStatisticsOptsOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmotesStatisticsOptsOrder", str)
	}
	return nil
}

func (e EmotesStatisticsOptsOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventsubSubscribeConditionInput string

const (
	EventsubSubscribeConditionInputChannel                EventsubSubscribeConditionInput = "CHANNEL"
	EventsubSubscribeConditionInputUser                   EventsubSubscribeConditionInput = "USER"
	EventsubSubscribeConditionInputChannelWithModeratorID EventsubSubscribeConditionInput = "CHANNEL_WITH_MODERATOR_ID"
	EventsubSubscribeConditionInputChannelWithBotID       EventsubSubscribeConditionInput = "CHANNEL_WITH_BOT_ID"
)

var AllEventsubSubscribeConditionInput = []EventsubSubscribeConditionInput{
	EventsubSubscribeConditionInputChannel,
	EventsubSubscribeConditionInputUser,
	EventsubSubscribeConditionInputChannelWithModeratorID,
	EventsubSubscribeConditionInputChannelWithBotID,
}

func (e EventsubSubscribeConditionInput) IsValid() bool {
	switch e {
	case EventsubSubscribeConditionInputChannel, EventsubSubscribeConditionInputUser, EventsubSubscribeConditionInputChannelWithModeratorID, EventsubSubscribeConditionInputChannelWithBotID:
		return true
	}
	return false
}

func (e EventsubSubscribeConditionInput) String() string {
	return string(e)
}

func (e *EventsubSubscribeConditionInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventsubSubscribeConditionInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventsubSubscribeConditionInput", str)
	}
	return nil
}

func (e EventsubSubscribeConditionInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotificationType string

const (
	NotificationTypeGlobal NotificationType = "GLOBAL"
	NotificationTypeUser   NotificationType = "USER"
)

var AllNotificationType = []NotificationType{
	NotificationTypeGlobal,
	NotificationTypeUser,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeGlobal, NotificationTypeUser:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NowPlayingOverlayPreset string

const (
	NowPlayingOverlayPresetTransparent   NowPlayingOverlayPreset = "TRANSPARENT"
	NowPlayingOverlayPresetAidenRedesign NowPlayingOverlayPreset = "AIDEN_REDESIGN"
	NowPlayingOverlayPresetSimpleLine    NowPlayingOverlayPreset = "SIMPLE_LINE"
)

var AllNowPlayingOverlayPreset = []NowPlayingOverlayPreset{
	NowPlayingOverlayPresetTransparent,
	NowPlayingOverlayPresetAidenRedesign,
	NowPlayingOverlayPresetSimpleLine,
}

func (e NowPlayingOverlayPreset) IsValid() bool {
	switch e {
	case NowPlayingOverlayPresetTransparent, NowPlayingOverlayPresetAidenRedesign, NowPlayingOverlayPresetSimpleLine:
		return true
	}
	return false
}

func (e NowPlayingOverlayPreset) String() string {
	return string(e)
}

func (e *NowPlayingOverlayPreset) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NowPlayingOverlayPreset(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NowPlayingOverlayPreset", str)
	}
	return nil
}

func (e NowPlayingOverlayPreset) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RoleTypeEnum string

const (
	RoleTypeEnumBroadcaster RoleTypeEnum = "BROADCASTER"
	RoleTypeEnumModerator   RoleTypeEnum = "MODERATOR"
	RoleTypeEnumVip         RoleTypeEnum = "VIP"
	RoleTypeEnumSubscriber  RoleTypeEnum = "SUBSCRIBER"
	RoleTypeEnumViewer      RoleTypeEnum = "VIEWER"
	RoleTypeEnumCustom      RoleTypeEnum = "CUSTOM"
)

var AllRoleTypeEnum = []RoleTypeEnum{
	RoleTypeEnumBroadcaster,
	RoleTypeEnumModerator,
	RoleTypeEnumVip,
	RoleTypeEnumSubscriber,
	RoleTypeEnumViewer,
	RoleTypeEnumCustom,
}

func (e RoleTypeEnum) IsValid() bool {
	switch e {
	case RoleTypeEnumBroadcaster, RoleTypeEnumModerator, RoleTypeEnumVip, RoleTypeEnumSubscriber, RoleTypeEnumViewer, RoleTypeEnumCustom:
		return true
	}
	return false
}

func (e RoleTypeEnum) String() string {
	return string(e)
}

func (e *RoleTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleTypeEnum", str)
	}
	return nil
}

func (e RoleTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SongRequestsSearchChannelOrVideoOptsType string

const (
	SongRequestsSearchChannelOrVideoOptsTypeChannel SongRequestsSearchChannelOrVideoOptsType = "CHANNEL"
	SongRequestsSearchChannelOrVideoOptsTypeVideo   SongRequestsSearchChannelOrVideoOptsType = "VIDEO"
)

var AllSongRequestsSearchChannelOrVideoOptsType = []SongRequestsSearchChannelOrVideoOptsType{
	SongRequestsSearchChannelOrVideoOptsTypeChannel,
	SongRequestsSearchChannelOrVideoOptsTypeVideo,
}

func (e SongRequestsSearchChannelOrVideoOptsType) IsValid() bool {
	switch e {
	case SongRequestsSearchChannelOrVideoOptsTypeChannel, SongRequestsSearchChannelOrVideoOptsTypeVideo:
		return true
	}
	return false
}

func (e SongRequestsSearchChannelOrVideoOptsType) String() string {
	return string(e)
}

func (e *SongRequestsSearchChannelOrVideoOptsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SongRequestsSearchChannelOrVideoOptsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SongRequestsSearchChannelOrVideoOptsType", str)
	}
	return nil
}

func (e SongRequestsSearchChannelOrVideoOptsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VariableType string

const (
	VariableTypeScript VariableType = "SCRIPT"
	VariableTypeText   VariableType = "TEXT"
	VariableTypeNumber VariableType = "NUMBER"
)

var AllVariableType = []VariableType{
	VariableTypeScript,
	VariableTypeText,
	VariableTypeNumber,
}

func (e VariableType) IsValid() bool {
	switch e {
	case VariableTypeScript, VariableTypeText, VariableTypeNumber:
		return true
	}
	return false
}

func (e VariableType) String() string {
	return string(e)
}

func (e *VariableType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VariableType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VariableType", str)
	}
	return nil
}

func (e VariableType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VoteBanGameVotingMode string

const (
	VoteBanGameVotingModeChat  VoteBanGameVotingMode = "CHAT"
	VoteBanGameVotingModePolls VoteBanGameVotingMode = "POLLS"
)

var AllVoteBanGameVotingMode = []VoteBanGameVotingMode{
	VoteBanGameVotingModeChat,
	VoteBanGameVotingModePolls,
}

func (e VoteBanGameVotingMode) IsValid() bool {
	switch e {
	case VoteBanGameVotingModeChat, VoteBanGameVotingModePolls:
		return true
	}
	return false
}

func (e VoteBanGameVotingMode) String() string {
	return string(e)
}

func (e *VoteBanGameVotingMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VoteBanGameVotingMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VoteBanGameVotingMode", str)
	}
	return nil
}

func (e VoteBanGameVotingMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
